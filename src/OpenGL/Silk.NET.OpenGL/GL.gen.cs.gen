#pragma warning disable 1591
namespace Silk.NET.OpenGL
{
    // This file is part of Silk.NET.
    // 
    // You may modify and distribute Silk.NET under the terms
    // of the MIT license. See the LICENSE file for details.
    using System;
    using System.Runtime.InteropServices;
    using System.Text;
    using Silk.NET.Core.Native;
    using Silk.NET.Core.Attributes;
    using Silk.NET.Core.Contexts;
    using Silk.NET.Core.Loader;

    public unsafe partial class GL : NativeAPI
    {
        public unsafe partial void MultiDrawArraysIndirectCount(GLEnum mode, void *indirect, IntPtr drawcount, uint maxdrawcount, uint stride)
        {
            ((delegate *cdecl<GLEnum,, IntPtr, UInt32, UInt32, void>)Load("glMultiDrawArraysIndirectCount", 1))(mode, indirect, drawcount, maxdrawcount, stride);
        }

        public partial void MultiDrawArraysIndirectCount<T0>(GLEnum mode, Span<T0> indirect, IntPtr drawcount, uint maxdrawcount, uint stride)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, Span, IntPtr, UInt32, UInt32, void>)Load("glMultiDrawArraysIndirectCount", 2))(mode, indirect, drawcount, maxdrawcount, stride);
        }

        public unsafe partial void MultiDrawElementsIndirectCount(GLEnum mode, GLEnum type, void *indirect, IntPtr drawcount, uint maxdrawcount, uint stride)
        {
            ((delegate *cdecl<GLEnum, GLEnum,, IntPtr, UInt32, UInt32, void>)Load("glMultiDrawElementsIndirectCount", 3))(mode, type, indirect, drawcount, maxdrawcount, stride);
        }

        public partial void MultiDrawElementsIndirectCount<T0>(GLEnum mode, GLEnum type, Span<T0> indirect, IntPtr drawcount, uint maxdrawcount, uint stride)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, GLEnum, Span, IntPtr, UInt32, UInt32, void>)Load("glMultiDrawElementsIndirectCount", 4))(mode, type, indirect, drawcount, maxdrawcount, stride);
        }

        public partial void PolygonOffsetClamp(float factor, float units, float clamp)
        {
            ((delegate *cdecl<Single, Single, Single, void>)Load("glPolygonOffsetClamp", 5))(factor, units, clamp);
        }

        public unsafe partial void SpecializeShader(uint shader, byte *pEntryPoint, uint numSpecializationConstants, uint *pConstantIndex, uint *pConstantValue)
        {
            ((delegate *cdecl<UInt32,, UInt32,,, void>)Load("glSpecializeShader", 6))(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
        }

        public partial void SpecializeShader(uint shader, Span<byte> pEntryPoint, uint numSpecializationConstants, Span<uint> pConstantIndex, Span<uint> pConstantValue)
        {
            ((delegate *cdecl<UInt32, Span, UInt32, Span, Span, void>)Load("glSpecializeShader", 7))(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
        }

        public unsafe partial void MultiDrawArraysIndirectCount(PrimitiveType mode, void *indirect, IntPtr drawcount, uint maxdrawcount, uint stride)
        {
            ((delegate *cdecl<PrimitiveType,, IntPtr, UInt32, UInt32, void>)Load("glMultiDrawArraysIndirectCount", 8))(mode, indirect, drawcount, maxdrawcount, stride);
        }

        public partial void MultiDrawArraysIndirectCount<T0>(PrimitiveType mode, Span<T0> indirect, IntPtr drawcount, uint maxdrawcount, uint stride)
            where T0 : unmanaged
        {
            ((delegate *cdecl<PrimitiveType, Span, IntPtr, UInt32, UInt32, void>)Load("glMultiDrawArraysIndirectCount", 9))(mode, indirect, drawcount, maxdrawcount, stride);
        }

        public unsafe partial void MultiDrawElementsIndirectCount(PrimitiveType mode, DrawElementsType type, void *indirect, IntPtr drawcount, uint maxdrawcount, uint stride)
        {
            ((delegate *cdecl<PrimitiveType, DrawElementsType,, IntPtr, UInt32, UInt32, void>)Load("glMultiDrawElementsIndirectCount", 10))(mode, type, indirect, drawcount, maxdrawcount, stride);
        }

        public partial void MultiDrawElementsIndirectCount<T0>(PrimitiveType mode, DrawElementsType type, Span<T0> indirect, IntPtr drawcount, uint maxdrawcount, uint stride)
            where T0 : unmanaged
        {
            ((delegate *cdecl<PrimitiveType, DrawElementsType, Span, IntPtr, UInt32, UInt32, void>)Load("glMultiDrawElementsIndirectCount", 11))(mode, type, indirect, drawcount, maxdrawcount, stride);
        }

        public unsafe partial void SpecializeShader(uint shader, string pEntryPoint, uint numSpecializationConstants, uint *pConstantIndex, uint *pConstantValue)
        {
            ((delegate *cdecl<UInt32, String, UInt32,,, void>)Load("glSpecializeShader", 12))(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
        }

        public partial void SpecializeShader(uint shader, string pEntryPoint, uint numSpecializationConstants, Span<uint> pConstantIndex, Span<uint> pConstantValue)
        {
            ((delegate *cdecl<UInt32, String, UInt32, Span, Span, void>)Load("glSpecializeShader", 13))(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
        }

        public partial void BindTextureUnit(uint unit, uint texture)
        {
            ((delegate *cdecl<UInt32, UInt32, void>)Load("glBindTextureUnit", 14))(unit, texture);
        }

        public partial void BlitNamedFramebuffer(uint readFramebuffer, uint drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, GLEnum filter)
        {
            ((delegate *cdecl<UInt32, UInt32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, UInt32, GLEnum, void>)Load("glBlitNamedFramebuffer", 15))(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }

        public unsafe partial void ClearNamedBufferData(uint buffer, GLEnum internalformat, GLEnum format, GLEnum type, void *data)
        {
            ((delegate *cdecl<UInt32, GLEnum, GLEnum, GLEnum,, void>)Load("glClearNamedBufferData", 17))(buffer, internalformat, format, type, data);
        }

        public partial void ClearNamedBufferData<T0>(uint buffer, GLEnum internalformat, GLEnum format, GLEnum type, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, GLEnum, GLEnum, GLEnum, Span, void>)Load("glClearNamedBufferData", 18))(buffer, internalformat, format, type, data);
        }

        public unsafe partial void ClearNamedBufferSubData(uint buffer, GLEnum internalformat, IntPtr offset, UIntPtr size, GLEnum format, GLEnum type, void *data)
        {
            ((delegate *cdecl<UInt32, GLEnum, IntPtr, UIntPtr, GLEnum, GLEnum,, void>)Load("glClearNamedBufferSubData", 19))(buffer, internalformat, offset, size, format, type, data);
        }

        public partial void ClearNamedBufferSubData<T0>(uint buffer, GLEnum internalformat, IntPtr offset, UIntPtr size, GLEnum format, GLEnum type, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, GLEnum, IntPtr, UIntPtr, GLEnum, GLEnum, Span, void>)Load("glClearNamedBufferSubData", 20))(buffer, internalformat, offset, size, format, type, data);
        }

        public unsafe partial void ClearNamedFramebuffer(uint framebuffer, GLEnum buffer, int drawbuffer, int *value)
        {
            ((delegate *cdecl<UInt32, GLEnum, Int32,, void>)Load("glClearNamedFramebufferiv", 21))(framebuffer, buffer, drawbuffer, value);
        }

        public partial void ClearNamedFramebuffer(uint framebuffer, GLEnum buffer, int drawbuffer, Span<int> value)
        {
            ((delegate *cdecl<UInt32, GLEnum, Int32, Span, void>)Load("glClearNamedFramebufferiv", 22))(framebuffer, buffer, drawbuffer, value);
        }

        public unsafe partial void ClearNamedFramebuffer(uint framebuffer, GLEnum buffer, int drawbuffer, uint *value)
        {
            ((delegate *cdecl<UInt32, GLEnum, Int32,, void>)Load("glClearNamedFramebufferuiv", 23))(framebuffer, buffer, drawbuffer, value);
        }

        public partial void ClearNamedFramebuffer(uint framebuffer, GLEnum buffer, int drawbuffer, Span<uint> value)
        {
            ((delegate *cdecl<UInt32, GLEnum, Int32, Span, void>)Load("glClearNamedFramebufferuiv", 24))(framebuffer, buffer, drawbuffer, value);
        }

        public unsafe partial void ClearNamedFramebuffer(uint framebuffer, GLEnum buffer, int drawbuffer, float *value)
        {
            ((delegate *cdecl<UInt32, GLEnum, Int32,, void>)Load("glClearNamedFramebufferfv", 25))(framebuffer, buffer, drawbuffer, value);
        }

        public partial void ClearNamedFramebuffer(uint framebuffer, GLEnum buffer, int drawbuffer, Span<float> value)
        {
            ((delegate *cdecl<UInt32, GLEnum, Int32, Span, void>)Load("glClearNamedFramebufferfv", 26))(framebuffer, buffer, drawbuffer, value);
        }

        public partial void ClearNamedFramebuffer(uint framebuffer, GLEnum buffer, int drawbuffer, float depth, int stencil)
        {
            ((delegate *cdecl<UInt32, GLEnum, Int32, Single, Int32, void>)Load("glClearNamedFramebufferfi", 27))(framebuffer, buffer, drawbuffer, depth, stencil);
        }

        public partial void ClipControl(GLEnum origin, GLEnum depth)
        {
            ((delegate *cdecl<GLEnum, GLEnum, void>)Load("glClipControl", 28))(origin, depth);
        }

        public unsafe partial void CompressedTextureSubImage1D(uint texture, int level, int xoffset, uint width, GLEnum format, uint imageSize, void *data)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, UInt32, GLEnum, UInt32,, void>)Load("glCompressedTextureSubImage1D", 29))(texture, level, xoffset, width, format, imageSize, data);
        }

        public partial void CompressedTextureSubImage1D<T0>(uint texture, int level, int xoffset, uint width, GLEnum format, uint imageSize, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, Int32, UInt32, GLEnum, UInt32, Span, void>)Load("glCompressedTextureSubImage1D", 30))(texture, level, xoffset, width, format, imageSize, data);
        }

        public unsafe partial void CompressedTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, uint width, uint height, GLEnum format, uint imageSize, void *data)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, UInt32, UInt32, GLEnum, UInt32,, void>)Load("glCompressedTextureSubImage2D", 31))(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
        }

        public partial void CompressedTextureSubImage2D<T0>(uint texture, int level, int xoffset, int yoffset, uint width, uint height, GLEnum format, uint imageSize, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, UInt32, UInt32, GLEnum, UInt32, Span, void>)Load("glCompressedTextureSubImage2D", 32))(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
        }

        public unsafe partial void CompressedTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, GLEnum format, uint imageSize, void *data)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, GLEnum, UInt32,, void>)Load("glCompressedTextureSubImage3D", 33))(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }

        public partial void CompressedTextureSubImage3D<T0>(uint texture, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, GLEnum format, uint imageSize, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, GLEnum, UInt32, Span, void>)Load("glCompressedTextureSubImage3D", 34))(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }

        public partial void CopyNamedBufferSubData(uint readBuffer, uint writeBuffer, IntPtr readOffset, IntPtr writeOffset, UIntPtr size)
        {
            ((delegate *cdecl<UInt32, UInt32, IntPtr, IntPtr, UIntPtr, void>)Load("glCopyNamedBufferSubData", 35))(readBuffer, writeBuffer, readOffset, writeOffset, size);
        }

        public partial void CopyTextureSubImage1D(uint texture, int level, int xoffset, int x, int y, uint width)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, Int32, UInt32, void>)Load("glCopyTextureSubImage1D", 36))(texture, level, xoffset, x, y, width);
        }

        public partial void CopyTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int x, int y, uint width, uint height)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, Int32, Int32, UInt32, UInt32, void>)Load("glCopyTextureSubImage2D", 37))(texture, level, xoffset, yoffset, x, y, width, height);
        }

        public partial void CopyTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, uint width, uint height)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, Int32, Int32, Int32, UInt32, UInt32, void>)Load("glCopyTextureSubImage3D", 38))(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
        }

        public unsafe partial void CreateBuffers(uint n, uint *buffers)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glCreateBuffers", 39))(n, buffers);
        }

        public partial void CreateBuffers(uint n, Span<uint> buffers)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glCreateBuffers", 40))(n, buffers);
        }

        public unsafe partial void CreateFramebuffers(uint n, uint *framebuffers)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glCreateFramebuffers", 41))(n, framebuffers);
        }

        public partial void CreateFramebuffers(uint n, Span<uint> framebuffers)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glCreateFramebuffers", 42))(n, framebuffers);
        }

        public unsafe partial void CreateProgramPipelines(uint n, uint *pipelines)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glCreateProgramPipelines", 43))(n, pipelines);
        }

        public partial void CreateProgramPipelines(uint n, Span<uint> pipelines)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glCreateProgramPipelines", 44))(n, pipelines);
        }

        public unsafe partial void CreateQueries(GLEnum target, uint n, uint *ids)
        {
            ((delegate *cdecl<GLEnum, UInt32,, void>)Load("glCreateQueries", 45))(target, n, ids);
        }

        public partial void CreateQueries(GLEnum target, uint n, Span<uint> ids)
        {
            ((delegate *cdecl<GLEnum, UInt32, Span, void>)Load("glCreateQueries", 46))(target, n, ids);
        }

        public unsafe partial void CreateRenderbuffers(uint n, uint *renderbuffers)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glCreateRenderbuffers", 47))(n, renderbuffers);
        }

        public partial void CreateRenderbuffers(uint n, Span<uint> renderbuffers)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glCreateRenderbuffers", 48))(n, renderbuffers);
        }

        public unsafe partial void CreateSamplers(uint n, uint *samplers)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glCreateSamplers", 49))(n, samplers);
        }

        public partial void CreateSamplers(uint n, Span<uint> samplers)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glCreateSamplers", 50))(n, samplers);
        }

        public unsafe partial void CreateTextures(GLEnum target, uint n, uint *textures)
        {
            ((delegate *cdecl<GLEnum, UInt32,, void>)Load("glCreateTextures", 51))(target, n, textures);
        }

        public partial void CreateTextures(GLEnum target, uint n, Span<uint> textures)
        {
            ((delegate *cdecl<GLEnum, UInt32, Span, void>)Load("glCreateTextures", 52))(target, n, textures);
        }

        public unsafe partial void CreateTransformFeedbacks(uint n, uint *ids)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glCreateTransformFeedbacks", 53))(n, ids);
        }

        public partial void CreateTransformFeedbacks(uint n, Span<uint> ids)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glCreateTransformFeedbacks", 54))(n, ids);
        }

        public unsafe partial void CreateVertexArrays(uint n, uint *arrays)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glCreateVertexArrays", 55))(n, arrays);
        }

        public partial void CreateVertexArrays(uint n, Span<uint> arrays)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glCreateVertexArrays", 56))(n, arrays);
        }

        public partial void DisableVertexArrayAttrib(uint vaobj, uint index)
        {
            ((delegate *cdecl<UInt32, UInt32, void>)Load("glDisableVertexArrayAttrib", 57))(vaobj, index);
        }

        public partial void EnableVertexArrayAttrib(uint vaobj, uint index)
        {
            ((delegate *cdecl<UInt32, UInt32, void>)Load("glEnableVertexArrayAttrib", 58))(vaobj, index);
        }

        public partial void FlushMappedNamedBufferRange(uint buffer, IntPtr offset, UIntPtr length)
        {
            ((delegate *cdecl<UInt32, IntPtr, UIntPtr, void>)Load("glFlushMappedNamedBufferRange", 59))(buffer, offset, length);
        }

        public partial void GenerateTextureMipmap(uint texture)
        {
            ((delegate *cdecl<UInt32, void>)Load("glGenerateTextureMipmap", 60))(texture);
        }

        public unsafe partial void GetCompressedTextureImage(uint texture, int level, uint bufSize, void *pixels)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32,, void>)Load("glGetCompressedTextureImage", 61))(texture, level, bufSize, pixels);
        }

        public partial void GetCompressedTextureImage<T0>(uint texture, int level, uint bufSize, Span<T0> pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Span, void>)Load("glGetCompressedTextureImage", 62))(texture, level, bufSize, pixels);
        }

        public unsafe partial void GetCompressedTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, uint bufSize, void *pixels)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, UInt32,, void>)Load("glGetCompressedTextureSubImage", 63))(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
        }

        public partial void GetCompressedTextureSubImage<T0>(uint texture, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, uint bufSize, Span<T0> pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, UInt32, Span, void>)Load("glGetCompressedTextureSubImage", 64))(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
        }

        public unsafe partial void GetNamedBufferParameter(uint buffer, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetNamedBufferParameteriv", 66))(buffer, pname, params);
        }

        public partial void GetNamedBufferParameter(uint buffer, GLEnum pname, Span<int> @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, Span, void>)Load("glGetNamedBufferParameteriv", 67))(buffer, pname, params);
        }

        public unsafe partial void GetNamedBufferParameter(uint buffer, GLEnum pname, long *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetNamedBufferParameteri64v", 68))(buffer, pname, params);
        }

        public partial void GetNamedBufferParameter(uint buffer, GLEnum pname, Span<long> @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, Span, void>)Load("glGetNamedBufferParameteri64v", 69))(buffer, pname, params);
        }

        public unsafe partial void GetNamedBufferPointer(uint buffer, GLEnum pname, void **@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetNamedBufferPointerv", 70))(buffer, pname, params);
        }

        public unsafe partial void GetNamedBufferSubData(uint buffer, IntPtr offset, UIntPtr size, void *data)
        {
            ((delegate *cdecl<UInt32, IntPtr, UIntPtr,, void>)Load("glGetNamedBufferSubData", 71))(buffer, offset, size, data);
        }

        public partial void GetNamedBufferSubData<T0>(uint buffer, IntPtr offset, UIntPtr size, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, IntPtr, UIntPtr, Span, void>)Load("glGetNamedBufferSubData", 72))(buffer, offset, size, data);
        }

        public unsafe partial void GetNamedFramebufferAttachmentParameter(uint framebuffer, GLEnum attachment, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum, GLEnum,, void>)Load("glGetNamedFramebufferAttachmentParameteriv", 73))(framebuffer, attachment, pname, params);
        }

        public partial void GetNamedFramebufferAttachmentParameter(uint framebuffer, GLEnum attachment, GLEnum pname, Span<int> @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, GLEnum, Span, void>)Load("glGetNamedFramebufferAttachmentParameteriv", 74))(framebuffer, attachment, pname, params);
        }

        public unsafe partial void GetNamedFramebufferParameter(uint framebuffer, GLEnum pname, int *param)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetNamedFramebufferParameteriv", 75))(framebuffer, pname, param);
        }

        public partial void GetNamedFramebufferParameter(uint framebuffer, GLEnum pname, Span<int> param)
        {
            ((delegate *cdecl<UInt32, GLEnum, Span, void>)Load("glGetNamedFramebufferParameteriv", 76))(framebuffer, pname, param);
        }

        public unsafe partial void GetNamedRenderbufferParameter(uint renderbuffer, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetNamedRenderbufferParameteriv", 77))(renderbuffer, pname, params);
        }

        public partial void GetNamedRenderbufferParameter(uint renderbuffer, GLEnum pname, Span<int> @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, Span, void>)Load("glGetNamedRenderbufferParameteriv", 78))(renderbuffer, pname, params);
        }

        public unsafe partial void GetnColorTable(GLEnum target, GLEnum format, GLEnum type, uint bufSize, void *table)
        {
            ((delegate *cdecl<GLEnum, GLEnum, GLEnum, UInt32,, void>)Load("glGetnColorTable", 79))(target, format, type, bufSize, table);
        }

        public partial void GetnColorTable<T0>(GLEnum target, GLEnum format, GLEnum type, uint bufSize, Span<T0> table)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, GLEnum, GLEnum, UInt32, Span, void>)Load("glGetnColorTable", 80))(target, format, type, bufSize, table);
        }

        public unsafe partial void GetnCompressedTexImage(GLEnum target, int lod, uint bufSize, void *pixels)
        {
            ((delegate *cdecl<GLEnum, Int32, UInt32,, void>)Load("glGetnCompressedTexImage", 81))(target, lod, bufSize, pixels);
        }

        public partial void GetnCompressedTexImage<T0>(GLEnum target, int lod, uint bufSize, Span<T0> pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, Int32, UInt32, Span, void>)Load("glGetnCompressedTexImage", 82))(target, lod, bufSize, pixels);
        }

        public unsafe partial void GetnConvolutionFilter(GLEnum target, GLEnum format, GLEnum type, uint bufSize, void *image)
        {
            ((delegate *cdecl<GLEnum, GLEnum, GLEnum, UInt32,, void>)Load("glGetnConvolutionFilter", 83))(target, format, type, bufSize, image);
        }

        public partial void GetnConvolutionFilter<T0>(GLEnum target, GLEnum format, GLEnum type, uint bufSize, Span<T0> image)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, GLEnum, GLEnum, UInt32, Span, void>)Load("glGetnConvolutionFilter", 84))(target, format, type, bufSize, image);
        }

        public unsafe partial void GetnHistogram(GLEnum target, bool reset, GLEnum format, GLEnum type, uint bufSize, void *values)
        {
            ((delegate *cdecl<GLEnum, Boolean, GLEnum, GLEnum, UInt32,, void>)Load("glGetnHistogram", 85))(target, reset, format, type, bufSize, values);
        }

        public partial void GetnHistogram<T0>(GLEnum target, bool reset, GLEnum format, GLEnum type, uint bufSize, Span<T0> values)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, Boolean, GLEnum, GLEnum, UInt32, Span, void>)Load("glGetnHistogram", 86))(target, reset, format, type, bufSize, values);
        }

        public unsafe partial void GetnMap(GLEnum target, GLEnum query, uint bufSize, double *v)
        {
            ((delegate *cdecl<GLEnum, GLEnum, UInt32,, void>)Load("glGetnMapdv", 87))(target, query, bufSize, v);
        }

        public partial void GetnMap(GLEnum target, GLEnum query, uint bufSize, Span<double> v)
        {
            ((delegate *cdecl<GLEnum, GLEnum, UInt32, Span, void>)Load("glGetnMapdv", 88))(target, query, bufSize, v);
        }

        public unsafe partial void GetnMap(GLEnum target, GLEnum query, uint bufSize, float *v)
        {
            ((delegate *cdecl<GLEnum, GLEnum, UInt32,, void>)Load("glGetnMapfv", 89))(target, query, bufSize, v);
        }

        public partial void GetnMap(GLEnum target, GLEnum query, uint bufSize, Span<float> v)
        {
            ((delegate *cdecl<GLEnum, GLEnum, UInt32, Span, void>)Load("glGetnMapfv", 90))(target, query, bufSize, v);
        }

        public unsafe partial void GetnMap(GLEnum target, GLEnum query, uint bufSize, int *v)
        {
            ((delegate *cdecl<GLEnum, GLEnum, UInt32,, void>)Load("glGetnMapiv", 91))(target, query, bufSize, v);
        }

        public partial void GetnMap(GLEnum target, GLEnum query, uint bufSize, Span<int> v)
        {
            ((delegate *cdecl<GLEnum, GLEnum, UInt32, Span, void>)Load("glGetnMapiv", 92))(target, query, bufSize, v);
        }

        public unsafe partial void GetnMinmax(GLEnum target, bool reset, GLEnum format, GLEnum type, uint bufSize, void *values)
        {
            ((delegate *cdecl<GLEnum, Boolean, GLEnum, GLEnum, UInt32,, void>)Load("glGetnMinmax", 93))(target, reset, format, type, bufSize, values);
        }

        public partial void GetnMinmax<T0>(GLEnum target, bool reset, GLEnum format, GLEnum type, uint bufSize, Span<T0> values)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, Boolean, GLEnum, GLEnum, UInt32, Span, void>)Load("glGetnMinmax", 94))(target, reset, format, type, bufSize, values);
        }

        public unsafe partial void GetnPixelMap(GLEnum map, uint bufSize, float *values)
        {
            ((delegate *cdecl<GLEnum, UInt32,, void>)Load("glGetnPixelMapfv", 95))(map, bufSize, values);
        }

        public partial void GetnPixelMap(GLEnum map, uint bufSize, Span<float> values)
        {
            ((delegate *cdecl<GLEnum, UInt32, Span, void>)Load("glGetnPixelMapfv", 96))(map, bufSize, values);
        }

        public unsafe partial void GetnPixelMap(GLEnum map, uint bufSize, uint *values)
        {
            ((delegate *cdecl<GLEnum, UInt32,, void>)Load("glGetnPixelMapuiv", 97))(map, bufSize, values);
        }

        public partial void GetnPixelMap(GLEnum map, uint bufSize, Span<uint> values)
        {
            ((delegate *cdecl<GLEnum, UInt32, Span, void>)Load("glGetnPixelMapuiv", 98))(map, bufSize, values);
        }

        public unsafe partial void GetnPixelMap(GLEnum map, uint bufSize, ushort *values)
        {
            ((delegate *cdecl<GLEnum, UInt32,, void>)Load("glGetnPixelMapusv", 99))(map, bufSize, values);
        }

        public partial void GetnPixelMap(GLEnum map, uint bufSize, Span<ushort> values)
        {
            ((delegate *cdecl<GLEnum, UInt32, Span, void>)Load("glGetnPixelMapusv", 100))(map, bufSize, values);
        }

        public unsafe partial void GetnPolygonStipple(uint bufSize, byte *pattern)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glGetnPolygonStipple", 101))(bufSize, pattern);
        }

        public partial void GetnPolygonStipple(uint bufSize, Span<byte> pattern)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glGetnPolygonStipple", 102))(bufSize, pattern);
        }

        public unsafe partial void GetnSeparableFilter(GLEnum target, GLEnum format, GLEnum type, uint rowBufSize, void *row, uint columnBufSize, void *column, void *span)
        {
            ((delegate *cdecl<GLEnum, GLEnum, GLEnum, UInt32,, UInt32,,, void>)Load("glGetnSeparableFilter", 103))(target, format, type, rowBufSize, row, columnBufSize, column, span);
        }

        public partial void GetnSeparableFilter<T0, T1, T2>(GLEnum target, GLEnum format, GLEnum type, uint rowBufSize, Span<T0> row, uint columnBufSize, Span<T1> column, Span<T2> span)
            where T0 : unmanaged where T1 : unmanaged where T2 : unmanaged
        {
            ((delegate *cdecl<GLEnum, GLEnum, GLEnum, UInt32, Span, UInt32, Span, Span, void>)Load("glGetnSeparableFilter", 104))(target, format, type, rowBufSize, row, columnBufSize, column, span);
        }

        public unsafe partial void GetnTexImage(GLEnum target, int level, GLEnum format, GLEnum type, uint bufSize, void *pixels)
        {
            ((delegate *cdecl<GLEnum, Int32, GLEnum, GLEnum, UInt32,, void>)Load("glGetnTexImage", 105))(target, level, format, type, bufSize, pixels);
        }

        public partial void GetnTexImage<T0>(GLEnum target, int level, GLEnum format, GLEnum type, uint bufSize, Span<T0> pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, Int32, GLEnum, GLEnum, UInt32, Span, void>)Load("glGetnTexImage", 106))(target, level, format, type, bufSize, pixels);
        }

        public unsafe partial void GetnUniform(uint program, int location, uint bufSize, double *@params)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32,, void>)Load("glGetnUniformdv", 107))(program, location, bufSize, params);
        }

        public partial void GetnUniform(uint program, int location, uint bufSize, Span<double> @params)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Span, void>)Load("glGetnUniformdv", 108))(program, location, bufSize, params);
        }

        public unsafe partial void GetnUniform(uint program, int location, uint bufSize, float *@params)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32,, void>)Load("glGetnUniformfv", 109))(program, location, bufSize, params);
        }

        public partial void GetnUniform(uint program, int location, uint bufSize, Span<float> @params)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Span, void>)Load("glGetnUniformfv", 110))(program, location, bufSize, params);
        }

        public unsafe partial void GetnUniform(uint program, int location, uint bufSize, int *@params)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32,, void>)Load("glGetnUniformiv", 111))(program, location, bufSize, params);
        }

        public partial void GetnUniform(uint program, int location, uint bufSize, Span<int> @params)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Span, void>)Load("glGetnUniformiv", 112))(program, location, bufSize, params);
        }

        public unsafe partial void GetnUniform(uint program, int location, uint bufSize, uint *@params)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32,, void>)Load("glGetnUniformuiv", 113))(program, location, bufSize, params);
        }

        public partial void GetnUniform(uint program, int location, uint bufSize, Span<uint> @params)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Span, void>)Load("glGetnUniformuiv", 114))(program, location, bufSize, params);
        }

        public partial void GetQueryBufferObject(uint id, uint buffer, GLEnum pname, IntPtr offset)
        {
            ((delegate *cdecl<UInt32, UInt32, GLEnum, IntPtr, void>)Load("glGetQueryBufferObjecti64v", 115))(id, buffer, pname, offset);
        }

        public unsafe partial void GetTextureImage(uint texture, int level, GLEnum format, GLEnum type, uint bufSize, void *pixels)
        {
            ((delegate *cdecl<UInt32, Int32, GLEnum, GLEnum, UInt32,, void>)Load("glGetTextureImage", 116))(texture, level, format, type, bufSize, pixels);
        }

        public partial void GetTextureImage<T0>(uint texture, int level, GLEnum format, GLEnum type, uint bufSize, Span<T0> pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, GLEnum, GLEnum, UInt32, Span, void>)Load("glGetTextureImage", 117))(texture, level, format, type, bufSize, pixels);
        }

        public unsafe partial void GetTextureLevelParameter(uint texture, int level, GLEnum pname, float *@params)
        {
            ((delegate *cdecl<UInt32, Int32, GLEnum,, void>)Load("glGetTextureLevelParameterfv", 118))(texture, level, pname, params);
        }

        public partial void GetTextureLevelParameter(uint texture, int level, GLEnum pname, Span<float> @params)
        {
            ((delegate *cdecl<UInt32, Int32, GLEnum, Span, void>)Load("glGetTextureLevelParameterfv", 119))(texture, level, pname, params);
        }

        public unsafe partial void GetTextureLevelParameter(uint texture, int level, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<UInt32, Int32, GLEnum,, void>)Load("glGetTextureLevelParameteriv", 120))(texture, level, pname, params);
        }

        public partial void GetTextureLevelParameter(uint texture, int level, GLEnum pname, Span<int> @params)
        {
            ((delegate *cdecl<UInt32, Int32, GLEnum, Span, void>)Load("glGetTextureLevelParameteriv", 121))(texture, level, pname, params);
        }

        public unsafe partial void GetTextureParameter(uint texture, GLEnum pname, float *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetTextureParameterfv", 122))(texture, pname, params);
        }

        public partial void GetTextureParameter(uint texture, GLEnum pname, Span<float> @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, Span, void>)Load("glGetTextureParameterfv", 123))(texture, pname, params);
        }

        public unsafe partial void GetTextureParameter(uint texture, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetTextureParameteriv", 124))(texture, pname, params);
        }

        public partial void GetTextureParameter(uint texture, GLEnum pname, Span<int> @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, Span, void>)Load("glGetTextureParameteriv", 125))(texture, pname, params);
        }

        public unsafe partial void GetTextureParameterI(uint texture, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetTextureParameterIiv", 126))(texture, pname, params);
        }

        public partial void GetTextureParameterI(uint texture, GLEnum pname, Span<int> @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, Span, void>)Load("glGetTextureParameterIiv", 127))(texture, pname, params);
        }

        public unsafe partial void GetTextureParameterI(uint texture, GLEnum pname, uint *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetTextureParameterIuiv", 128))(texture, pname, params);
        }

        public partial void GetTextureParameterI(uint texture, GLEnum pname, Span<uint> @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, Span, void>)Load("glGetTextureParameterIuiv", 129))(texture, pname, params);
        }

        public unsafe partial void GetTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, GLEnum format, GLEnum type, uint bufSize, void *pixels)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, GLEnum, GLEnum, UInt32,, void>)Load("glGetTextureSubImage", 130))(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
        }

        public partial void GetTextureSubImage<T0>(uint texture, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, GLEnum format, GLEnum type, uint bufSize, Span<T0> pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, GLEnum, GLEnum, UInt32, Span, void>)Load("glGetTextureSubImage", 131))(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
        }

        public unsafe partial void GetTransformFeedback(uint xfb, GLEnum pname, int *param)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetTransformFeedbackiv", 132))(xfb, pname, param);
        }

        public partial void GetTransformFeedback(uint xfb, GLEnum pname, Span<int> param)
        {
            ((delegate *cdecl<UInt32, GLEnum, Span, void>)Load("glGetTransformFeedbackiv", 133))(xfb, pname, param);
        }

        public unsafe partial void GetTransformFeedback(uint xfb, GLEnum pname, uint index, int *param)
        {
            ((delegate *cdecl<UInt32, GLEnum, UInt32,, void>)Load("glGetTransformFeedbacki_v", 134))(xfb, pname, index, param);
        }

        public partial void GetTransformFeedback(uint xfb, GLEnum pname, uint index, Span<int> param)
        {
            ((delegate *cdecl<UInt32, GLEnum, UInt32, Span, void>)Load("glGetTransformFeedbacki_v", 135))(xfb, pname, index, param);
        }

        public unsafe partial void GetTransformFeedbacki64(uint xfb, GLEnum pname, uint index, long *param)
        {
            ((delegate *cdecl<UInt32, GLEnum, UInt32,, void>)Load("glGetTransformFeedbacki64_v", 136))(xfb, pname, index, param);
        }

        public partial void GetTransformFeedbacki64(uint xfb, GLEnum pname, uint index, Span<long> param)
        {
            ((delegate *cdecl<UInt32, GLEnum, UInt32, Span, void>)Load("glGetTransformFeedbacki64_v", 137))(xfb, pname, index, param);
        }

        public unsafe partial void GetVertexArray(uint vaobj, GLEnum pname, int *param)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetVertexArrayiv", 138))(vaobj, pname, param);
        }

        public partial void GetVertexArray(uint vaobj, GLEnum pname, Span<int> param)
        {
            ((delegate *cdecl<UInt32, GLEnum, Span, void>)Load("glGetVertexArrayiv", 139))(vaobj, pname, param);
        }

        public unsafe partial void GetVertexArrayIndexed(uint vaobj, uint index, GLEnum pname, int *param)
        {
            ((delegate *cdecl<UInt32, UInt32, GLEnum,, void>)Load("glGetVertexArrayIndexediv", 140))(vaobj, index, pname, param);
        }

        public partial void GetVertexArrayIndexed(uint vaobj, uint index, GLEnum pname, Span<int> param)
        {
            ((delegate *cdecl<UInt32, UInt32, GLEnum, Span, void>)Load("glGetVertexArrayIndexediv", 141))(vaobj, index, pname, param);
        }

        public unsafe partial void GetVertexArrayIndexed64(uint vaobj, uint index, GLEnum pname, long *param)
        {
            ((delegate *cdecl<UInt32, UInt32, GLEnum,, void>)Load("glGetVertexArrayIndexed64iv", 142))(vaobj, index, pname, param);
        }

        public partial void GetVertexArrayIndexed64(uint vaobj, uint index, GLEnum pname, Span<long> param)
        {
            ((delegate *cdecl<UInt32, UInt32, GLEnum, Span, void>)Load("glGetVertexArrayIndexed64iv", 143))(vaobj, index, pname, param);
        }

        public unsafe partial void InvalidateNamedFramebufferData(uint framebuffer, uint numAttachments, GLEnum*attachments)
        {
            ((delegate *cdecl<UInt32, UInt32,, void>)Load("glInvalidateNamedFramebufferData", 144))(framebuffer, numAttachments, attachments);
        }

        public partial void InvalidateNamedFramebufferData(uint framebuffer, uint numAttachments, Span<GLEnum> attachments)
        {
            ((delegate *cdecl<UInt32, UInt32, Span, void>)Load("glInvalidateNamedFramebufferData", 145))(framebuffer, numAttachments, attachments);
        }

        public unsafe partial void InvalidateNamedFramebufferSubData(uint framebuffer, uint numAttachments, GLEnum*attachments, int x, int y, uint width, uint height)
        {
            ((delegate *cdecl<UInt32, UInt32,, Int32, Int32, UInt32, UInt32, void>)Load("glInvalidateNamedFramebufferSubData", 146))(framebuffer, numAttachments, attachments, x, y, width, height);
        }

        public partial void InvalidateNamedFramebufferSubData(uint framebuffer, uint numAttachments, Span<GLEnum> attachments, int x, int y, uint width, uint height)
        {
            ((delegate *cdecl<UInt32, UInt32, Span, Int32, Int32, UInt32, UInt32, void>)Load("glInvalidateNamedFramebufferSubData", 147))(framebuffer, numAttachments, attachments, x, y, width, height);
        }

        public partial void MemoryBarrierByRegion(uint barriers)
        {
            ((delegate *cdecl<UInt32, void>)Load("glMemoryBarrierByRegion", 150))(barriers);
        }

        public unsafe partial void NamedBufferData(uint buffer, UIntPtr size, void *data, GLEnum usage)
        {
            ((delegate *cdecl<UInt32, UIntPtr,, GLEnum, void>)Load("glNamedBufferData", 151))(buffer, size, data, usage);
        }

        public partial void NamedBufferData<T0>(uint buffer, UIntPtr size, Span<T0> data, GLEnum usage)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, UIntPtr, Span, GLEnum, void>)Load("glNamedBufferData", 152))(buffer, size, data, usage);
        }

        public unsafe partial void NamedBufferStorage(uint buffer, UIntPtr size, void *data, uint flags)
        {
            ((delegate *cdecl<UInt32, UIntPtr,, UInt32, void>)Load("glNamedBufferStorage", 153))(buffer, size, data, flags);
        }

        public partial void NamedBufferStorage<T0>(uint buffer, UIntPtr size, Span<T0> data, uint flags)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, UIntPtr, Span, UInt32, void>)Load("glNamedBufferStorage", 154))(buffer, size, data, flags);
        }

        public unsafe partial void NamedBufferSubData(uint buffer, IntPtr offset, UIntPtr size, void *data)
        {
            ((delegate *cdecl<UInt32, IntPtr, UIntPtr,, void>)Load("glNamedBufferSubData", 155))(buffer, offset, size, data);
        }

        public partial void NamedBufferSubData<T0>(uint buffer, IntPtr offset, UIntPtr size, ref T0 data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, IntPtr, UIntPtr, T0, void>)Load("glNamedBufferSubData", 156))(buffer, offset, size, data);
        }

        public partial void NamedFramebufferDrawBuffer(uint framebuffer, GLEnum buf)
        {
            ((delegate *cdecl<UInt32, GLEnum, void>)Load("glNamedFramebufferDrawBuffer", 157))(framebuffer, buf);
        }

        public unsafe partial void NamedFramebufferDrawBuffers(uint framebuffer, uint n, GLEnum*bufs)
        {
            ((delegate *cdecl<UInt32, UInt32,, void>)Load("glNamedFramebufferDrawBuffers", 158))(framebuffer, n, bufs);
        }

        public partial void NamedFramebufferDrawBuffers(uint framebuffer, uint n, Span<GLEnum> bufs)
        {
            ((delegate *cdecl<UInt32, UInt32, Span, void>)Load("glNamedFramebufferDrawBuffers", 159))(framebuffer, n, bufs);
        }

        public partial void NamedFramebufferParameter(uint framebuffer, GLEnum pname, int param)
        {
            ((delegate *cdecl<UInt32, GLEnum, Int32, void>)Load("glNamedFramebufferParameteri", 160))(framebuffer, pname, param);
        }

        public partial void NamedFramebufferReadBuffer(uint framebuffer, GLEnum src)
        {
            ((delegate *cdecl<UInt32, GLEnum, void>)Load("glNamedFramebufferReadBuffer", 161))(framebuffer, src);
        }

        public partial void NamedFramebufferRenderbuffer(uint framebuffer, GLEnum attachment, GLEnum renderbuffertarget, uint renderbuffer)
        {
            ((delegate *cdecl<UInt32, GLEnum, GLEnum, UInt32, void>)Load("glNamedFramebufferRenderbuffer", 162))(framebuffer, attachment, renderbuffertarget, renderbuffer);
        }

        public partial void NamedFramebufferTexture(uint framebuffer, GLEnum attachment, uint texture, int level)
        {
            ((delegate *cdecl<UInt32, GLEnum, UInt32, Int32, void>)Load("glNamedFramebufferTexture", 163))(framebuffer, attachment, texture, level);
        }

        public partial void NamedFramebufferTextureLayer(uint framebuffer, GLEnum attachment, uint texture, int level, int layer)
        {
            ((delegate *cdecl<UInt32, GLEnum, UInt32, Int32, Int32, void>)Load("glNamedFramebufferTextureLayer", 164))(framebuffer, attachment, texture, level, layer);
        }

        public partial void NamedRenderbufferStorage(uint renderbuffer, GLEnum internalformat, uint width, uint height)
        {
            ((delegate *cdecl<UInt32, GLEnum, UInt32, UInt32, void>)Load("glNamedRenderbufferStorage", 165))(renderbuffer, internalformat, width, height);
        }

        public partial void NamedRenderbufferStorageMultisample(uint renderbuffer, uint samples, GLEnum internalformat, uint width, uint height)
        {
            ((delegate *cdecl<UInt32, UInt32, GLEnum, UInt32, UInt32, void>)Load("glNamedRenderbufferStorageMultisample", 166))(renderbuffer, samples, internalformat, width, height);
        }

        public unsafe partial void ReadnPixels(int x, int y, uint width, uint height, GLEnum format, GLEnum type, uint bufSize, void *data)
        {
            ((delegate *cdecl<Int32, Int32, UInt32, UInt32, GLEnum, GLEnum, UInt32,, void>)Load("glReadnPixels", 167))(x, y, width, height, format, type, bufSize, data);
        }

        public partial void ReadnPixels<T0>(int x, int y, uint width, uint height, GLEnum format, GLEnum type, uint bufSize, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<Int32, Int32, UInt32, UInt32, GLEnum, GLEnum, UInt32, Span, void>)Load("glReadnPixels", 168))(x, y, width, height, format, type, bufSize, data);
        }

        public partial void TextureBarrier()
        {
            ((delegate *cdecl<void>)Load("glTextureBarrier", 169))();
        }

        public partial void TextureBuffer(uint texture, GLEnum internalformat, uint buffer)
        {
            ((delegate *cdecl<UInt32, GLEnum, UInt32, void>)Load("glTextureBuffer", 170))(texture, internalformat, buffer);
        }

        public partial void TextureBufferRange(uint texture, GLEnum internalformat, uint buffer, IntPtr offset, UIntPtr size)
        {
            ((delegate *cdecl<UInt32, GLEnum, UInt32, IntPtr, UIntPtr, void>)Load("glTextureBufferRange", 171))(texture, internalformat, buffer, offset, size);
        }

        public partial void TextureParameter(uint texture, GLEnum pname, float param)
        {
            ((delegate *cdecl<UInt32, GLEnum, Single, void>)Load("glTextureParameterf", 172))(texture, pname, param);
        }

        public unsafe partial void TextureParameter(uint texture, GLEnum pname, float *param)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glTextureParameterfv", 173))(texture, pname, param);
        }

        public partial void TextureParameter(uint texture, GLEnum pname, Span<float> param)
        {
            ((delegate *cdecl<UInt32, GLEnum, Span, void>)Load("glTextureParameterfv", 174))(texture, pname, param);
        }

        public partial void TextureParameter(uint texture, GLEnum pname, int param)
        {
            ((delegate *cdecl<UInt32, GLEnum, Int32, void>)Load("glTextureParameteri", 175))(texture, pname, param);
        }

        public unsafe partial void TextureParameter(uint texture, GLEnum pname, int *param)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glTextureParameteriv", 176))(texture, pname, param);
        }

        public partial void TextureParameter(uint texture, GLEnum pname, Span<int> param)
        {
            ((delegate *cdecl<UInt32, GLEnum, Span, void>)Load("glTextureParameteriv", 177))(texture, pname, param);
        }

        public unsafe partial void TextureParameterI(uint texture, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glTextureParameterIiv", 178))(texture, pname, params);
        }

        public partial void TextureParameterI(uint texture, GLEnum pname, Span<int> @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, Span, void>)Load("glTextureParameterIiv", 179))(texture, pname, params);
        }

        public unsafe partial void TextureParameterI(uint texture, GLEnum pname, uint *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glTextureParameterIuiv", 180))(texture, pname, params);
        }

        public partial void TextureParameterI(uint texture, GLEnum pname, Span<uint> @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, Span, void>)Load("glTextureParameterIuiv", 181))(texture, pname, params);
        }

        public partial void TextureStorage1D(uint texture, uint levels, GLEnum internalformat, uint width)
        {
            ((delegate *cdecl<UInt32, UInt32, GLEnum, UInt32, void>)Load("glTextureStorage1D", 182))(texture, levels, internalformat, width);
        }

        public partial void TextureStorage2D(uint texture, uint levels, GLEnum internalformat, uint width, uint height)
        {
            ((delegate *cdecl<UInt32, UInt32, GLEnum, UInt32, UInt32, void>)Load("glTextureStorage2D", 183))(texture, levels, internalformat, width, height);
        }

        public partial void TextureStorage2DMultisample(uint texture, uint samples, GLEnum internalformat, uint width, uint height, bool fixedsamplelocations)
        {
            ((delegate *cdecl<UInt32, UInt32, GLEnum, UInt32, UInt32, Boolean, void>)Load("glTextureStorage2DMultisample", 184))(texture, samples, internalformat, width, height, fixedsamplelocations);
        }

        public partial void TextureStorage3D(uint texture, uint levels, GLEnum internalformat, uint width, uint height, uint depth)
        {
            ((delegate *cdecl<UInt32, UInt32, GLEnum, UInt32, UInt32, UInt32, void>)Load("glTextureStorage3D", 185))(texture, levels, internalformat, width, height, depth);
        }

        public partial void TextureStorage3DMultisample(uint texture, uint samples, GLEnum internalformat, uint width, uint height, uint depth, bool fixedsamplelocations)
        {
            ((delegate *cdecl<UInt32, UInt32, GLEnum, UInt32, UInt32, UInt32, Boolean, void>)Load("glTextureStorage3DMultisample", 186))(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
        }

        public unsafe partial void TextureSubImage1D(uint texture, int level, int xoffset, uint width, GLEnum format, GLEnum type, void *pixels)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, UInt32, GLEnum, GLEnum,, void>)Load("glTextureSubImage1D", 187))(texture, level, xoffset, width, format, type, pixels);
        }

        public partial void TextureSubImage1D<T0>(uint texture, int level, int xoffset, uint width, GLEnum format, GLEnum type, Span<T0> pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, Int32, UInt32, GLEnum, GLEnum, Span, void>)Load("glTextureSubImage1D", 188))(texture, level, xoffset, width, format, type, pixels);
        }

        public unsafe partial void TextureSubImage2D(uint texture, int level, int xoffset, int yoffset, uint width, uint height, GLEnum format, GLEnum type, void *pixels)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, UInt32, UInt32, GLEnum, GLEnum,, void>)Load("glTextureSubImage2D", 189))(texture, level, xoffset, yoffset, width, height, format, type, pixels);
        }

        public partial void TextureSubImage2D<T0>(uint texture, int level, int xoffset, int yoffset, uint width, uint height, GLEnum format, GLEnum type, Span<T0> pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, UInt32, UInt32, GLEnum, GLEnum, Span, void>)Load("glTextureSubImage2D", 190))(texture, level, xoffset, yoffset, width, height, format, type, pixels);
        }

        public unsafe partial void TextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, GLEnum format, GLEnum type, void *pixels)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, GLEnum, GLEnum,, void>)Load("glTextureSubImage3D", 191))(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }

        public partial void TextureSubImage3D<T0>(uint texture, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, GLEnum format, GLEnum type, Span<T0> pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, GLEnum, GLEnum, Span, void>)Load("glTextureSubImage3D", 192))(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }

        public partial void TransformFeedbackBufferBase(uint xfb, uint index, uint buffer)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, void>)Load("glTransformFeedbackBufferBase", 193))(xfb, index, buffer);
        }

        public partial void TransformFeedbackBufferRange(uint xfb, uint index, uint buffer, IntPtr offset, UIntPtr size)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, IntPtr, UIntPtr, void>)Load("glTransformFeedbackBufferRange", 194))(xfb, index, buffer, offset, size);
        }

        public partial bool UnmapNamedBuffer(uint buffer)
        {
            return ((delegate *cdecl<UInt32, byte>)Load("glUnmapNamedBuffer", 195))(buffer) == 1;
        }

        public partial void VertexArrayAttribBinding(uint vaobj, uint attribindex, uint bindingindex)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, void>)Load("glVertexArrayAttribBinding", 196))(vaobj, attribindex, bindingindex);
        }

        public partial void VertexArrayAttribFormat(uint vaobj, uint attribindex, int size, GLEnum type, bool normalized, uint relativeoffset)
        {
            ((delegate *cdecl<UInt32, UInt32, Int32, GLEnum, Boolean, UInt32, void>)Load("glVertexArrayAttribFormat", 197))(vaobj, attribindex, size, type, normalized, relativeoffset);
        }

        public partial void VertexArrayAttribIFormat(uint vaobj, uint attribindex, int size, GLEnum type, uint relativeoffset)
        {
            ((delegate *cdecl<UInt32, UInt32, Int32, GLEnum, UInt32, void>)Load("glVertexArrayAttribIFormat", 198))(vaobj, attribindex, size, type, relativeoffset);
        }

        public partial void VertexArrayAttribLFormat(uint vaobj, uint attribindex, int size, GLEnum type, uint relativeoffset)
        {
            ((delegate *cdecl<UInt32, UInt32, Int32, GLEnum, UInt32, void>)Load("glVertexArrayAttribLFormat", 199))(vaobj, attribindex, size, type, relativeoffset);
        }

        public partial void VertexArrayBindingDivisor(uint vaobj, uint bindingindex, uint divisor)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, void>)Load("glVertexArrayBindingDivisor", 200))(vaobj, bindingindex, divisor);
        }

        public partial void VertexArrayElementBuffer(uint vaobj, uint buffer)
        {
            ((delegate *cdecl<UInt32, UInt32, void>)Load("glVertexArrayElementBuffer", 201))(vaobj, buffer);
        }

        public partial void VertexArrayVertexBuffer(uint vaobj, uint bindingindex, uint buffer, IntPtr offset, uint stride)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, IntPtr, UInt32, void>)Load("glVertexArrayVertexBuffer", 202))(vaobj, bindingindex, buffer, offset, stride);
        }

        public unsafe partial void VertexArrayVertexBuffers(uint vaobj, uint first, uint count, uint *buffers, IntPtr*offsets, uint *strides)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32,,,, void>)Load("glVertexArrayVertexBuffers", 203))(vaobj, first, count, buffers, offsets, strides);
        }

        public partial void VertexArrayVertexBuffers(uint vaobj, uint first, uint count, Span<uint> buffers, Span<IntPtr> offsets, Span<uint> strides)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, Span, Span, Span, void>)Load("glVertexArrayVertexBuffers", 204))(vaobj, first, count, buffers, offsets, strides);
        }

        public partial void BlitNamedFramebuffer(uint readFramebuffer, uint drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, BlitFramebufferFilter filter)
        {
            ((delegate *cdecl<UInt32, UInt32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, UInt32, BlitFramebufferFilter, void>)Load("glBlitNamedFramebuffer", 205))(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }

        public unsafe partial void ClearNamedBufferData(uint buffer, InternalFormat internalformat, PixelFormat format, PixelType type, void *data)
        {
            ((delegate *cdecl<UInt32, InternalFormat, PixelFormat, PixelType,, void>)Load("glClearNamedBufferData", 207))(buffer, internalformat, format, type, data);
        }

        public partial void ClearNamedBufferData<T0>(uint buffer, InternalFormat internalformat, PixelFormat format, PixelType type, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, InternalFormat, PixelFormat, PixelType, Span, void>)Load("glClearNamedBufferData", 208))(buffer, internalformat, format, type, data);
        }

        public unsafe partial void ClearNamedBufferSubData(uint buffer, InternalFormat internalformat, IntPtr offset, UIntPtr size, PixelFormat format, PixelType type, void *data)
        {
            ((delegate *cdecl<UInt32, InternalFormat, IntPtr, UIntPtr, PixelFormat, PixelType,, void>)Load("glClearNamedBufferSubData", 209))(buffer, internalformat, offset, size, format, type, data);
        }

        public partial void ClearNamedBufferSubData<T0>(uint buffer, InternalFormat internalformat, IntPtr offset, UIntPtr size, PixelFormat format, PixelType type, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, InternalFormat, IntPtr, UIntPtr, PixelFormat, PixelType, Span, void>)Load("glClearNamedBufferSubData", 210))(buffer, internalformat, offset, size, format, type, data);
        }

        public unsafe partial void ClearNamedFramebuffer(uint framebuffer, Buffer buffer, int drawbuffer, int *value)
        {
            ((delegate *cdecl<UInt32, Buffer, Int32,, void>)Load("glClearNamedFramebufferiv", 211))(framebuffer, buffer, drawbuffer, value);
        }

        public partial void ClearNamedFramebuffer(uint framebuffer, Buffer buffer, int drawbuffer, Span<int> value)
        {
            ((delegate *cdecl<UInt32, Buffer, Int32, Span, void>)Load("glClearNamedFramebufferiv", 212))(framebuffer, buffer, drawbuffer, value);
        }

        public unsafe partial void ClearNamedFramebuffer(uint framebuffer, Buffer buffer, int drawbuffer, uint *value)
        {
            ((delegate *cdecl<UInt32, Buffer, Int32,, void>)Load("glClearNamedFramebufferuiv", 213))(framebuffer, buffer, drawbuffer, value);
        }

        public partial void ClearNamedFramebuffer(uint framebuffer, Buffer buffer, int drawbuffer, Span<uint> value)
        {
            ((delegate *cdecl<UInt32, Buffer, Int32, Span, void>)Load("glClearNamedFramebufferuiv", 214))(framebuffer, buffer, drawbuffer, value);
        }

        public unsafe partial void ClearNamedFramebuffer(uint framebuffer, Buffer buffer, int drawbuffer, float *value)
        {
            ((delegate *cdecl<UInt32, Buffer, Int32,, void>)Load("glClearNamedFramebufferfv", 215))(framebuffer, buffer, drawbuffer, value);
        }

        public partial void ClearNamedFramebuffer(uint framebuffer, Buffer buffer, int drawbuffer, Span<float> value)
        {
            ((delegate *cdecl<UInt32, Buffer, Int32, Span, void>)Load("glClearNamedFramebufferfv", 216))(framebuffer, buffer, drawbuffer, value);
        }

        public partial void ClearNamedFramebuffer(uint framebuffer, Buffer buffer, int drawbuffer, float depth, int stencil)
        {
            ((delegate *cdecl<UInt32, Buffer, Int32, Single, Int32, void>)Load("glClearNamedFramebufferfi", 217))(framebuffer, buffer, drawbuffer, depth, stencil);
        }

        public partial void ClipControl(ClipControlOrigin origin, ClipControlDepth depth)
        {
            ((delegate *cdecl<ClipControlOrigin, ClipControlDepth, void>)Load("glClipControl", 218))(origin, depth);
        }

        public unsafe partial void CompressedTextureSubImage1D(uint texture, int level, int xoffset, uint width, PixelFormat format, uint imageSize, void *data)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, UInt32, PixelFormat, UInt32,, void>)Load("glCompressedTextureSubImage1D", 219))(texture, level, xoffset, width, format, imageSize, data);
        }

        public partial void CompressedTextureSubImage1D<T0>(uint texture, int level, int xoffset, uint width, PixelFormat format, uint imageSize, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, Int32, UInt32, PixelFormat, UInt32, Span, void>)Load("glCompressedTextureSubImage1D", 220))(texture, level, xoffset, width, format, imageSize, data);
        }

        public unsafe partial void CompressedTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, uint width, uint height, PixelFormat format, uint imageSize, void *data)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, UInt32, UInt32, PixelFormat, UInt32,, void>)Load("glCompressedTextureSubImage2D", 221))(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
        }

        public partial void CompressedTextureSubImage2D<T0>(uint texture, int level, int xoffset, int yoffset, uint width, uint height, PixelFormat format, uint imageSize, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, UInt32, UInt32, PixelFormat, UInt32, Span, void>)Load("glCompressedTextureSubImage2D", 222))(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
        }

        public unsafe partial void CompressedTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, PixelFormat format, uint imageSize, void *data)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, PixelFormat, UInt32,, void>)Load("glCompressedTextureSubImage3D", 223))(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }

        public partial void CompressedTextureSubImage3D<T0>(uint texture, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, PixelFormat format, uint imageSize, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, PixelFormat, UInt32, Span, void>)Load("glCompressedTextureSubImage3D", 224))(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }

        public unsafe partial void CreateQueries(QueryTarget target, uint n, uint *ids)
        {
            ((delegate *cdecl<QueryTarget, UInt32,, void>)Load("glCreateQueries", 225))(target, n, ids);
        }

        public partial void CreateQueries(QueryTarget target, uint n, Span<uint> ids)
        {
            ((delegate *cdecl<QueryTarget, UInt32, Span, void>)Load("glCreateQueries", 226))(target, n, ids);
        }

        public unsafe partial void CreateTextures(TextureTarget target, uint n, uint *textures)
        {
            ((delegate *cdecl<TextureTarget, UInt32,, void>)Load("glCreateTextures", 227))(target, n, textures);
        }

        public partial void CreateTextures(TextureTarget target, uint n, Span<uint> textures)
        {
            ((delegate *cdecl<TextureTarget, UInt32, Span, void>)Load("glCreateTextures", 228))(target, n, textures);
        }

        public unsafe partial void GetNamedBufferParameter(uint buffer, BufferPNameARB pname, int *@params)
        {
            ((delegate *cdecl<UInt32, BufferPNameARB,, void>)Load("glGetNamedBufferParameteriv", 229))(buffer, pname, params);
        }

        public partial void GetNamedBufferParameter(uint buffer, BufferPNameARB pname, Span<int> @params)
        {
            ((delegate *cdecl<UInt32, BufferPNameARB, Span, void>)Load("glGetNamedBufferParameteriv", 230))(buffer, pname, params);
        }

        public unsafe partial void GetNamedBufferParameter(uint buffer, BufferPNameARB pname, long *@params)
        {
            ((delegate *cdecl<UInt32, BufferPNameARB,, void>)Load("glGetNamedBufferParameteri64v", 231))(buffer, pname, params);
        }

        public partial void GetNamedBufferParameter(uint buffer, BufferPNameARB pname, Span<long> @params)
        {
            ((delegate *cdecl<UInt32, BufferPNameARB, Span, void>)Load("glGetNamedBufferParameteri64v", 232))(buffer, pname, params);
        }

        public unsafe partial void GetNamedBufferPointer(uint buffer, BufferPointerNameARB pname, void **@params)
        {
            ((delegate *cdecl<UInt32, BufferPointerNameARB,, void>)Load("glGetNamedBufferPointerv", 233))(buffer, pname, params);
        }

        public unsafe partial void GetNamedFramebufferAttachmentParameter(uint framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int *@params)
        {
            ((delegate *cdecl<UInt32, FramebufferAttachment, FramebufferAttachmentParameterName,, void>)Load("glGetNamedFramebufferAttachmentParameteriv", 234))(framebuffer, attachment, pname, params);
        }

        public partial void GetNamedFramebufferAttachmentParameter(uint framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Span<int> @params)
        {
            ((delegate *cdecl<UInt32, FramebufferAttachment, FramebufferAttachmentParameterName, Span, void>)Load("glGetNamedFramebufferAttachmentParameteriv", 235))(framebuffer, attachment, pname, params);
        }

        public unsafe partial void GetNamedFramebufferParameter(uint framebuffer, GetFramebufferParameter pname, int *param)
        {
            ((delegate *cdecl<UInt32, GetFramebufferParameter,, void>)Load("glGetNamedFramebufferParameteriv", 236))(framebuffer, pname, param);
        }

        public partial void GetNamedFramebufferParameter(uint framebuffer, GetFramebufferParameter pname, Span<int> param)
        {
            ((delegate *cdecl<UInt32, GetFramebufferParameter, Span, void>)Load("glGetNamedFramebufferParameteriv", 237))(framebuffer, pname, param);
        }

        public unsafe partial void GetNamedRenderbufferParameter(uint renderbuffer, RenderbufferParameterName pname, int *@params)
        {
            ((delegate *cdecl<UInt32, RenderbufferParameterName,, void>)Load("glGetNamedRenderbufferParameteriv", 238))(renderbuffer, pname, params);
        }

        public partial void GetNamedRenderbufferParameter(uint renderbuffer, RenderbufferParameterName pname, Span<int> @params)
        {
            ((delegate *cdecl<UInt32, RenderbufferParameterName, Span, void>)Load("glGetNamedRenderbufferParameteriv", 239))(renderbuffer, pname, params);
        }

        public unsafe partial void GetnColorTable(ColorTableTarget target, PixelFormat format, PixelType type, uint bufSize, void *table)
        {
            ((delegate *cdecl<ColorTableTarget, PixelFormat, PixelType, UInt32,, void>)Load("glGetnColorTable", 240))(target, format, type, bufSize, table);
        }

        public partial void GetnColorTable<T0>(ColorTableTarget target, PixelFormat format, PixelType type, uint bufSize, Span<T0> table)
            where T0 : unmanaged
        {
            ((delegate *cdecl<ColorTableTarget, PixelFormat, PixelType, UInt32, Span, void>)Load("glGetnColorTable", 241))(target, format, type, bufSize, table);
        }

        public unsafe partial void GetnCompressedTexImage(TextureTarget target, int lod, uint bufSize, void *pixels)
        {
            ((delegate *cdecl<TextureTarget, Int32, UInt32,, void>)Load("glGetnCompressedTexImage", 242))(target, lod, bufSize, pixels);
        }

        public partial void GetnCompressedTexImage<T0>(TextureTarget target, int lod, uint bufSize, Span<T0> pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<TextureTarget, Int32, UInt32, Span, void>)Load("glGetnCompressedTexImage", 243))(target, lod, bufSize, pixels);
        }

        public unsafe partial void GetnConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, uint bufSize, void *image)
        {
            ((delegate *cdecl<ConvolutionTarget, PixelFormat, PixelType, UInt32,, void>)Load("glGetnConvolutionFilter", 244))(target, format, type, bufSize, image);
        }

        public partial void GetnConvolutionFilter<T0>(ConvolutionTarget target, PixelFormat format, PixelType type, uint bufSize, Span<T0> image)
            where T0 : unmanaged
        {
            ((delegate *cdecl<ConvolutionTarget, PixelFormat, PixelType, UInt32, Span, void>)Load("glGetnConvolutionFilter", 245))(target, format, type, bufSize, image);
        }

        public unsafe partial void GetnHistogram(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, uint bufSize, void *values)
        {
            ((delegate *cdecl<HistogramTargetEXT, Boolean, PixelFormat, PixelType, UInt32,, void>)Load("glGetnHistogram", 246))(target, reset, format, type, bufSize, values);
        }

        public partial void GetnHistogram<T0>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, uint bufSize, Span<T0> values)
            where T0 : unmanaged
        {
            ((delegate *cdecl<HistogramTargetEXT, Boolean, PixelFormat, PixelType, UInt32, Span, void>)Load("glGetnHistogram", 247))(target, reset, format, type, bufSize, values);
        }

        public unsafe partial void GetnMap(MapTarget target, MapQuery query, uint bufSize, double *v)
        {
            ((delegate *cdecl<MapTarget, MapQuery, UInt32,, void>)Load("glGetnMapdv", 248))(target, query, bufSize, v);
        }

        public partial void GetnMap(MapTarget target, MapQuery query, uint bufSize, Span<double> v)
        {
            ((delegate *cdecl<MapTarget, MapQuery, UInt32, Span, void>)Load("glGetnMapdv", 249))(target, query, bufSize, v);
        }

        public unsafe partial void GetnMap(MapTarget target, MapQuery query, uint bufSize, float *v)
        {
            ((delegate *cdecl<MapTarget, MapQuery, UInt32,, void>)Load("glGetnMapfv", 250))(target, query, bufSize, v);
        }

        public partial void GetnMap(MapTarget target, MapQuery query, uint bufSize, Span<float> v)
        {
            ((delegate *cdecl<MapTarget, MapQuery, UInt32, Span, void>)Load("glGetnMapfv", 251))(target, query, bufSize, v);
        }

        public unsafe partial void GetnMap(MapTarget target, MapQuery query, uint bufSize, int *v)
        {
            ((delegate *cdecl<MapTarget, MapQuery, UInt32,, void>)Load("glGetnMapiv", 252))(target, query, bufSize, v);
        }

        public partial void GetnMap(MapTarget target, MapQuery query, uint bufSize, Span<int> v)
        {
            ((delegate *cdecl<MapTarget, MapQuery, UInt32, Span, void>)Load("glGetnMapiv", 253))(target, query, bufSize, v);
        }

        public unsafe partial void GetnMinmax(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, uint bufSize, void *values)
        {
            ((delegate *cdecl<MinmaxTargetEXT, Boolean, PixelFormat, PixelType, UInt32,, void>)Load("glGetnMinmax", 254))(target, reset, format, type, bufSize, values);
        }

        public partial void GetnMinmax<T0>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, uint bufSize, Span<T0> values)
            where T0 : unmanaged
        {
            ((delegate *cdecl<MinmaxTargetEXT, Boolean, PixelFormat, PixelType, UInt32, Span, void>)Load("glGetnMinmax", 255))(target, reset, format, type, bufSize, values);
        }

        public unsafe partial void GetnPixelMap(PixelMap map, uint bufSize, float *values)
        {
            ((delegate *cdecl<PixelMap, UInt32,, void>)Load("glGetnPixelMapfv", 256))(map, bufSize, values);
        }

        public partial void GetnPixelMap(PixelMap map, uint bufSize, Span<float> values)
        {
            ((delegate *cdecl<PixelMap, UInt32, Span, void>)Load("glGetnPixelMapfv", 257))(map, bufSize, values);
        }

        public unsafe partial void GetnPixelMap(PixelMap map, uint bufSize, uint *values)
        {
            ((delegate *cdecl<PixelMap, UInt32,, void>)Load("glGetnPixelMapuiv", 258))(map, bufSize, values);
        }

        public partial void GetnPixelMap(PixelMap map, uint bufSize, Span<uint> values)
        {
            ((delegate *cdecl<PixelMap, UInt32, Span, void>)Load("glGetnPixelMapuiv", 259))(map, bufSize, values);
        }

        public unsafe partial void GetnPixelMap(PixelMap map, uint bufSize, ushort *values)
        {
            ((delegate *cdecl<PixelMap, UInt32,, void>)Load("glGetnPixelMapusv", 260))(map, bufSize, values);
        }

        public partial void GetnPixelMap(PixelMap map, uint bufSize, Span<ushort> values)
        {
            ((delegate *cdecl<PixelMap, UInt32, Span, void>)Load("glGetnPixelMapusv", 261))(map, bufSize, values);
        }

        public partial void GetnPolygonStipple(uint bufSize, string pattern)
        {
            ((delegate *cdecl<UInt32, String, void>)Load("glGetnPolygonStipple", 262))(bufSize, pattern);
        }

        public unsafe partial void GetnSeparableFilter(SeparableTargetEXT target, PixelFormat format, PixelType type, uint rowBufSize, void *row, uint columnBufSize, void *column, void *span)
        {
            ((delegate *cdecl<SeparableTargetEXT, PixelFormat, PixelType, UInt32,, UInt32,,, void>)Load("glGetnSeparableFilter", 263))(target, format, type, rowBufSize, row, columnBufSize, column, span);
        }

        public partial void GetnSeparableFilter<T0, T1, T2>(SeparableTargetEXT target, PixelFormat format, PixelType type, uint rowBufSize, Span<T0> row, uint columnBufSize, Span<T1> column, Span<T2> span)
            where T0 : unmanaged where T1 : unmanaged where T2 : unmanaged
        {
            ((delegate *cdecl<SeparableTargetEXT, PixelFormat, PixelType, UInt32, Span, UInt32, Span, Span, void>)Load("glGetnSeparableFilter", 264))(target, format, type, rowBufSize, row, columnBufSize, column, span);
        }

        public unsafe partial void GetnTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, uint bufSize, void *pixels)
        {
            ((delegate *cdecl<TextureTarget, Int32, PixelFormat, PixelType, UInt32,, void>)Load("glGetnTexImage", 265))(target, level, format, type, bufSize, pixels);
        }

        public partial void GetnTexImage<T0>(TextureTarget target, int level, PixelFormat format, PixelType type, uint bufSize, Span<T0> pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<TextureTarget, Int32, PixelFormat, PixelType, UInt32, Span, void>)Load("glGetnTexImage", 266))(target, level, format, type, bufSize, pixels);
        }

        public partial void GetQueryBufferObject(uint id, uint buffer, QueryObjectParameterName pname, IntPtr offset)
        {
            ((delegate *cdecl<UInt32, UInt32, QueryObjectParameterName, IntPtr, void>)Load("glGetQueryBufferObjecti64v", 267))(id, buffer, pname, offset);
        }

        public unsafe partial void GetTextureImage(uint texture, int level, PixelFormat format, PixelType type, uint bufSize, void *pixels)
        {
            ((delegate *cdecl<UInt32, Int32, PixelFormat, PixelType, UInt32,, void>)Load("glGetTextureImage", 268))(texture, level, format, type, bufSize, pixels);
        }

        public partial void GetTextureImage<T0>(uint texture, int level, PixelFormat format, PixelType type, uint bufSize, Span<T0> pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, PixelFormat, PixelType, UInt32, Span, void>)Load("glGetTextureImage", 269))(texture, level, format, type, bufSize, pixels);
        }

        public unsafe partial void GetTextureLevelParameter(uint texture, int level, GetTextureParameter pname, float *@params)
        {
            ((delegate *cdecl<UInt32, Int32, GetTextureParameter,, void>)Load("glGetTextureLevelParameterfv", 270))(texture, level, pname, params);
        }

        public partial void GetTextureLevelParameter(uint texture, int level, GetTextureParameter pname, Span<float> @params)
        {
            ((delegate *cdecl<UInt32, Int32, GetTextureParameter, Span, void>)Load("glGetTextureLevelParameterfv", 271))(texture, level, pname, params);
        }

        public unsafe partial void GetTextureLevelParameter(uint texture, int level, GetTextureParameter pname, int *@params)
        {
            ((delegate *cdecl<UInt32, Int32, GetTextureParameter,, void>)Load("glGetTextureLevelParameteriv", 272))(texture, level, pname, params);
        }

        public partial void GetTextureLevelParameter(uint texture, int level, GetTextureParameter pname, Span<int> @params)
        {
            ((delegate *cdecl<UInt32, Int32, GetTextureParameter, Span, void>)Load("glGetTextureLevelParameteriv", 273))(texture, level, pname, params);
        }

        public unsafe partial void GetTextureParameter(uint texture, GetTextureParameter pname, float *@params)
        {
            ((delegate *cdecl<UInt32, GetTextureParameter,, void>)Load("glGetTextureParameterfv", 274))(texture, pname, params);
        }

        public partial void GetTextureParameter(uint texture, GetTextureParameter pname, Span<float> @params)
        {
            ((delegate *cdecl<UInt32, GetTextureParameter, Span, void>)Load("glGetTextureParameterfv", 275))(texture, pname, params);
        }

        public unsafe partial void GetTextureParameter(uint texture, GetTextureParameter pname, int *@params)
        {
            ((delegate *cdecl<UInt32, GetTextureParameter,, void>)Load("glGetTextureParameteriv", 276))(texture, pname, params);
        }

        public partial void GetTextureParameter(uint texture, GetTextureParameter pname, Span<int> @params)
        {
            ((delegate *cdecl<UInt32, GetTextureParameter, Span, void>)Load("glGetTextureParameteriv", 277))(texture, pname, params);
        }

        public unsafe partial void GetTextureParameterI(uint texture, GetTextureParameter pname, int *@params)
        {
            ((delegate *cdecl<UInt32, GetTextureParameter,, void>)Load("glGetTextureParameterIiv", 278))(texture, pname, params);
        }

        public partial void GetTextureParameterI(uint texture, GetTextureParameter pname, Span<int> @params)
        {
            ((delegate *cdecl<UInt32, GetTextureParameter, Span, void>)Load("glGetTextureParameterIiv", 279))(texture, pname, params);
        }

        public unsafe partial void GetTextureParameterI(uint texture, GetTextureParameter pname, uint *@params)
        {
            ((delegate *cdecl<UInt32, GetTextureParameter,, void>)Load("glGetTextureParameterIuiv", 280))(texture, pname, params);
        }

        public partial void GetTextureParameterI(uint texture, GetTextureParameter pname, Span<uint> @params)
        {
            ((delegate *cdecl<UInt32, GetTextureParameter, Span, void>)Load("glGetTextureParameterIuiv", 281))(texture, pname, params);
        }

        public unsafe partial void GetTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, PixelFormat format, PixelType type, uint bufSize, void *pixels)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, PixelFormat, PixelType, UInt32,, void>)Load("glGetTextureSubImage", 282))(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
        }

        public partial void GetTextureSubImage<T0>(uint texture, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, PixelFormat format, PixelType type, uint bufSize, Span<T0> pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, PixelFormat, PixelType, UInt32, Span, void>)Load("glGetTextureSubImage", 283))(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
        }

        public unsafe partial void GetTransformFeedback(uint xfb, TransformFeedbackPName pname, int *param)
        {
            ((delegate *cdecl<UInt32, TransformFeedbackPName,, void>)Load("glGetTransformFeedbackiv", 284))(xfb, pname, param);
        }

        public partial void GetTransformFeedback(uint xfb, TransformFeedbackPName pname, Span<int> param)
        {
            ((delegate *cdecl<UInt32, TransformFeedbackPName, Span, void>)Load("glGetTransformFeedbackiv", 285))(xfb, pname, param);
        }

        public unsafe partial void GetTransformFeedback(uint xfb, TransformFeedbackPName pname, uint index, int *param)
        {
            ((delegate *cdecl<UInt32, TransformFeedbackPName, UInt32,, void>)Load("glGetTransformFeedbacki_v", 286))(xfb, pname, index, param);
        }

        public partial void GetTransformFeedback(uint xfb, TransformFeedbackPName pname, uint index, Span<int> param)
        {
            ((delegate *cdecl<UInt32, TransformFeedbackPName, UInt32, Span, void>)Load("glGetTransformFeedbacki_v", 287))(xfb, pname, index, param);
        }

        public unsafe partial void GetTransformFeedbacki64(uint xfb, TransformFeedbackPName pname, uint index, long *param)
        {
            ((delegate *cdecl<UInt32, TransformFeedbackPName, UInt32,, void>)Load("glGetTransformFeedbacki64_v", 288))(xfb, pname, index, param);
        }

        public partial void GetTransformFeedbacki64(uint xfb, TransformFeedbackPName pname, uint index, Span<long> param)
        {
            ((delegate *cdecl<UInt32, TransformFeedbackPName, UInt32, Span, void>)Load("glGetTransformFeedbacki64_v", 289))(xfb, pname, index, param);
        }

        public unsafe partial void GetVertexArray(uint vaobj, VertexArrayPName pname, int *param)
        {
            ((delegate *cdecl<UInt32, VertexArrayPName,, void>)Load("glGetVertexArrayiv", 290))(vaobj, pname, param);
        }

        public partial void GetVertexArray(uint vaobj, VertexArrayPName pname, Span<int> param)
        {
            ((delegate *cdecl<UInt32, VertexArrayPName, Span, void>)Load("glGetVertexArrayiv", 291))(vaobj, pname, param);
        }

        public unsafe partial void GetVertexArrayIndexed(uint vaobj, uint index, VertexArrayPName pname, int *param)
        {
            ((delegate *cdecl<UInt32, UInt32, VertexArrayPName,, void>)Load("glGetVertexArrayIndexediv", 292))(vaobj, index, pname, param);
        }

        public partial void GetVertexArrayIndexed(uint vaobj, uint index, VertexArrayPName pname, Span<int> param)
        {
            ((delegate *cdecl<UInt32, UInt32, VertexArrayPName, Span, void>)Load("glGetVertexArrayIndexediv", 293))(vaobj, index, pname, param);
        }

        public unsafe partial void GetVertexArrayIndexed64(uint vaobj, uint index, VertexArrayPName pname, long *param)
        {
            ((delegate *cdecl<UInt32, UInt32, VertexArrayPName,, void>)Load("glGetVertexArrayIndexed64iv", 294))(vaobj, index, pname, param);
        }

        public partial void GetVertexArrayIndexed64(uint vaobj, uint index, VertexArrayPName pname, Span<long> param)
        {
            ((delegate *cdecl<UInt32, UInt32, VertexArrayPName, Span, void>)Load("glGetVertexArrayIndexed64iv", 295))(vaobj, index, pname, param);
        }

        public unsafe partial void InvalidateNamedFramebufferData(uint framebuffer, uint numAttachments, FramebufferAttachment*attachments)
        {
            ((delegate *cdecl<UInt32, UInt32,, void>)Load("glInvalidateNamedFramebufferData", 296))(framebuffer, numAttachments, attachments);
        }

        public partial void InvalidateNamedFramebufferData(uint framebuffer, uint numAttachments, Span<FramebufferAttachment> attachments)
        {
            ((delegate *cdecl<UInt32, UInt32, Span, void>)Load("glInvalidateNamedFramebufferData", 297))(framebuffer, numAttachments, attachments);
        }

        public unsafe partial void InvalidateNamedFramebufferSubData(uint framebuffer, uint numAttachments, FramebufferAttachment*attachments, int x, int y, uint width, uint height)
        {
            ((delegate *cdecl<UInt32, UInt32,, Int32, Int32, UInt32, UInt32, void>)Load("glInvalidateNamedFramebufferSubData", 298))(framebuffer, numAttachments, attachments, x, y, width, height);
        }

        public partial void InvalidateNamedFramebufferSubData(uint framebuffer, uint numAttachments, Span<FramebufferAttachment> attachments, int x, int y, uint width, uint height)
        {
            ((delegate *cdecl<UInt32, UInt32, Span, Int32, Int32, UInt32, UInt32, void>)Load("glInvalidateNamedFramebufferSubData", 299))(framebuffer, numAttachments, attachments, x, y, width, height);
        }

        public unsafe partial void NamedBufferData(uint buffer, UIntPtr size, void *data, VertexBufferObjectUsage usage)
        {
            ((delegate *cdecl<UInt32, UIntPtr,, VertexBufferObjectUsage, void>)Load("glNamedBufferData", 301))(buffer, size, data, usage);
        }

        public partial void NamedBufferData<T0>(uint buffer, UIntPtr size, Span<T0> data, VertexBufferObjectUsage usage)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, UIntPtr, Span, VertexBufferObjectUsage, void>)Load("glNamedBufferData", 302))(buffer, size, data, usage);
        }

        public partial void NamedFramebufferDrawBuffer(uint framebuffer, ColorBuffer buf)
        {
            ((delegate *cdecl<UInt32, ColorBuffer, void>)Load("glNamedFramebufferDrawBuffer", 303))(framebuffer, buf);
        }

        public unsafe partial void NamedFramebufferDrawBuffers(uint framebuffer, uint n, ColorBuffer*bufs)
        {
            ((delegate *cdecl<UInt32, UInt32,, void>)Load("glNamedFramebufferDrawBuffers", 304))(framebuffer, n, bufs);
        }

        public partial void NamedFramebufferDrawBuffers(uint framebuffer, uint n, Span<ColorBuffer> bufs)
        {
            ((delegate *cdecl<UInt32, UInt32, Span, void>)Load("glNamedFramebufferDrawBuffers", 305))(framebuffer, n, bufs);
        }

        public partial void NamedFramebufferParameter(uint framebuffer, FramebufferParameterName pname, int param)
        {
            ((delegate *cdecl<UInt32, FramebufferParameterName, Int32, void>)Load("glNamedFramebufferParameteri", 306))(framebuffer, pname, param);
        }

        public partial void NamedFramebufferReadBuffer(uint framebuffer, ColorBuffer src)
        {
            ((delegate *cdecl<UInt32, ColorBuffer, void>)Load("glNamedFramebufferReadBuffer", 307))(framebuffer, src);
        }

        public partial void NamedFramebufferRenderbuffer(uint framebuffer, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer)
        {
            ((delegate *cdecl<UInt32, FramebufferAttachment, RenderbufferTarget, UInt32, void>)Load("glNamedFramebufferRenderbuffer", 308))(framebuffer, attachment, renderbuffertarget, renderbuffer);
        }

        public partial void NamedFramebufferTexture(uint framebuffer, FramebufferAttachment attachment, uint texture, int level)
        {
            ((delegate *cdecl<UInt32, FramebufferAttachment, UInt32, Int32, void>)Load("glNamedFramebufferTexture", 309))(framebuffer, attachment, texture, level);
        }

        public partial void NamedFramebufferTextureLayer(uint framebuffer, FramebufferAttachment attachment, uint texture, int level, int layer)
        {
            ((delegate *cdecl<UInt32, FramebufferAttachment, UInt32, Int32, Int32, void>)Load("glNamedFramebufferTextureLayer", 310))(framebuffer, attachment, texture, level, layer);
        }

        public partial void NamedRenderbufferStorage(uint renderbuffer, InternalFormat internalformat, uint width, uint height)
        {
            ((delegate *cdecl<UInt32, InternalFormat, UInt32, UInt32, void>)Load("glNamedRenderbufferStorage", 311))(renderbuffer, internalformat, width, height);
        }

        public partial void NamedRenderbufferStorageMultisample(uint renderbuffer, uint samples, InternalFormat internalformat, uint width, uint height)
        {
            ((delegate *cdecl<UInt32, UInt32, InternalFormat, UInt32, UInt32, void>)Load("glNamedRenderbufferStorageMultisample", 312))(renderbuffer, samples, internalformat, width, height);
        }

        public unsafe partial void ReadnPixels(int x, int y, uint width, uint height, PixelFormat format, PixelType type, uint bufSize, void *data)
        {
            ((delegate *cdecl<Int32, Int32, UInt32, UInt32, PixelFormat, PixelType, UInt32,, void>)Load("glReadnPixels", 313))(x, y, width, height, format, type, bufSize, data);
        }

        public partial void ReadnPixels<T0>(int x, int y, uint width, uint height, PixelFormat format, PixelType type, uint bufSize, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<Int32, Int32, UInt32, UInt32, PixelFormat, PixelType, UInt32, Span, void>)Load("glReadnPixels", 314))(x, y, width, height, format, type, bufSize, data);
        }

        public partial void TextureBuffer(uint texture, InternalFormat internalformat, uint buffer)
        {
            ((delegate *cdecl<UInt32, InternalFormat, UInt32, void>)Load("glTextureBuffer", 315))(texture, internalformat, buffer);
        }

        public partial void TextureBufferRange(uint texture, InternalFormat internalformat, uint buffer, IntPtr offset, UIntPtr size)
        {
            ((delegate *cdecl<UInt32, InternalFormat, UInt32, IntPtr, UIntPtr, void>)Load("glTextureBufferRange", 316))(texture, internalformat, buffer, offset, size);
        }

        public partial void TextureParameter(uint texture, TextureParameterName pname, float param)
        {
            ((delegate *cdecl<UInt32, TextureParameterName, Single, void>)Load("glTextureParameterf", 317))(texture, pname, param);
        }

        public unsafe partial void TextureParameter(uint texture, TextureParameterName pname, float *param)
        {
            ((delegate *cdecl<UInt32, TextureParameterName,, void>)Load("glTextureParameterfv", 318))(texture, pname, param);
        }

        public partial void TextureParameter(uint texture, TextureParameterName pname, Span<float> param)
        {
            ((delegate *cdecl<UInt32, TextureParameterName, Span, void>)Load("glTextureParameterfv", 319))(texture, pname, param);
        }

        public partial void TextureParameter(uint texture, TextureParameterName pname, int param)
        {
            ((delegate *cdecl<UInt32, TextureParameterName, Int32, void>)Load("glTextureParameteri", 320))(texture, pname, param);
        }

        public unsafe partial void TextureParameter(uint texture, TextureParameterName pname, int *param)
        {
            ((delegate *cdecl<UInt32, TextureParameterName,, void>)Load("glTextureParameteriv", 321))(texture, pname, param);
        }

        public partial void TextureParameter(uint texture, TextureParameterName pname, Span<int> param)
        {
            ((delegate *cdecl<UInt32, TextureParameterName, Span, void>)Load("glTextureParameteriv", 322))(texture, pname, param);
        }

        public unsafe partial void TextureParameterI(uint texture, TextureParameterName pname, int *@params)
        {
            ((delegate *cdecl<UInt32, TextureParameterName,, void>)Load("glTextureParameterIiv", 323))(texture, pname, params);
        }

        public partial void TextureParameterI(uint texture, TextureParameterName pname, Span<int> @params)
        {
            ((delegate *cdecl<UInt32, TextureParameterName, Span, void>)Load("glTextureParameterIiv", 324))(texture, pname, params);
        }

        public unsafe partial void TextureParameterI(uint texture, TextureParameterName pname, uint *@params)
        {
            ((delegate *cdecl<UInt32, TextureParameterName,, void>)Load("glTextureParameterIuiv", 325))(texture, pname, params);
        }

        public partial void TextureParameterI(uint texture, TextureParameterName pname, Span<uint> @params)
        {
            ((delegate *cdecl<UInt32, TextureParameterName, Span, void>)Load("glTextureParameterIuiv", 326))(texture, pname, params);
        }

        public partial void TextureStorage1D(uint texture, uint levels, InternalFormat internalformat, uint width)
        {
            ((delegate *cdecl<UInt32, UInt32, InternalFormat, UInt32, void>)Load("glTextureStorage1D", 327))(texture, levels, internalformat, width);
        }

        public partial void TextureStorage2D(uint texture, uint levels, InternalFormat internalformat, uint width, uint height)
        {
            ((delegate *cdecl<UInt32, UInt32, InternalFormat, UInt32, UInt32, void>)Load("glTextureStorage2D", 328))(texture, levels, internalformat, width, height);
        }

        public partial void TextureStorage2DMultisample(uint texture, uint samples, InternalFormat internalformat, uint width, uint height, bool fixedsamplelocations)
        {
            ((delegate *cdecl<UInt32, UInt32, InternalFormat, UInt32, UInt32, Boolean, void>)Load("glTextureStorage2DMultisample", 329))(texture, samples, internalformat, width, height, fixedsamplelocations);
        }

        public partial void TextureStorage3D(uint texture, uint levels, InternalFormat internalformat, uint width, uint height, uint depth)
        {
            ((delegate *cdecl<UInt32, UInt32, InternalFormat, UInt32, UInt32, UInt32, void>)Load("glTextureStorage3D", 330))(texture, levels, internalformat, width, height, depth);
        }

        public partial void TextureStorage3DMultisample(uint texture, uint samples, InternalFormat internalformat, uint width, uint height, uint depth, bool fixedsamplelocations)
        {
            ((delegate *cdecl<UInt32, UInt32, InternalFormat, UInt32, UInt32, UInt32, Boolean, void>)Load("glTextureStorage3DMultisample", 331))(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
        }

        public unsafe partial void TextureSubImage1D(uint texture, int level, int xoffset, uint width, PixelFormat format, PixelType type, void *pixels)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, UInt32, PixelFormat, PixelType,, void>)Load("glTextureSubImage1D", 332))(texture, level, xoffset, width, format, type, pixels);
        }

        public partial void TextureSubImage1D<T0>(uint texture, int level, int xoffset, uint width, PixelFormat format, PixelType type, Span<T0> pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, Int32, UInt32, PixelFormat, PixelType, Span, void>)Load("glTextureSubImage1D", 333))(texture, level, xoffset, width, format, type, pixels);
        }

        public unsafe partial void TextureSubImage2D(uint texture, int level, int xoffset, int yoffset, uint width, uint height, PixelFormat format, PixelType type, void *pixels)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, UInt32, UInt32, PixelFormat, PixelType,, void>)Load("glTextureSubImage2D", 334))(texture, level, xoffset, yoffset, width, height, format, type, pixels);
        }

        public partial void TextureSubImage2D<T0>(uint texture, int level, int xoffset, int yoffset, uint width, uint height, PixelFormat format, PixelType type, Span<T0> pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, UInt32, UInt32, PixelFormat, PixelType, Span, void>)Load("glTextureSubImage2D", 335))(texture, level, xoffset, yoffset, width, height, format, type, pixels);
        }

        public unsafe partial void TextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, PixelFormat format, PixelType type, void *pixels)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, PixelFormat, PixelType,, void>)Load("glTextureSubImage3D", 336))(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }

        public partial void TextureSubImage3D<T0>(uint texture, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, PixelFormat format, PixelType type, Span<T0> pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, PixelFormat, PixelType, Span, void>)Load("glTextureSubImage3D", 337))(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }

        public partial void VertexArrayAttribFormat(uint vaobj, uint attribindex, int size, VertexAttribType type, bool normalized, uint relativeoffset)
        {
            ((delegate *cdecl<UInt32, UInt32, Int32, VertexAttribType, Boolean, UInt32, void>)Load("glVertexArrayAttribFormat", 338))(vaobj, attribindex, size, type, normalized, relativeoffset);
        }

        public partial void VertexArrayAttribIFormat(uint vaobj, uint attribindex, int size, VertexAttribIType type, uint relativeoffset)
        {
            ((delegate *cdecl<UInt32, UInt32, Int32, VertexAttribIType, UInt32, void>)Load("glVertexArrayAttribIFormat", 339))(vaobj, attribindex, size, type, relativeoffset);
        }

        public partial void VertexArrayAttribLFormat(uint vaobj, uint attribindex, int size, VertexAttribLType type, uint relativeoffset)
        {
            ((delegate *cdecl<UInt32, UInt32, Int32, VertexAttribLType, UInt32, void>)Load("glVertexArrayAttribLFormat", 340))(vaobj, attribindex, size, type, relativeoffset);
        }

        public unsafe partial void BindBuffersBase(GLEnum target, uint first, uint count, uint *buffers)
        {
            ((delegate *cdecl<GLEnum, UInt32, UInt32,, void>)Load("glBindBuffersBase", 341))(target, first, count, buffers);
        }

        public partial void BindBuffersBase(GLEnum target, uint first, uint count, Span<uint> buffers)
        {
            ((delegate *cdecl<GLEnum, UInt32, UInt32, Span, void>)Load("glBindBuffersBase", 342))(target, first, count, buffers);
        }

        public unsafe partial void BindBuffersRange(GLEnum target, uint first, uint count, uint *buffers, IntPtr*offsets, UIntPtr*sizes)
        {
            ((delegate *cdecl<GLEnum, UInt32, UInt32,,,, void>)Load("glBindBuffersRange", 343))(target, first, count, buffers, offsets, sizes);
        }

        public partial void BindBuffersRange(GLEnum target, uint first, uint count, Span<uint> buffers, Span<IntPtr> offsets, Span<UIntPtr> sizes)
        {
            ((delegate *cdecl<GLEnum, UInt32, UInt32, Span, Span, Span, void>)Load("glBindBuffersRange", 344))(target, first, count, buffers, offsets, sizes);
        }

        public unsafe partial void BindImageTextures(uint first, uint count, uint *textures)
        {
            ((delegate *cdecl<UInt32, UInt32,, void>)Load("glBindImageTextures", 345))(first, count, textures);
        }

        public partial void BindImageTextures(uint first, uint count, Span<uint> textures)
        {
            ((delegate *cdecl<UInt32, UInt32, Span, void>)Load("glBindImageTextures", 346))(first, count, textures);
        }

        public unsafe partial void BindSamplers(uint first, uint count, uint *samplers)
        {
            ((delegate *cdecl<UInt32, UInt32,, void>)Load("glBindSamplers", 347))(first, count, samplers);
        }

        public partial void BindSamplers(uint first, uint count, Span<uint> samplers)
        {
            ((delegate *cdecl<UInt32, UInt32, Span, void>)Load("glBindSamplers", 348))(first, count, samplers);
        }

        public unsafe partial void BindTextures(uint first, uint count, uint *textures)
        {
            ((delegate *cdecl<UInt32, UInt32,, void>)Load("glBindTextures", 349))(first, count, textures);
        }

        public partial void BindTextures(uint first, uint count, Span<uint> textures)
        {
            ((delegate *cdecl<UInt32, UInt32, Span, void>)Load("glBindTextures", 350))(first, count, textures);
        }

        public unsafe partial void BindVertexBuffers(uint first, uint count, uint *buffers, IntPtr*offsets, uint *strides)
        {
            ((delegate *cdecl<UInt32, UInt32,,,, void>)Load("glBindVertexBuffers", 351))(first, count, buffers, offsets, strides);
        }

        public partial void BindVertexBuffers(uint first, uint count, Span<uint> buffers, Span<IntPtr> offsets, Span<uint> strides)
        {
            ((delegate *cdecl<UInt32, UInt32, Span, Span, Span, void>)Load("glBindVertexBuffers", 352))(first, count, buffers, offsets, strides);
        }

        public unsafe partial void BufferStorage(GLEnum target, UIntPtr size, void *data, uint flags)
        {
            ((delegate *cdecl<GLEnum, UIntPtr,, UInt32, void>)Load("glBufferStorage", 353))(target, size, data, flags);
        }

        public partial void BufferStorage<T0>(GLEnum target, UIntPtr size, Span<T0> data, uint flags)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, UIntPtr, Span, UInt32, void>)Load("glBufferStorage", 354))(target, size, data, flags);
        }

        public unsafe partial void ClearTexImage(uint texture, int level, GLEnum format, GLEnum type, void *data)
        {
            ((delegate *cdecl<UInt32, Int32, GLEnum, GLEnum,, void>)Load("glClearTexImage", 355))(texture, level, format, type, data);
        }

        public partial void ClearTexImage<T0>(uint texture, int level, GLEnum format, GLEnum type, ref T0 data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, GLEnum, GLEnum, T0, void>)Load("glClearTexImage", 356))(texture, level, format, type, data);
        }

        public unsafe partial void ClearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, GLEnum format, GLEnum type, void *data)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, GLEnum, GLEnum,, void>)Load("glClearTexSubImage", 357))(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
        }

        public partial void ClearTexSubImage<T0>(uint texture, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, GLEnum format, GLEnum type, ref T0 data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, GLEnum, GLEnum, T0, void>)Load("glClearTexSubImage", 358))(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
        }

        public unsafe partial void BindBuffersBase(BufferTargetARB target, uint first, uint count, uint *buffers)
        {
            ((delegate *cdecl<BufferTargetARB, UInt32, UInt32,, void>)Load("glBindBuffersBase", 359))(target, first, count, buffers);
        }

        public partial void BindBuffersBase(BufferTargetARB target, uint first, uint count, Span<uint> buffers)
        {
            ((delegate *cdecl<BufferTargetARB, UInt32, UInt32, Span, void>)Load("glBindBuffersBase", 360))(target, first, count, buffers);
        }

        public unsafe partial void BindBuffersRange(BufferTargetARB target, uint first, uint count, uint *buffers, IntPtr*offsets, UIntPtr*sizes)
        {
            ((delegate *cdecl<BufferTargetARB, UInt32, UInt32,,,, void>)Load("glBindBuffersRange", 361))(target, first, count, buffers, offsets, sizes);
        }

        public partial void BindBuffersRange(BufferTargetARB target, uint first, uint count, Span<uint> buffers, Span<IntPtr> offsets, Span<UIntPtr> sizes)
        {
            ((delegate *cdecl<BufferTargetARB, UInt32, UInt32, Span, Span, Span, void>)Load("glBindBuffersRange", 362))(target, first, count, buffers, offsets, sizes);
        }

        public unsafe partial void BufferStorage(BufferStorageTarget target, UIntPtr size, void *data, uint flags)
        {
            ((delegate *cdecl<BufferStorageTarget, UIntPtr,, UInt32, void>)Load("glBufferStorage", 363))(target, size, data, flags);
        }

        public partial void BufferStorage<T0>(BufferStorageTarget target, UIntPtr size, Span<T0> data, uint flags)
            where T0 : unmanaged
        {
            ((delegate *cdecl<BufferStorageTarget, UIntPtr, Span, UInt32, void>)Load("glBufferStorage", 364))(target, size, data, flags);
        }

        public unsafe partial void ClearTexImage(uint texture, int level, PixelFormat format, PixelType type, void *data)
        {
            ((delegate *cdecl<UInt32, Int32, PixelFormat, PixelType,, void>)Load("glClearTexImage", 365))(texture, level, format, type, data);
        }

        public partial void ClearTexImage<T0>(uint texture, int level, PixelFormat format, PixelType type, ref T0 data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, PixelFormat, PixelType, T0, void>)Load("glClearTexImage", 366))(texture, level, format, type, data);
        }

        public unsafe partial void ClearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, PixelFormat format, PixelType type, void *data)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, PixelFormat, PixelType,, void>)Load("glClearTexSubImage", 367))(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
        }

        public partial void ClearTexSubImage<T0>(uint texture, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, PixelFormat format, PixelType type, ref T0 data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, PixelFormat, PixelType, T0, void>)Load("glClearTexSubImage", 368))(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
        }

        public partial void BindVertexBuffer(uint bindingindex, uint buffer, IntPtr offset, uint stride)
        {
            ((delegate *cdecl<UInt32, UInt32, IntPtr, UInt32, void>)Load("glBindVertexBuffer", 369))(bindingindex, buffer, offset, stride);
        }

        public unsafe partial void ClearBufferData(GLEnum target, GLEnum internalformat, GLEnum format, GLEnum type, void *data)
        {
            ((delegate *cdecl<GLEnum, GLEnum, GLEnum, GLEnum,, void>)Load("glClearBufferData", 370))(target, internalformat, format, type, data);
        }

        public partial void ClearBufferData<T0>(GLEnum target, GLEnum internalformat, GLEnum format, GLEnum type, ref T0 data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, GLEnum, GLEnum, GLEnum, T0, void>)Load("glClearBufferData", 371))(target, internalformat, format, type, data);
        }

        public unsafe partial void ClearBufferSubData(GLEnum target, GLEnum internalformat, IntPtr offset, UIntPtr size, GLEnum format, GLEnum type, void *data)
        {
            ((delegate *cdecl<GLEnum, GLEnum, IntPtr, UIntPtr, GLEnum, GLEnum,, void>)Load("glClearBufferSubData", 372))(target, internalformat, offset, size, format, type, data);
        }

        public partial void ClearBufferSubData<T0>(GLEnum target, GLEnum internalformat, IntPtr offset, UIntPtr size, GLEnum format, GLEnum type, ref T0 data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, GLEnum, IntPtr, UIntPtr, GLEnum, GLEnum, T0, void>)Load("glClearBufferSubData", 373))(target, internalformat, offset, size, format, type, data);
        }

        public partial void CopyImageSubData(uint srcName, GLEnum srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, GLEnum dstTarget, int dstLevel, int dstX, int dstY, int dstZ, uint srcWidth, uint srcHeight, uint srcDepth)
        {
            ((delegate *cdecl<UInt32, GLEnum, Int32, Int32, Int32, Int32, UInt32, GLEnum, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, void>)Load("glCopyImageSubData", 374))(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        }

        public unsafe partial void DebugMessageCallback(DebugProc callback, void *userParam)
        {
            ((delegate *cdecl<DebugProc,, void>)Load("glDebugMessageCallback", 375))(callback, userParam);
        }

        public partial void DebugMessageCallback<T0>(DebugProc callback, Span<T0> userParam)
            where T0 : unmanaged
        {
            ((delegate *cdecl<DebugProc, Span, void>)Load("glDebugMessageCallback", 376))(callback, userParam);
        }

        public unsafe partial void DebugMessageControl(GLEnum source, GLEnum type, GLEnum severity, uint count, uint *ids, bool enabled)
        {
            ((delegate *cdecl<GLEnum, GLEnum, GLEnum, UInt32,, Boolean, void>)Load("glDebugMessageControl", 377))(source, type, severity, count, ids, enabled);
        }

        public partial void DebugMessageControl(GLEnum source, GLEnum type, GLEnum severity, uint count, Span<uint> ids, bool enabled)
        {
            ((delegate *cdecl<GLEnum, GLEnum, GLEnum, UInt32, Span, Boolean, void>)Load("glDebugMessageControl", 378))(source, type, severity, count, ids, enabled);
        }

        public unsafe partial void DebugMessageInsert(GLEnum source, GLEnum type, uint id, GLEnum severity, uint length, byte *buf)
        {
            ((delegate *cdecl<GLEnum, GLEnum, UInt32, GLEnum, UInt32,, void>)Load("glDebugMessageInsert", 379))(source, type, id, severity, length, buf);
        }

        public partial void DebugMessageInsert(GLEnum source, GLEnum type, uint id, GLEnum severity, uint length, ref byte buf)
        {
            ((delegate *cdecl<GLEnum, GLEnum, UInt32, GLEnum, UInt32, Byte, void>)Load("glDebugMessageInsert", 380))(source, type, id, severity, length, buf);
        }

        public partial void DispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, void>)Load("glDispatchCompute", 381))(num_groups_x, num_groups_y, num_groups_z);
        }

        public partial void DispatchComputeIndirect(IntPtr indirect)
        {
            ((delegate *cdecl<IntPtr, void>)Load("glDispatchComputeIndirect", 382))(indirect);
        }

        public partial void FramebufferParameter(GLEnum target, GLEnum pname, int param)
        {
            ((delegate *cdecl<GLEnum, GLEnum, Int32, void>)Load("glFramebufferParameteri", 383))(target, pname, param);
        }

        public unsafe partial void GetFramebufferParameter(GLEnum target, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<GLEnum, GLEnum,, void>)Load("glGetFramebufferParameteriv", 386))(target, pname, params);
        }

        public partial void GetFramebufferParameter(GLEnum target, GLEnum pname, out int @params)
        {
            ((delegate *cdecl<GLEnum, GLEnum, Int32, void>)Load("glGetFramebufferParameteriv", 387))(target, pname, params);
        }

        public unsafe partial void GetInternalformat(GLEnum target, GLEnum internalformat, GLEnum pname, uint count, long *@params)
        {
            ((delegate *cdecl<GLEnum, GLEnum, GLEnum, UInt32,, void>)Load("glGetInternalformati64v", 388))(target, internalformat, pname, count, params);
        }

        public partial void GetInternalformat(GLEnum target, GLEnum internalformat, GLEnum pname, uint count, Span<long> @params)
        {
            ((delegate *cdecl<GLEnum, GLEnum, GLEnum, UInt32, Span, void>)Load("glGetInternalformati64v", 389))(target, internalformat, pname, count, params);
        }

        public unsafe partial void GetObjectLabel(GLEnum identifier, uint name, uint bufSize, uint *length, byte *label)
        {
            ((delegate *cdecl<GLEnum, UInt32, UInt32,,, void>)Load("glGetObjectLabel", 390))(identifier, name, bufSize, length, label);
        }

        public partial void GetObjectLabel(GLEnum identifier, uint name, uint bufSize, out uint length, Span<byte> label)
        {
            ((delegate *cdecl<GLEnum, UInt32, UInt32, UInt32, Span, void>)Load("glGetObjectLabel", 391))(identifier, name, bufSize, length, label);
        }

        public unsafe partial void GetObjectPtrLabel(void *ptr, uint bufSize, uint *length, byte *label)
        {
            ((delegate *cdecl<, UInt32,,, void>)Load("glGetObjectPtrLabel", 392))(ptr, bufSize, length, label);
        }

        public partial void GetObjectPtrLabel<T0>(Span<T0> ptr, uint bufSize, out uint length, Span<byte> label)
            where T0 : unmanaged
        {
            ((delegate *cdecl<Span, UInt32, UInt32, Span, void>)Load("glGetObjectPtrLabel", 393))(ptr, bufSize, length, label);
        }

        public unsafe partial void GetProgramInterface(uint program, GLEnum programInterface, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum, GLEnum,, void>)Load("glGetProgramInterfaceiv", 394))(program, programInterface, pname, params);
        }

        public partial void GetProgramInterface(uint program, GLEnum programInterface, GLEnum pname, out int @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, GLEnum, Int32, void>)Load("glGetProgramInterfaceiv", 395))(program, programInterface, pname, params);
        }

        public unsafe partial void GetProgramResource(uint program, GLEnum programInterface, uint index, uint propCount, GLEnum*props, uint count, uint *length, int *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum, UInt32, UInt32,, UInt32,,, void>)Load("glGetProgramResourceiv", 396))(program, programInterface, index, propCount, props, count, length, params);
        }

        public partial void GetProgramResource(uint program, GLEnum programInterface, uint index, uint propCount, Span<GLEnum> props, uint count, out uint length, Span<int> @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, UInt32, UInt32, Span, UInt32, UInt32, Span, void>)Load("glGetProgramResourceiv", 397))(program, programInterface, index, propCount, props, count, length, params);
        }

        public unsafe partial void GetProgramResourceName(uint program, GLEnum programInterface, uint index, uint bufSize, uint *length, byte *name)
        {
            ((delegate *cdecl<UInt32, GLEnum, UInt32, UInt32,,, void>)Load("glGetProgramResourceName", 404))(program, programInterface, index, bufSize, length, name);
        }

        public partial void GetProgramResourceName(uint program, GLEnum programInterface, uint index, uint bufSize, out uint length, Span<byte> name)
        {
            ((delegate *cdecl<UInt32, GLEnum, UInt32, UInt32, UInt32, Span, void>)Load("glGetProgramResourceName", 405))(program, programInterface, index, bufSize, length, name);
        }

        public partial void InvalidateBufferData(uint buffer)
        {
            ((delegate *cdecl<UInt32, void>)Load("glInvalidateBufferData", 406))(buffer);
        }

        public partial void InvalidateBufferSubData(uint buffer, IntPtr offset, UIntPtr length)
        {
            ((delegate *cdecl<UInt32, IntPtr, UIntPtr, void>)Load("glInvalidateBufferSubData", 407))(buffer, offset, length);
        }

        public unsafe partial void InvalidateFramebuffer(GLEnum target, uint numAttachments, GLEnum*attachments)
        {
            ((delegate *cdecl<GLEnum, UInt32,, void>)Load("glInvalidateFramebuffer", 408))(target, numAttachments, attachments);
        }

        public partial void InvalidateFramebuffer(GLEnum target, uint numAttachments, Span<GLEnum> attachments)
        {
            ((delegate *cdecl<GLEnum, UInt32, Span, void>)Load("glInvalidateFramebuffer", 409))(target, numAttachments, attachments);
        }

        public unsafe partial void InvalidateSubFramebuffer(GLEnum target, uint numAttachments, GLEnum*attachments, int x, int y, uint width, uint height)
        {
            ((delegate *cdecl<GLEnum, UInt32,, Int32, Int32, UInt32, UInt32, void>)Load("glInvalidateSubFramebuffer", 410))(target, numAttachments, attachments, x, y, width, height);
        }

        public partial void InvalidateSubFramebuffer(GLEnum target, uint numAttachments, Span<GLEnum> attachments, int x, int y, uint width, uint height)
        {
            ((delegate *cdecl<GLEnum, UInt32, Span, Int32, Int32, UInt32, UInt32, void>)Load("glInvalidateSubFramebuffer", 411))(target, numAttachments, attachments, x, y, width, height);
        }

        public partial void InvalidateTexImage(uint texture, int level)
        {
            ((delegate *cdecl<UInt32, Int32, void>)Load("glInvalidateTexImage", 412))(texture, level);
        }

        public partial void InvalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, void>)Load("glInvalidateTexSubImage", 413))(texture, level, xoffset, yoffset, zoffset, width, height, depth);
        }

        public unsafe partial void MultiDrawArraysIndirect(GLEnum mode, void *indirect, uint drawcount, uint stride)
        {
            ((delegate *cdecl<GLEnum,, UInt32, UInt32, void>)Load("glMultiDrawArraysIndirect", 414))(mode, indirect, drawcount, stride);
        }

        public partial void MultiDrawArraysIndirect<T0>(GLEnum mode, ref T0 indirect, uint drawcount, uint stride)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, T0, UInt32, UInt32, void>)Load("glMultiDrawArraysIndirect", 415))(mode, indirect, drawcount, stride);
        }

        public unsafe partial void MultiDrawElementsIndirect(GLEnum mode, GLEnum type, void *indirect, uint drawcount, uint stride)
        {
            ((delegate *cdecl<GLEnum, GLEnum,, UInt32, UInt32, void>)Load("glMultiDrawElementsIndirect", 416))(mode, type, indirect, drawcount, stride);
        }

        public partial void MultiDrawElementsIndirect<T0>(GLEnum mode, GLEnum type, ref T0 indirect, uint drawcount, uint stride)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, GLEnum, T0, UInt32, UInt32, void>)Load("glMultiDrawElementsIndirect", 417))(mode, type, indirect, drawcount, stride);
        }

        public unsafe partial void ObjectLabel(GLEnum identifier, uint name, uint length, byte *label)
        {
            ((delegate *cdecl<GLEnum, UInt32, UInt32,, void>)Load("glObjectLabel", 418))(identifier, name, length, label);
        }

        public partial void ObjectLabel(GLEnum identifier, uint name, uint length, ref byte label)
        {
            ((delegate *cdecl<GLEnum, UInt32, UInt32, Byte, void>)Load("glObjectLabel", 419))(identifier, name, length, label);
        }

        public unsafe partial void ObjectPtrLabel(void *ptr, uint length, byte *label)
        {
            ((delegate *cdecl<, UInt32,, void>)Load("glObjectPtrLabel", 420))(ptr, length, label);
        }

        public partial void ObjectPtrLabel<T0>(Span<T0> ptr, uint length, ref byte label)
            where T0 : unmanaged
        {
            ((delegate *cdecl<Span, UInt32, Byte, void>)Load("glObjectPtrLabel", 421))(ptr, length, label);
        }

        public partial void PopDebugGroup()
        {
            ((delegate *cdecl<void>)Load("glPopDebugGroup", 422))();
        }

        public unsafe partial void PushDebugGroup(GLEnum source, uint id, uint length, byte *message)
        {
            ((delegate *cdecl<GLEnum, UInt32, UInt32,, void>)Load("glPushDebugGroup", 423))(source, id, length, message);
        }

        public partial void PushDebugGroup(GLEnum source, uint id, uint length, ref byte message)
        {
            ((delegate *cdecl<GLEnum, UInt32, UInt32, Byte, void>)Load("glPushDebugGroup", 424))(source, id, length, message);
        }

        public partial void ShaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, void>)Load("glShaderStorageBlockBinding", 425))(program, storageBlockIndex, storageBlockBinding);
        }

        public partial void TexBufferRange(GLEnum target, GLEnum internalformat, uint buffer, IntPtr offset, UIntPtr size)
        {
            ((delegate *cdecl<GLEnum, GLEnum, UInt32, IntPtr, UIntPtr, void>)Load("glTexBufferRange", 426))(target, internalformat, buffer, offset, size);
        }

        public partial void TexStorage2DMultisample(GLEnum target, uint samples, GLEnum internalformat, uint width, uint height, bool fixedsamplelocations)
        {
            ((delegate *cdecl<GLEnum, UInt32, GLEnum, UInt32, UInt32, Boolean, void>)Load("glTexStorage2DMultisample", 427))(target, samples, internalformat, width, height, fixedsamplelocations);
        }

        public partial void TexStorage3DMultisample(GLEnum target, uint samples, GLEnum internalformat, uint width, uint height, uint depth, bool fixedsamplelocations)
        {
            ((delegate *cdecl<GLEnum, UInt32, GLEnum, UInt32, UInt32, UInt32, Boolean, void>)Load("glTexStorage3DMultisample", 428))(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }

        public partial void TextureView(uint texture, GLEnum target, uint origtexture, GLEnum internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
        {
            ((delegate *cdecl<UInt32, GLEnum, UInt32, GLEnum, UInt32, UInt32, UInt32, UInt32, void>)Load("glTextureView", 429))(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        }

        public partial void VertexAttribBinding(uint attribindex, uint bindingindex)
        {
            ((delegate *cdecl<UInt32, UInt32, void>)Load("glVertexAttribBinding", 430))(attribindex, bindingindex);
        }

        public partial void VertexAttribFormat(uint attribindex, int size, GLEnum type, bool normalized, uint relativeoffset)
        {
            ((delegate *cdecl<UInt32, Int32, GLEnum, Boolean, UInt32, void>)Load("glVertexAttribFormat", 431))(attribindex, size, type, normalized, relativeoffset);
        }

        public partial void VertexAttribIFormat(uint attribindex, int size, GLEnum type, uint relativeoffset)
        {
            ((delegate *cdecl<UInt32, Int32, GLEnum, UInt32, void>)Load("glVertexAttribIFormat", 432))(attribindex, size, type, relativeoffset);
        }

        public partial void VertexAttribLFormat(uint attribindex, int size, GLEnum type, uint relativeoffset)
        {
            ((delegate *cdecl<UInt32, Int32, GLEnum, UInt32, void>)Load("glVertexAttribLFormat", 433))(attribindex, size, type, relativeoffset);
        }

        public partial void VertexBindingDivisor(uint bindingindex, uint divisor)
        {
            ((delegate *cdecl<UInt32, UInt32, void>)Load("glVertexBindingDivisor", 434))(bindingindex, divisor);
        }

        public unsafe partial void ClearBufferData(BufferStorageTarget target, InternalFormat internalformat, PixelFormat format, PixelType type, void *data)
        {
            ((delegate *cdecl<BufferStorageTarget, InternalFormat, PixelFormat, PixelType,, void>)Load("glClearBufferData", 435))(target, internalformat, format, type, data);
        }

        public partial void ClearBufferData<T0>(BufferStorageTarget target, InternalFormat internalformat, PixelFormat format, PixelType type, ref T0 data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<BufferStorageTarget, InternalFormat, PixelFormat, PixelType, T0, void>)Load("glClearBufferData", 436))(target, internalformat, format, type, data);
        }

        public unsafe partial void ClearBufferSubData(BufferTargetARB target, InternalFormat internalformat, IntPtr offset, UIntPtr size, PixelFormat format, PixelType type, void *data)
        {
            ((delegate *cdecl<BufferTargetARB, InternalFormat, IntPtr, UIntPtr, PixelFormat, PixelType,, void>)Load("glClearBufferSubData", 437))(target, internalformat, offset, size, format, type, data);
        }

        public partial void ClearBufferSubData<T0>(BufferTargetARB target, InternalFormat internalformat, IntPtr offset, UIntPtr size, PixelFormat format, PixelType type, ref T0 data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<BufferTargetARB, InternalFormat, IntPtr, UIntPtr, PixelFormat, PixelType, T0, void>)Load("glClearBufferSubData", 438))(target, internalformat, offset, size, format, type, data);
        }

        public partial void CopyImageSubData(uint srcName, CopyImageSubDataTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, CopyImageSubDataTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, uint srcWidth, uint srcHeight, uint srcDepth)
        {
            ((delegate *cdecl<UInt32, CopyImageSubDataTarget, Int32, Int32, Int32, Int32, UInt32, CopyImageSubDataTarget, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, void>)Load("glCopyImageSubData", 439))(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        }

        public unsafe partial void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, uint count, uint *ids, bool enabled)
        {
            ((delegate *cdecl<DebugSource, DebugType, DebugSeverity, UInt32,, Boolean, void>)Load("glDebugMessageControl", 440))(source, type, severity, count, ids, enabled);
        }

        public partial void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, uint count, Span<uint> ids, bool enabled)
        {
            ((delegate *cdecl<DebugSource, DebugType, DebugSeverity, UInt32, Span, Boolean, void>)Load("glDebugMessageControl", 441))(source, type, severity, count, ids, enabled);
        }

        public partial void DebugMessageInsert(DebugSource source, DebugType type, uint id, DebugSeverity severity, uint length, string buf)
        {
            ((delegate *cdecl<DebugSource, DebugType, UInt32, DebugSeverity, UInt32, String, void>)Load("glDebugMessageInsert", 442))(source, type, id, severity, length, buf);
        }

        public partial void FramebufferParameter(FramebufferTarget target, FramebufferParameterName pname, int param)
        {
            ((delegate *cdecl<FramebufferTarget, FramebufferParameterName, Int32, void>)Load("glFramebufferParameteri", 443))(target, pname, param);
        }

        public unsafe partial void GetFramebufferParameter(FramebufferTarget target, FramebufferAttachmentParameterName pname, int *@params)
        {
            ((delegate *cdecl<FramebufferTarget, FramebufferAttachmentParameterName,, void>)Load("glGetFramebufferParameteriv", 446))(target, pname, params);
        }

        public partial void GetFramebufferParameter(FramebufferTarget target, FramebufferAttachmentParameterName pname, out int @params)
        {
            ((delegate *cdecl<FramebufferTarget, FramebufferAttachmentParameterName, Int32, void>)Load("glGetFramebufferParameteriv", 447))(target, pname, params);
        }

        public unsafe partial void GetInternalformat(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, uint count, long *@params)
        {
            ((delegate *cdecl<TextureTarget, InternalFormat, InternalFormatPName, UInt32,, void>)Load("glGetInternalformati64v", 448))(target, internalformat, pname, count, params);
        }

        public partial void GetInternalformat(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, uint count, Span<long> @params)
        {
            ((delegate *cdecl<TextureTarget, InternalFormat, InternalFormatPName, UInt32, Span, void>)Load("glGetInternalformati64v", 449))(target, internalformat, pname, count, params);
        }

        public unsafe partial void GetObjectLabel(ObjectIdentifier identifier, uint name, uint bufSize, uint *length, out string label)
        {
            ((delegate *cdecl<ObjectIdentifier, UInt32, UInt32,, String, void>)Load("glGetObjectLabel", 450))(identifier, name, bufSize, length, label);
        }

        public partial void GetObjectLabel(ObjectIdentifier identifier, uint name, uint bufSize, out uint length, out string label)
        {
            ((delegate *cdecl<ObjectIdentifier, UInt32, UInt32, UInt32, String, void>)Load("glGetObjectLabel", 451))(identifier, name, bufSize, length, label);
        }

        public unsafe partial void GetObjectPtrLabel(void *ptr, uint bufSize, uint *length, out string label)
        {
            ((delegate *cdecl<, UInt32,, String, void>)Load("glGetObjectPtrLabel", 452))(ptr, bufSize, length, label);
        }

        public partial void GetObjectPtrLabel<T0>(Span<T0> ptr, uint bufSize, out uint length, out string label)
            where T0 : unmanaged
        {
            ((delegate *cdecl<Span, UInt32, UInt32, String, void>)Load("glGetObjectPtrLabel", 453))(ptr, bufSize, length, label);
        }

        public unsafe partial void GetProgramInterface(uint program, ProgramInterface programInterface, ProgramInterfacePName pname, int *@params)
        {
            ((delegate *cdecl<UInt32, ProgramInterface, ProgramInterfacePName,, void>)Load("glGetProgramInterfaceiv", 454))(program, programInterface, pname, params);
        }

        public partial void GetProgramInterface(uint program, ProgramInterface programInterface, ProgramInterfacePName pname, out int @params)
        {
            ((delegate *cdecl<UInt32, ProgramInterface, ProgramInterfacePName, Int32, void>)Load("glGetProgramInterfaceiv", 455))(program, programInterface, pname, params);
        }

        public unsafe partial void GetProgramResource(uint program, ProgramInterface programInterface, uint index, uint propCount, ProgramResourceProperty*props, uint count, uint *length, int *@params)
        {
            ((delegate *cdecl<UInt32, ProgramInterface, UInt32, UInt32,, UInt32,,, void>)Load("glGetProgramResourceiv", 456))(program, programInterface, index, propCount, props, count, length, params);
        }

        public partial void GetProgramResource(uint program, ProgramInterface programInterface, uint index, uint propCount, Span<ProgramResourceProperty> props, uint count, out uint length, Span<int> @params)
        {
            ((delegate *cdecl<UInt32, ProgramInterface, UInt32, UInt32, Span, UInt32, UInt32, Span, void>)Load("glGetProgramResourceiv", 457))(program, programInterface, index, propCount, props, count, length, params);
        }

        public unsafe partial void GetProgramResourceName(uint program, ProgramInterface programInterface, uint index, uint bufSize, uint *length, out string name)
        {
            ((delegate *cdecl<UInt32, ProgramInterface, UInt32, UInt32,, String, void>)Load("glGetProgramResourceName", 461))(program, programInterface, index, bufSize, length, name);
        }

        public partial void GetProgramResourceName(uint program, ProgramInterface programInterface, uint index, uint bufSize, out uint length, out string name)
        {
            ((delegate *cdecl<UInt32, ProgramInterface, UInt32, UInt32, UInt32, String, void>)Load("glGetProgramResourceName", 462))(program, programInterface, index, bufSize, length, name);
        }

        public unsafe partial void InvalidateFramebuffer(FramebufferTarget target, uint numAttachments, InvalidateFramebufferAttachment*attachments)
        {
            ((delegate *cdecl<FramebufferTarget, UInt32,, void>)Load("glInvalidateFramebuffer", 463))(target, numAttachments, attachments);
        }

        public partial void InvalidateFramebuffer(FramebufferTarget target, uint numAttachments, Span<InvalidateFramebufferAttachment> attachments)
        {
            ((delegate *cdecl<FramebufferTarget, UInt32, Span, void>)Load("glInvalidateFramebuffer", 464))(target, numAttachments, attachments);
        }

        public unsafe partial void InvalidateSubFramebuffer(FramebufferTarget target, uint numAttachments, InvalidateFramebufferAttachment*attachments, int x, int y, uint width, uint height)
        {
            ((delegate *cdecl<FramebufferTarget, UInt32,, Int32, Int32, UInt32, UInt32, void>)Load("glInvalidateSubFramebuffer", 465))(target, numAttachments, attachments, x, y, width, height);
        }

        public partial void InvalidateSubFramebuffer(FramebufferTarget target, uint numAttachments, Span<InvalidateFramebufferAttachment> attachments, int x, int y, uint width, uint height)
        {
            ((delegate *cdecl<FramebufferTarget, UInt32, Span, Int32, Int32, UInt32, UInt32, void>)Load("glInvalidateSubFramebuffer", 466))(target, numAttachments, attachments, x, y, width, height);
        }

        public unsafe partial void MultiDrawArraysIndirect(PrimitiveType mode, void *indirect, uint drawcount, uint stride)
        {
            ((delegate *cdecl<PrimitiveType,, UInt32, UInt32, void>)Load("glMultiDrawArraysIndirect", 467))(mode, indirect, drawcount, stride);
        }

        public partial void MultiDrawArraysIndirect<T0>(PrimitiveType mode, ref T0 indirect, uint drawcount, uint stride)
            where T0 : unmanaged
        {
            ((delegate *cdecl<PrimitiveType, T0, UInt32, UInt32, void>)Load("glMultiDrawArraysIndirect", 468))(mode, indirect, drawcount, stride);
        }

        public unsafe partial void MultiDrawElementsIndirect(PrimitiveType mode, DrawElementsType type, void *indirect, uint drawcount, uint stride)
        {
            ((delegate *cdecl<PrimitiveType, DrawElementsType,, UInt32, UInt32, void>)Load("glMultiDrawElementsIndirect", 469))(mode, type, indirect, drawcount, stride);
        }

        public partial void MultiDrawElementsIndirect<T0>(PrimitiveType mode, DrawElementsType type, ref T0 indirect, uint drawcount, uint stride)
            where T0 : unmanaged
        {
            ((delegate *cdecl<PrimitiveType, DrawElementsType, T0, UInt32, UInt32, void>)Load("glMultiDrawElementsIndirect", 470))(mode, type, indirect, drawcount, stride);
        }

        public partial void ObjectLabel(ObjectIdentifier identifier, uint name, uint length, string label)
        {
            ((delegate *cdecl<ObjectIdentifier, UInt32, UInt32, String, void>)Load("glObjectLabel", 471))(identifier, name, length, label);
        }

        public unsafe partial void ObjectPtrLabel(void *ptr, uint length, string label)
        {
            ((delegate *cdecl<, UInt32, String, void>)Load("glObjectPtrLabel", 472))(ptr, length, label);
        }

        public partial void ObjectPtrLabel<T0>(Span<T0> ptr, uint length, string label)
            where T0 : unmanaged
        {
            ((delegate *cdecl<Span, UInt32, String, void>)Load("glObjectPtrLabel", 473))(ptr, length, label);
        }

        public partial void PushDebugGroup(DebugSource source, uint id, uint length, string message)
        {
            ((delegate *cdecl<DebugSource, UInt32, UInt32, String, void>)Load("glPushDebugGroup", 474))(source, id, length, message);
        }

        public partial void TexBufferRange(TextureTarget target, InternalFormat internalformat, uint buffer, IntPtr offset, UIntPtr size)
        {
            ((delegate *cdecl<TextureTarget, InternalFormat, UInt32, IntPtr, UIntPtr, void>)Load("glTexBufferRange", 475))(target, internalformat, buffer, offset, size);
        }

        public partial void TexStorage2DMultisample(TextureTarget target, uint samples, InternalFormat internalformat, uint width, uint height, bool fixedsamplelocations)
        {
            ((delegate *cdecl<TextureTarget, UInt32, InternalFormat, UInt32, UInt32, Boolean, void>)Load("glTexStorage2DMultisample", 476))(target, samples, internalformat, width, height, fixedsamplelocations);
        }

        public partial void TexStorage3DMultisample(TextureTarget target, uint samples, InternalFormat internalformat, uint width, uint height, uint depth, bool fixedsamplelocations)
        {
            ((delegate *cdecl<TextureTarget, UInt32, InternalFormat, UInt32, UInt32, UInt32, Boolean, void>)Load("glTexStorage3DMultisample", 477))(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }

        public partial void TextureView(uint texture, TextureTarget target, uint origtexture, InternalFormat internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
        {
            ((delegate *cdecl<UInt32, TextureTarget, UInt32, InternalFormat, UInt32, UInt32, UInt32, UInt32, void>)Load("glTextureView", 478))(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        }

        public partial void VertexAttribFormat(uint attribindex, int size, VertexAttribType type, bool normalized, uint relativeoffset)
        {
            ((delegate *cdecl<UInt32, Int32, VertexAttribType, Boolean, UInt32, void>)Load("glVertexAttribFormat", 479))(attribindex, size, type, normalized, relativeoffset);
        }

        public partial void VertexAttribIFormat(uint attribindex, int size, VertexAttribIType type, uint relativeoffset)
        {
            ((delegate *cdecl<UInt32, Int32, VertexAttribIType, UInt32, void>)Load("glVertexAttribIFormat", 480))(attribindex, size, type, relativeoffset);
        }

        public partial void VertexAttribLFormat(uint attribindex, int size, VertexAttribLType type, uint relativeoffset)
        {
            ((delegate *cdecl<UInt32, Int32, VertexAttribLType, UInt32, void>)Load("glVertexAttribLFormat", 481))(attribindex, size, type, relativeoffset);
        }

        public partial void BindImageTexture(uint unit, uint texture, int level, bool layered, int layer, GLEnum access, GLEnum format)
        {
            ((delegate *cdecl<UInt32, UInt32, Int32, Boolean, Int32, GLEnum, GLEnum, void>)Load("glBindImageTexture", 482))(unit, texture, level, layered, layer, access, format);
        }

        public partial void DrawArraysInstancedBaseInstance(GLEnum mode, int first, uint count, uint instancecount, uint baseinstance)
        {
            ((delegate *cdecl<GLEnum, Int32, UInt32, UInt32, UInt32, void>)Load("glDrawArraysInstancedBaseInstance", 483))(mode, first, count, instancecount, baseinstance);
        }

        public unsafe partial void DrawElementsInstancedBaseInstance(GLEnum mode, uint count, GLEnum type, void *indices, uint instancecount, uint baseinstance)
        {
            ((delegate *cdecl<GLEnum, UInt32, GLEnum,, UInt32, UInt32, void>)Load("glDrawElementsInstancedBaseInstance", 484))(mode, count, type, indices, instancecount, baseinstance);
        }

        public partial void DrawElementsInstancedBaseInstance<T0>(GLEnum mode, uint count, GLEnum type, Span<T0> indices, uint instancecount, uint baseinstance)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, UInt32, GLEnum, Span, UInt32, UInt32, void>)Load("glDrawElementsInstancedBaseInstance", 485))(mode, count, type, indices, instancecount, baseinstance);
        }

        public unsafe partial void DrawElementsInstancedBaseVertexBaseInstance(GLEnum mode, uint count, GLEnum type, void *indices, uint instancecount, int basevertex, uint baseinstance)
        {
            ((delegate *cdecl<GLEnum, UInt32, GLEnum,, UInt32, Int32, UInt32, void>)Load("glDrawElementsInstancedBaseVertexBaseInstance", 486))(mode, count, type, indices, instancecount, basevertex, baseinstance);
        }

        public partial void DrawElementsInstancedBaseVertexBaseInstance<T0>(GLEnum mode, uint count, GLEnum type, Span<T0> indices, uint instancecount, int basevertex, uint baseinstance)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, UInt32, GLEnum, Span, UInt32, Int32, UInt32, void>)Load("glDrawElementsInstancedBaseVertexBaseInstance", 487))(mode, count, type, indices, instancecount, basevertex, baseinstance);
        }

        public partial void DrawTransformFeedbackInstanced(GLEnum mode, uint id, uint instancecount)
        {
            ((delegate *cdecl<GLEnum, UInt32, UInt32, void>)Load("glDrawTransformFeedbackInstanced", 488))(mode, id, instancecount);
        }

        public partial void DrawTransformFeedbackStreamInstanced(GLEnum mode, uint id, uint stream, uint instancecount)
        {
            ((delegate *cdecl<GLEnum, UInt32, UInt32, UInt32, void>)Load("glDrawTransformFeedbackStreamInstanced", 489))(mode, id, stream, instancecount);
        }

        public unsafe partial void GetActiveAtomicCounterBuffer(uint program, uint bufferIndex, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<UInt32, UInt32, GLEnum,, void>)Load("glGetActiveAtomicCounterBufferiv", 490))(program, bufferIndex, pname, params);
        }

        public partial void GetActiveAtomicCounterBuffer(uint program, uint bufferIndex, GLEnum pname, out int @params)
        {
            ((delegate *cdecl<UInt32, UInt32, GLEnum, Int32, void>)Load("glGetActiveAtomicCounterBufferiv", 491))(program, bufferIndex, pname, params);
        }

        public unsafe partial void GetInternalformat(GLEnum target, GLEnum internalformat, GLEnum pname, uint count, int *@params)
        {
            ((delegate *cdecl<GLEnum, GLEnum, GLEnum, UInt32,, void>)Load("glGetInternalformativ", 492))(target, internalformat, pname, count, params);
        }

        public partial void GetInternalformat(GLEnum target, GLEnum internalformat, GLEnum pname, uint count, Span<int> @params)
        {
            ((delegate *cdecl<GLEnum, GLEnum, GLEnum, UInt32, Span, void>)Load("glGetInternalformativ", 493))(target, internalformat, pname, count, params);
        }

        public partial void MemoryBarrier(uint barriers)
        {
            ((delegate *cdecl<UInt32, void>)Load("glMemoryBarrier", 494))(barriers);
        }

        public partial void TexStorage1D(GLEnum target, uint levels, GLEnum internalformat, uint width)
        {
            ((delegate *cdecl<GLEnum, UInt32, GLEnum, UInt32, void>)Load("glTexStorage1D", 495))(target, levels, internalformat, width);
        }

        public partial void TexStorage2D(GLEnum target, uint levels, GLEnum internalformat, uint width, uint height)
        {
            ((delegate *cdecl<GLEnum, UInt32, GLEnum, UInt32, UInt32, void>)Load("glTexStorage2D", 496))(target, levels, internalformat, width, height);
        }

        public partial void TexStorage3D(GLEnum target, uint levels, GLEnum internalformat, uint width, uint height, uint depth)
        {
            ((delegate *cdecl<GLEnum, UInt32, GLEnum, UInt32, UInt32, UInt32, void>)Load("glTexStorage3D", 497))(target, levels, internalformat, width, height, depth);
        }

        public partial void BindImageTexture(uint unit, uint texture, int level, bool layered, int layer, BufferAccessARB access, InternalFormat format)
        {
            ((delegate *cdecl<UInt32, UInt32, Int32, Boolean, Int32, BufferAccessARB, InternalFormat, void>)Load("glBindImageTexture", 498))(unit, texture, level, layered, layer, access, format);
        }

        public partial void DrawArraysInstancedBaseInstance(PrimitiveType mode, int first, uint count, uint instancecount, uint baseinstance)
        {
            ((delegate *cdecl<PrimitiveType, Int32, UInt32, UInt32, UInt32, void>)Load("glDrawArraysInstancedBaseInstance", 499))(mode, first, count, instancecount, baseinstance);
        }

        public unsafe partial void DrawElementsInstancedBaseInstance(PrimitiveType mode, uint count, PrimitiveType type, void *indices, uint instancecount, uint baseinstance)
        {
            ((delegate *cdecl<PrimitiveType, UInt32, PrimitiveType,, UInt32, UInt32, void>)Load("glDrawElementsInstancedBaseInstance", 500))(mode, count, type, indices, instancecount, baseinstance);
        }

        public partial void DrawElementsInstancedBaseInstance<T0>(PrimitiveType mode, uint count, PrimitiveType type, Span<T0> indices, uint instancecount, uint baseinstance)
            where T0 : unmanaged
        {
            ((delegate *cdecl<PrimitiveType, UInt32, PrimitiveType, Span, UInt32, UInt32, void>)Load("glDrawElementsInstancedBaseInstance", 501))(mode, count, type, indices, instancecount, baseinstance);
        }

        public unsafe partial void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, uint count, DrawElementsType type, void *indices, uint instancecount, int basevertex, uint baseinstance)
        {
            ((delegate *cdecl<PrimitiveType, UInt32, DrawElementsType,, UInt32, Int32, UInt32, void>)Load("glDrawElementsInstancedBaseVertexBaseInstance", 502))(mode, count, type, indices, instancecount, basevertex, baseinstance);
        }

        public partial void DrawElementsInstancedBaseVertexBaseInstance<T0>(PrimitiveType mode, uint count, DrawElementsType type, Span<T0> indices, uint instancecount, int basevertex, uint baseinstance)
            where T0 : unmanaged
        {
            ((delegate *cdecl<PrimitiveType, UInt32, DrawElementsType, Span, UInt32, Int32, UInt32, void>)Load("glDrawElementsInstancedBaseVertexBaseInstance", 503))(mode, count, type, indices, instancecount, basevertex, baseinstance);
        }

        public partial void DrawTransformFeedbackInstanced(PrimitiveType mode, uint id, uint instancecount)
        {
            ((delegate *cdecl<PrimitiveType, UInt32, UInt32, void>)Load("glDrawTransformFeedbackInstanced", 504))(mode, id, instancecount);
        }

        public partial void DrawTransformFeedbackStreamInstanced(PrimitiveType mode, uint id, uint stream, uint instancecount)
        {
            ((delegate *cdecl<PrimitiveType, UInt32, UInt32, UInt32, void>)Load("glDrawTransformFeedbackStreamInstanced", 505))(mode, id, stream, instancecount);
        }

        public unsafe partial void GetActiveAtomicCounterBuffer(uint program, uint bufferIndex, AtomicCounterBufferPName pname, int *@params)
        {
            ((delegate *cdecl<UInt32, UInt32, AtomicCounterBufferPName,, void>)Load("glGetActiveAtomicCounterBufferiv", 506))(program, bufferIndex, pname, params);
        }

        public partial void GetActiveAtomicCounterBuffer(uint program, uint bufferIndex, AtomicCounterBufferPName pname, out int @params)
        {
            ((delegate *cdecl<UInt32, UInt32, AtomicCounterBufferPName, Int32, void>)Load("glGetActiveAtomicCounterBufferiv", 507))(program, bufferIndex, pname, params);
        }

        public unsafe partial void GetInternalformat(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, uint count, int *@params)
        {
            ((delegate *cdecl<TextureTarget, InternalFormat, InternalFormatPName, UInt32,, void>)Load("glGetInternalformativ", 508))(target, internalformat, pname, count, params);
        }

        public partial void GetInternalformat(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, uint count, Span<int> @params)
        {
            ((delegate *cdecl<TextureTarget, InternalFormat, InternalFormatPName, UInt32, Span, void>)Load("glGetInternalformativ", 509))(target, internalformat, pname, count, params);
        }

        public partial void TexStorage1D(TextureTarget target, uint levels, InternalFormat internalformat, uint width)
        {
            ((delegate *cdecl<TextureTarget, UInt32, InternalFormat, UInt32, void>)Load("glTexStorage1D", 510))(target, levels, internalformat, width);
        }

        public partial void TexStorage2D(TextureTarget target, uint levels, InternalFormat internalformat, uint width, uint height)
        {
            ((delegate *cdecl<TextureTarget, UInt32, InternalFormat, UInt32, UInt32, void>)Load("glTexStorage2D", 511))(target, levels, internalformat, width, height);
        }

        public partial void TexStorage3D(TextureTarget target, uint levels, InternalFormat internalformat, uint width, uint height, uint depth)
        {
            ((delegate *cdecl<TextureTarget, UInt32, InternalFormat, UInt32, UInt32, UInt32, void>)Load("glTexStorage3D", 512))(target, levels, internalformat, width, height, depth);
        }

        public partial void ActiveShaderProgram(uint pipeline, uint program)
        {
            ((delegate *cdecl<UInt32, UInt32, void>)Load("glActiveShaderProgram", 513))(pipeline, program);
        }

        public partial void BindProgramPipeline(uint pipeline)
        {
            ((delegate *cdecl<UInt32, void>)Load("glBindProgramPipeline", 514))(pipeline);
        }

        public partial void ClearDepth(float d)
        {
            ((delegate *cdecl<Single, void>)Load("glClearDepthf", 515))(d);
        }

        public unsafe partial void DeleteProgramPipelines(uint n, uint *pipelines)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glDeleteProgramPipelines", 517))(n, pipelines);
        }

        public partial void DeleteProgramPipelines(uint n, Span<uint> pipelines)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glDeleteProgramPipelines", 518))(n, pipelines);
        }

        public partial void DepthRange(float n, float f)
        {
            ((delegate *cdecl<Single, Single, void>)Load("glDepthRangef", 519))(n, f);
        }

        public unsafe partial void DepthRangeArray(uint first, uint count, double *v)
        {
            ((delegate *cdecl<UInt32, UInt32,, void>)Load("glDepthRangeArrayv", 520))(first, count, v);
        }

        public partial void DepthRangeArray(uint first, uint count, ref double v)
        {
            ((delegate *cdecl<UInt32, UInt32, Double, void>)Load("glDepthRangeArrayv", 521))(first, count, v);
        }

        public partial void DepthRangeIndexed(uint index, double n, double f)
        {
            ((delegate *cdecl<UInt32, Double, Double, void>)Load("glDepthRangeIndexed", 522))(index, n, f);
        }

        public unsafe partial void GenProgramPipelines(uint n, uint *pipelines)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glGenProgramPipelines", 523))(n, pipelines);
        }

        public partial void GenProgramPipelines(uint n, Span<uint> pipelines)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glGenProgramPipelines", 524))(n, pipelines);
        }

        public unsafe partial void GetDouble(GLEnum target, uint index, double *data)
        {
            ((delegate *cdecl<GLEnum, UInt32,, void>)Load("glGetDoublei_v", 525))(target, index, data);
        }

        public partial void GetDouble(GLEnum target, uint index, out double data)
        {
            ((delegate *cdecl<GLEnum, UInt32, Double, void>)Load("glGetDoublei_v", 526))(target, index, data);
        }

        public unsafe partial void GetFloat(GLEnum target, uint index, float *data)
        {
            ((delegate *cdecl<GLEnum, UInt32,, void>)Load("glGetFloati_v", 527))(target, index, data);
        }

        public partial void GetFloat(GLEnum target, uint index, out float data)
        {
            ((delegate *cdecl<GLEnum, UInt32, Single, void>)Load("glGetFloati_v", 528))(target, index, data);
        }

        public unsafe partial void GetProgramBinary(uint program, uint bufSize, uint *length, GLEnum*binaryFormat, void *binary)
        {
            ((delegate *cdecl<UInt32, UInt32,,,, void>)Load("glGetProgramBinary", 529))(program, bufSize, length, binaryFormat, binary);
        }

        public partial void GetProgramBinary<T0>(uint program, uint bufSize, out uint length, out GLEnum binaryFormat, Span<T0> binary)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, GLEnum, Span, void>)Load("glGetProgramBinary", 530))(program, bufSize, length, binaryFormat, binary);
        }

        public unsafe partial void GetProgramPipeline(uint pipeline, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetProgramPipelineiv", 531))(pipeline, pname, params);
        }

        public partial void GetProgramPipeline(uint pipeline, GLEnum pname, out int @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, Int32, void>)Load("glGetProgramPipelineiv", 532))(pipeline, pname, params);
        }

        public unsafe partial void GetProgramPipelineInfoLog(uint pipeline, uint bufSize, uint *length, byte *infoLog)
        {
            ((delegate *cdecl<UInt32, UInt32,,, void>)Load("glGetProgramPipelineInfoLog", 533))(pipeline, bufSize, length, infoLog);
        }

        public partial void GetProgramPipelineInfoLog(uint pipeline, uint bufSize, out uint length, Span<byte> infoLog)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, Span, void>)Load("glGetProgramPipelineInfoLog", 534))(pipeline, bufSize, length, infoLog);
        }

        public unsafe partial void GetShaderPrecisionFormat(GLEnum shadertype, GLEnum precisiontype, int *range, int *precision)
        {
            ((delegate *cdecl<GLEnum, GLEnum,,, void>)Load("glGetShaderPrecisionFormat", 535))(shadertype, precisiontype, range, precision);
        }

        public partial void GetShaderPrecisionFormat(GLEnum shadertype, GLEnum precisiontype, Span<int> range, out int precision)
        {
            ((delegate *cdecl<GLEnum, GLEnum, Span, Int32, void>)Load("glGetShaderPrecisionFormat", 536))(shadertype, precisiontype, range, precision);
        }

        public unsafe partial void GetVertexAttribL(uint index, GLEnum pname, double *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetVertexAttribLdv", 537))(index, pname, params);
        }

        public partial void GetVertexAttribL(uint index, GLEnum pname, out double @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, Double, void>)Load("glGetVertexAttribLdv", 538))(index, pname, params);
        }

        public partial bool IsProgramPipeline(uint pipeline)
        {
            return ((delegate *cdecl<UInt32, byte>)Load("glIsProgramPipeline", 539))(pipeline) == 1;
        }

        public unsafe partial void ProgramBinary(uint program, GLEnum binaryFormat, void *binary, uint length)
        {
            ((delegate *cdecl<UInt32, GLEnum,, UInt32, void>)Load("glProgramBinary", 540))(program, binaryFormat, binary, length);
        }

        public partial void ProgramBinary<T0>(uint program, GLEnum binaryFormat, Span<T0> binary, uint length)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, GLEnum, Span, UInt32, void>)Load("glProgramBinary", 541))(program, binaryFormat, binary, length);
        }

        public partial void ProgramParameter(uint program, GLEnum pname, int value)
        {
            ((delegate *cdecl<UInt32, GLEnum, Int32, void>)Load("glProgramParameteri", 542))(program, pname, value);
        }

        public partial void ProgramUniform1(uint program, int location, int v0)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, void>)Load("glProgramUniform1i", 543))(program, location, v0);
        }

        public unsafe partial void ProgramUniform1(uint program, int location, uint count, int *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32,, void>)Load("glProgramUniform1iv", 544))(program, location, count, value);
        }

        public partial void ProgramUniform1(uint program, int location, uint count, Span<int> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Span, void>)Load("glProgramUniform1iv", 545))(program, location, count, value);
        }

        public partial void ProgramUniform1(uint program, int location, float v0)
        {
            ((delegate *cdecl<UInt32, Int32, Single, void>)Load("glProgramUniform1f", 546))(program, location, v0);
        }

        public unsafe partial void ProgramUniform1(uint program, int location, uint count, float *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32,, void>)Load("glProgramUniform1fv", 547))(program, location, count, value);
        }

        public partial void ProgramUniform1(uint program, int location, uint count, Span<float> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Span, void>)Load("glProgramUniform1fv", 548))(program, location, count, value);
        }

        public partial void ProgramUniform1(uint program, int location, double v0)
        {
            ((delegate *cdecl<UInt32, Int32, Double, void>)Load("glProgramUniform1d", 549))(program, location, v0);
        }

        public unsafe partial void ProgramUniform1(uint program, int location, uint count, double *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32,, void>)Load("glProgramUniform1dv", 550))(program, location, count, value);
        }

        public partial void ProgramUniform1(uint program, int location, uint count, Span<double> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Span, void>)Load("glProgramUniform1dv", 551))(program, location, count, value);
        }

        public partial void ProgramUniform1(uint program, int location, uint v0)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, void>)Load("glProgramUniform1ui", 552))(program, location, v0);
        }

        public unsafe partial void ProgramUniform1(uint program, int location, uint count, uint *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32,, void>)Load("glProgramUniform1uiv", 553))(program, location, count, value);
        }

        public partial void ProgramUniform1(uint program, int location, uint count, Span<uint> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Span, void>)Load("glProgramUniform1uiv", 554))(program, location, count, value);
        }

        public partial void ProgramUniform2(uint program, int location, int v0, int v1)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, void>)Load("glProgramUniform2i", 555))(program, location, v0, v1);
        }

        public unsafe partial void ProgramUniform2(uint program, int location, uint count, int *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32,, void>)Load("glProgramUniform2iv", 556))(program, location, count, value);
        }

        public partial void ProgramUniform2(uint program, int location, uint count, Span<int> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Span, void>)Load("glProgramUniform2iv", 557))(program, location, count, value);
        }

        public partial void ProgramUniform2(uint program, int location, float v0, float v1)
        {
            ((delegate *cdecl<UInt32, Int32, Single, Single, void>)Load("glProgramUniform2f", 558))(program, location, v0, v1);
        }

        public unsafe partial void ProgramUniform2(uint program, int location, uint count, float *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32,, void>)Load("glProgramUniform2fv", 559))(program, location, count, value);
        }

        public partial void ProgramUniform2(uint program, int location, uint count, Span<float> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Span, void>)Load("glProgramUniform2fv", 560))(program, location, count, value);
        }

        public partial void ProgramUniform2(uint program, int location, double v0, double v1)
        {
            ((delegate *cdecl<UInt32, Int32, Double, Double, void>)Load("glProgramUniform2d", 561))(program, location, v0, v1);
        }

        public unsafe partial void ProgramUniform2(uint program, int location, uint count, double *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32,, void>)Load("glProgramUniform2dv", 562))(program, location, count, value);
        }

        public partial void ProgramUniform2(uint program, int location, uint count, Span<double> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Span, void>)Load("glProgramUniform2dv", 563))(program, location, count, value);
        }

        public partial void ProgramUniform2(uint program, int location, uint v0, uint v1)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, UInt32, void>)Load("glProgramUniform2ui", 564))(program, location, v0, v1);
        }

        public unsafe partial void ProgramUniform2(uint program, int location, uint count, uint *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32,, void>)Load("glProgramUniform2uiv", 565))(program, location, count, value);
        }

        public partial void ProgramUniform2(uint program, int location, uint count, Span<uint> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Span, void>)Load("glProgramUniform2uiv", 566))(program, location, count, value);
        }

        public partial void ProgramUniform3(uint program, int location, int v0, int v1, int v2)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, Int32, void>)Load("glProgramUniform3i", 567))(program, location, v0, v1, v2);
        }

        public unsafe partial void ProgramUniform3(uint program, int location, uint count, int *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32,, void>)Load("glProgramUniform3iv", 568))(program, location, count, value);
        }

        public partial void ProgramUniform3(uint program, int location, uint count, Span<int> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Span, void>)Load("glProgramUniform3iv", 569))(program, location, count, value);
        }

        public partial void ProgramUniform3(uint program, int location, float v0, float v1, float v2)
        {
            ((delegate *cdecl<UInt32, Int32, Single, Single, Single, void>)Load("glProgramUniform3f", 570))(program, location, v0, v1, v2);
        }

        public unsafe partial void ProgramUniform3(uint program, int location, uint count, float *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32,, void>)Load("glProgramUniform3fv", 571))(program, location, count, value);
        }

        public partial void ProgramUniform3(uint program, int location, uint count, Span<float> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Span, void>)Load("glProgramUniform3fv", 572))(program, location, count, value);
        }

        public partial void ProgramUniform3(uint program, int location, double v0, double v1, double v2)
        {
            ((delegate *cdecl<UInt32, Int32, Double, Double, Double, void>)Load("glProgramUniform3d", 573))(program, location, v0, v1, v2);
        }

        public unsafe partial void ProgramUniform3(uint program, int location, uint count, double *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32,, void>)Load("glProgramUniform3dv", 574))(program, location, count, value);
        }

        public partial void ProgramUniform3(uint program, int location, uint count, Span<double> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Span, void>)Load("glProgramUniform3dv", 575))(program, location, count, value);
        }

        public partial void ProgramUniform3(uint program, int location, uint v0, uint v1, uint v2)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, UInt32, UInt32, void>)Load("glProgramUniform3ui", 576))(program, location, v0, v1, v2);
        }

        public unsafe partial void ProgramUniform3(uint program, int location, uint count, uint *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32,, void>)Load("glProgramUniform3uiv", 577))(program, location, count, value);
        }

        public partial void ProgramUniform3(uint program, int location, uint count, Span<uint> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Span, void>)Load("glProgramUniform3uiv", 578))(program, location, count, value);
        }

        public partial void ProgramUniform4(uint program, int location, int v0, int v1, int v2, int v3)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, Int32, Int32, void>)Load("glProgramUniform4i", 579))(program, location, v0, v1, v2, v3);
        }

        public unsafe partial void ProgramUniform4(uint program, int location, uint count, int *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32,, void>)Load("glProgramUniform4iv", 580))(program, location, count, value);
        }

        public partial void ProgramUniform4(uint program, int location, uint count, Span<int> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Span, void>)Load("glProgramUniform4iv", 581))(program, location, count, value);
        }

        public partial void ProgramUniform4(uint program, int location, float v0, float v1, float v2, float v3)
        {
            ((delegate *cdecl<UInt32, Int32, Single, Single, Single, Single, void>)Load("glProgramUniform4f", 582))(program, location, v0, v1, v2, v3);
        }

        public unsafe partial void ProgramUniform4(uint program, int location, uint count, float *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32,, void>)Load("glProgramUniform4fv", 583))(program, location, count, value);
        }

        public partial void ProgramUniform4(uint program, int location, uint count, Span<float> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Span, void>)Load("glProgramUniform4fv", 584))(program, location, count, value);
        }

        public partial void ProgramUniform4(uint program, int location, double v0, double v1, double v2, double v3)
        {
            ((delegate *cdecl<UInt32, Int32, Double, Double, Double, Double, void>)Load("glProgramUniform4d", 585))(program, location, v0, v1, v2, v3);
        }

        public unsafe partial void ProgramUniform4(uint program, int location, uint count, double *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32,, void>)Load("glProgramUniform4dv", 586))(program, location, count, value);
        }

        public partial void ProgramUniform4(uint program, int location, uint count, Span<double> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Span, void>)Load("glProgramUniform4dv", 587))(program, location, count, value);
        }

        public partial void ProgramUniform4(uint program, int location, uint v0, uint v1, uint v2, uint v3)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, UInt32, UInt32, UInt32, void>)Load("glProgramUniform4ui", 588))(program, location, v0, v1, v2, v3);
        }

        public unsafe partial void ProgramUniform4(uint program, int location, uint count, uint *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32,, void>)Load("glProgramUniform4uiv", 589))(program, location, count, value);
        }

        public partial void ProgramUniform4(uint program, int location, uint count, Span<uint> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Span, void>)Load("glProgramUniform4uiv", 590))(program, location, count, value);
        }

        public unsafe partial void ProgramUniformMatrix2(uint program, int location, uint count, bool transpose, float *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean,, void>)Load("glProgramUniformMatrix2fv", 591))(program, location, count, transpose, value);
        }

        public partial void ProgramUniformMatrix2(uint program, int location, uint count, bool transpose, Span<float> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean, Span, void>)Load("glProgramUniformMatrix2fv", 592))(program, location, count, transpose, value);
        }

        public unsafe partial void ProgramUniformMatrix2(uint program, int location, uint count, bool transpose, double *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean,, void>)Load("glProgramUniformMatrix2dv", 593))(program, location, count, transpose, value);
        }

        public partial void ProgramUniformMatrix2(uint program, int location, uint count, bool transpose, Span<double> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean, Span, void>)Load("glProgramUniformMatrix2dv", 594))(program, location, count, transpose, value);
        }

        public unsafe partial void ProgramUniformMatrix2x3(uint program, int location, uint count, bool transpose, float *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean,, void>)Load("glProgramUniformMatrix2x3fv", 595))(program, location, count, transpose, value);
        }

        public partial void ProgramUniformMatrix2x3(uint program, int location, uint count, bool transpose, Span<float> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean, Span, void>)Load("glProgramUniformMatrix2x3fv", 596))(program, location, count, transpose, value);
        }

        public unsafe partial void ProgramUniformMatrix2x3(uint program, int location, uint count, bool transpose, double *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean,, void>)Load("glProgramUniformMatrix2x3dv", 597))(program, location, count, transpose, value);
        }

        public partial void ProgramUniformMatrix2x3(uint program, int location, uint count, bool transpose, Span<double> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean, Span, void>)Load("glProgramUniformMatrix2x3dv", 598))(program, location, count, transpose, value);
        }

        public unsafe partial void ProgramUniformMatrix2x4(uint program, int location, uint count, bool transpose, float *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean,, void>)Load("glProgramUniformMatrix2x4fv", 599))(program, location, count, transpose, value);
        }

        public partial void ProgramUniformMatrix2x4(uint program, int location, uint count, bool transpose, Span<float> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean, Span, void>)Load("glProgramUniformMatrix2x4fv", 600))(program, location, count, transpose, value);
        }

        public unsafe partial void ProgramUniformMatrix2x4(uint program, int location, uint count, bool transpose, double *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean,, void>)Load("glProgramUniformMatrix2x4dv", 601))(program, location, count, transpose, value);
        }

        public partial void ProgramUniformMatrix2x4(uint program, int location, uint count, bool transpose, Span<double> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean, Span, void>)Load("glProgramUniformMatrix2x4dv", 602))(program, location, count, transpose, value);
        }

        public unsafe partial void ProgramUniformMatrix3(uint program, int location, uint count, bool transpose, float *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean,, void>)Load("glProgramUniformMatrix3fv", 603))(program, location, count, transpose, value);
        }

        public partial void ProgramUniformMatrix3(uint program, int location, uint count, bool transpose, Span<float> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean, Span, void>)Load("glProgramUniformMatrix3fv", 604))(program, location, count, transpose, value);
        }

        public unsafe partial void ProgramUniformMatrix3(uint program, int location, uint count, bool transpose, double *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean,, void>)Load("glProgramUniformMatrix3dv", 605))(program, location, count, transpose, value);
        }

        public partial void ProgramUniformMatrix3(uint program, int location, uint count, bool transpose, Span<double> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean, Span, void>)Load("glProgramUniformMatrix3dv", 606))(program, location, count, transpose, value);
        }

        public unsafe partial void ProgramUniformMatrix3x2(uint program, int location, uint count, bool transpose, float *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean,, void>)Load("glProgramUniformMatrix3x2fv", 607))(program, location, count, transpose, value);
        }

        public partial void ProgramUniformMatrix3x2(uint program, int location, uint count, bool transpose, Span<float> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean, Span, void>)Load("glProgramUniformMatrix3x2fv", 608))(program, location, count, transpose, value);
        }

        public unsafe partial void ProgramUniformMatrix3x2(uint program, int location, uint count, bool transpose, double *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean,, void>)Load("glProgramUniformMatrix3x2dv", 609))(program, location, count, transpose, value);
        }

        public partial void ProgramUniformMatrix3x2(uint program, int location, uint count, bool transpose, Span<double> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean, Span, void>)Load("glProgramUniformMatrix3x2dv", 610))(program, location, count, transpose, value);
        }

        public unsafe partial void ProgramUniformMatrix3x4(uint program, int location, uint count, bool transpose, float *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean,, void>)Load("glProgramUniformMatrix3x4fv", 611))(program, location, count, transpose, value);
        }

        public partial void ProgramUniformMatrix3x4(uint program, int location, uint count, bool transpose, Span<float> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean, Span, void>)Load("glProgramUniformMatrix3x4fv", 612))(program, location, count, transpose, value);
        }

        public unsafe partial void ProgramUniformMatrix3x4(uint program, int location, uint count, bool transpose, double *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean,, void>)Load("glProgramUniformMatrix3x4dv", 613))(program, location, count, transpose, value);
        }

        public partial void ProgramUniformMatrix3x4(uint program, int location, uint count, bool transpose, Span<double> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean, Span, void>)Load("glProgramUniformMatrix3x4dv", 614))(program, location, count, transpose, value);
        }

        public unsafe partial void ProgramUniformMatrix4(uint program, int location, uint count, bool transpose, float *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean,, void>)Load("glProgramUniformMatrix4fv", 615))(program, location, count, transpose, value);
        }

        public partial void ProgramUniformMatrix4(uint program, int location, uint count, bool transpose, Span<float> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean, Span, void>)Load("glProgramUniformMatrix4fv", 616))(program, location, count, transpose, value);
        }

        public unsafe partial void ProgramUniformMatrix4(uint program, int location, uint count, bool transpose, double *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean,, void>)Load("glProgramUniformMatrix4dv", 617))(program, location, count, transpose, value);
        }

        public partial void ProgramUniformMatrix4(uint program, int location, uint count, bool transpose, Span<double> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean, Span, void>)Load("glProgramUniformMatrix4dv", 618))(program, location, count, transpose, value);
        }

        public unsafe partial void ProgramUniformMatrix4x2(uint program, int location, uint count, bool transpose, float *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean,, void>)Load("glProgramUniformMatrix4x2fv", 619))(program, location, count, transpose, value);
        }

        public partial void ProgramUniformMatrix4x2(uint program, int location, uint count, bool transpose, Span<float> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean, Span, void>)Load("glProgramUniformMatrix4x2fv", 620))(program, location, count, transpose, value);
        }

        public unsafe partial void ProgramUniformMatrix4x2(uint program, int location, uint count, bool transpose, double *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean,, void>)Load("glProgramUniformMatrix4x2dv", 621))(program, location, count, transpose, value);
        }

        public partial void ProgramUniformMatrix4x2(uint program, int location, uint count, bool transpose, Span<double> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean, Span, void>)Load("glProgramUniformMatrix4x2dv", 622))(program, location, count, transpose, value);
        }

        public unsafe partial void ProgramUniformMatrix4x3(uint program, int location, uint count, bool transpose, float *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean,, void>)Load("glProgramUniformMatrix4x3fv", 623))(program, location, count, transpose, value);
        }

        public partial void ProgramUniformMatrix4x3(uint program, int location, uint count, bool transpose, Span<float> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean, Span, void>)Load("glProgramUniformMatrix4x3fv", 624))(program, location, count, transpose, value);
        }

        public unsafe partial void ProgramUniformMatrix4x3(uint program, int location, uint count, bool transpose, double *value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean,, void>)Load("glProgramUniformMatrix4x3dv", 625))(program, location, count, transpose, value);
        }

        public partial void ProgramUniformMatrix4x3(uint program, int location, uint count, bool transpose, Span<double> value)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, Boolean, Span, void>)Load("glProgramUniformMatrix4x3dv", 626))(program, location, count, transpose, value);
        }

        public partial void ReleaseShaderCompiler()
        {
            ((delegate *cdecl<void>)Load("glReleaseShaderCompiler", 627))();
        }

        public unsafe partial void ScissorArray(uint first, uint count, int *v)
        {
            ((delegate *cdecl<UInt32, UInt32,, void>)Load("glScissorArrayv", 628))(first, count, v);
        }

        public partial void ScissorArray(uint first, uint count, ref int v)
        {
            ((delegate *cdecl<UInt32, UInt32, Int32, void>)Load("glScissorArrayv", 629))(first, count, v);
        }

        public partial void ScissorIndexed(uint index, int left, int bottom, uint width, uint height)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, UInt32, UInt32, void>)Load("glScissorIndexed", 630))(index, left, bottom, width, height);
        }

        public unsafe partial void ScissorIndexed(uint index, int *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glScissorIndexedv", 631))(index, v);
        }

        public partial void ScissorIndexed(uint index, Span<int> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glScissorIndexedv", 632))(index, v);
        }

        public unsafe partial void ShaderBinary(uint count, uint *shaders, GLEnum binaryformat, void *binary, uint length)
        {
            ((delegate *cdecl<UInt32,, GLEnum,, UInt32, void>)Load("glShaderBinary", 633))(count, shaders, binaryformat, binary, length);
        }

        public partial void ShaderBinary<T0>(uint count, Span<uint> shaders, GLEnum binaryformat, Span<T0> binary, uint length)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Span, GLEnum, Span, UInt32, void>)Load("glShaderBinary", 634))(count, shaders, binaryformat, binary, length);
        }

        public partial void UseProgramStages(uint pipeline, uint stages, uint program)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, void>)Load("glUseProgramStages", 635))(pipeline, stages, program);
        }

        public partial void ValidateProgramPipeline(uint pipeline)
        {
            ((delegate *cdecl<UInt32, void>)Load("glValidateProgramPipeline", 636))(pipeline);
        }

        public partial void VertexAttribL1(uint index, double x)
        {
            ((delegate *cdecl<UInt32, Double, void>)Load("glVertexAttribL1d", 637))(index, x);
        }

        public unsafe partial void VertexAttribL1(uint index, double *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttribL1dv", 638))(index, v);
        }

        public partial void VertexAttribL1(uint index, ref double v)
        {
            ((delegate *cdecl<UInt32, Double, void>)Load("glVertexAttribL1dv", 639))(index, v);
        }

        public partial void VertexAttribL2(uint index, double x, double y)
        {
            ((delegate *cdecl<UInt32, Double, Double, void>)Load("glVertexAttribL2d", 640))(index, x, y);
        }

        public unsafe partial void VertexAttribL2(uint index, double *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttribL2dv", 641))(index, v);
        }

        public partial void VertexAttribL2(uint index, Span<double> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttribL2dv", 642))(index, v);
        }

        public partial void VertexAttribL3(uint index, double x, double y, double z)
        {
            ((delegate *cdecl<UInt32, Double, Double, Double, void>)Load("glVertexAttribL3d", 643))(index, x, y, z);
        }

        public unsafe partial void VertexAttribL3(uint index, double *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttribL3dv", 644))(index, v);
        }

        public partial void VertexAttribL3(uint index, Span<double> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttribL3dv", 645))(index, v);
        }

        public partial void VertexAttribL4(uint index, double x, double y, double z, double w)
        {
            ((delegate *cdecl<UInt32, Double, Double, Double, Double, void>)Load("glVertexAttribL4d", 646))(index, x, y, z, w);
        }

        public unsafe partial void VertexAttribL4(uint index, double *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttribL4dv", 647))(index, v);
        }

        public partial void VertexAttribL4(uint index, Span<double> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttribL4dv", 648))(index, v);
        }

        public unsafe partial void VertexAttribLPointer(uint index, int size, GLEnum type, uint stride, void *pointer)
        {
            ((delegate *cdecl<UInt32, Int32, GLEnum, UInt32,, void>)Load("glVertexAttribLPointer", 649))(index, size, type, stride, pointer);
        }

        public partial void VertexAttribLPointer<T0>(uint index, int size, GLEnum type, uint stride, Span<T0> pointer)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, GLEnum, UInt32, Span, void>)Load("glVertexAttribLPointer", 650))(index, size, type, stride, pointer);
        }

        public unsafe partial void ViewportArray(uint first, uint count, float *v)
        {
            ((delegate *cdecl<UInt32, UInt32,, void>)Load("glViewportArrayv", 651))(first, count, v);
        }

        public partial void ViewportArray(uint first, uint count, ref float v)
        {
            ((delegate *cdecl<UInt32, UInt32, Single, void>)Load("glViewportArrayv", 652))(first, count, v);
        }

        public partial void ViewportIndexed(uint index, float x, float y, float w, float h)
        {
            ((delegate *cdecl<UInt32, Single, Single, Single, Single, void>)Load("glViewportIndexedf", 653))(index, x, y, w, h);
        }

        public unsafe partial void ViewportIndexed(uint index, float *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glViewportIndexedfv", 654))(index, v);
        }

        public partial void ViewportIndexed(uint index, Span<float> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glViewportIndexedfv", 655))(index, v);
        }

        public unsafe partial void GetProgramPipeline(uint pipeline, PipelineParameterName pname, int *@params)
        {
            ((delegate *cdecl<UInt32, PipelineParameterName,, void>)Load("glGetProgramPipelineiv", 657))(pipeline, pname, params);
        }

        public partial void GetProgramPipeline(uint pipeline, PipelineParameterName pname, out int @params)
        {
            ((delegate *cdecl<UInt32, PipelineParameterName, Int32, void>)Load("glGetProgramPipelineiv", 658))(pipeline, pname, params);
        }

        public unsafe partial void GetProgramPipelineInfoLog(uint pipeline, uint bufSize, uint *length, out string infoLog)
        {
            ((delegate *cdecl<UInt32, UInt32,, String, void>)Load("glGetProgramPipelineInfoLog", 659))(pipeline, bufSize, length, infoLog);
        }

        public partial void GetProgramPipelineInfoLog(uint pipeline, uint bufSize, out uint length, out string infoLog)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, String, void>)Load("glGetProgramPipelineInfoLog", 660))(pipeline, bufSize, length, infoLog);
        }

        public unsafe partial void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, int *range, int *precision)
        {
            ((delegate *cdecl<ShaderType, PrecisionType,,, void>)Load("glGetShaderPrecisionFormat", 661))(shadertype, precisiontype, range, precision);
        }

        public partial void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, Span<int> range, out int precision)
        {
            ((delegate *cdecl<ShaderType, PrecisionType, Span, Int32, void>)Load("glGetShaderPrecisionFormat", 662))(shadertype, precisiontype, range, precision);
        }

        public unsafe partial void GetVertexAttribL(uint index, VertexAttribEnum pname, double *@params)
        {
            ((delegate *cdecl<UInt32, VertexAttribEnum,, void>)Load("glGetVertexAttribLdv", 663))(index, pname, params);
        }

        public partial void GetVertexAttribL(uint index, VertexAttribEnum pname, out double @params)
        {
            ((delegate *cdecl<UInt32, VertexAttribEnum, Double, void>)Load("glGetVertexAttribLdv", 664))(index, pname, params);
        }

        public partial void ProgramParameter(uint program, ProgramParameterPName pname, int value)
        {
            ((delegate *cdecl<UInt32, ProgramParameterPName, Int32, void>)Load("glProgramParameteri", 665))(program, pname, value);
        }

        public unsafe partial void VertexAttribLPointer(uint index, int size, VertexAttribLType type, uint stride, void *pointer)
        {
            ((delegate *cdecl<UInt32, Int32, VertexAttribLType, UInt32,, void>)Load("glVertexAttribLPointer", 666))(index, size, type, stride, pointer);
        }

        public partial void VertexAttribLPointer<T0>(uint index, int size, VertexAttribLType type, uint stride, Span<T0> pointer)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, VertexAttribLType, UInt32, Span, void>)Load("glVertexAttribLPointer", 667))(index, size, type, stride, pointer);
        }

        public partial void BeginQueryIndexed(GLEnum target, uint index, uint id)
        {
            ((delegate *cdecl<GLEnum, UInt32, UInt32, void>)Load("glBeginQueryIndexed", 668))(target, index, id);
        }

        public partial void BindTransformFeedback(GLEnum target, uint id)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glBindTransformFeedback", 669))(target, id);
        }

        public partial void BlendEquation(uint buf, GLEnum mode)
        {
            ((delegate *cdecl<UInt32, GLEnum, void>)Load("glBlendEquationi", 670))(buf, mode);
        }

        public partial void BlendEquationSeparate(uint buf, GLEnum modeRGB, GLEnum modeAlpha)
        {
            ((delegate *cdecl<UInt32, GLEnum, GLEnum, void>)Load("glBlendEquationSeparatei", 671))(buf, modeRGB, modeAlpha);
        }

        public partial void BlendFunc(uint buf, GLEnum src, GLEnum dst)
        {
            ((delegate *cdecl<UInt32, GLEnum, GLEnum, void>)Load("glBlendFunci", 672))(buf, src, dst);
        }

        public partial void BlendFuncSeparate(uint buf, GLEnum srcRGB, GLEnum dstRGB, GLEnum srcAlpha, GLEnum dstAlpha)
        {
            ((delegate *cdecl<UInt32, GLEnum, GLEnum, GLEnum, GLEnum, void>)Load("glBlendFuncSeparatei", 673))(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }

        public unsafe partial void DeleteTransformFeedbacks(uint n, uint *ids)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glDeleteTransformFeedbacks", 674))(n, ids);
        }

        public partial void DeleteTransformFeedbacks(uint n, Span<uint> ids)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glDeleteTransformFeedbacks", 675))(n, ids);
        }

        public unsafe partial void DrawArraysIndirect(GLEnum mode, void *indirect)
        {
            ((delegate *cdecl<GLEnum,, void>)Load("glDrawArraysIndirect", 676))(mode, indirect);
        }

        public partial void DrawArraysIndirect<T0>(GLEnum mode, Span<T0> indirect)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, Span, void>)Load("glDrawArraysIndirect", 677))(mode, indirect);
        }

        public unsafe partial void DrawElementsIndirect(GLEnum mode, GLEnum type, void *indirect)
        {
            ((delegate *cdecl<GLEnum, GLEnum,, void>)Load("glDrawElementsIndirect", 678))(mode, type, indirect);
        }

        public partial void DrawElementsIndirect<T0>(GLEnum mode, GLEnum type, Span<T0> indirect)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, GLEnum, Span, void>)Load("glDrawElementsIndirect", 679))(mode, type, indirect);
        }

        public partial void DrawTransformFeedback(GLEnum mode, uint id)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glDrawTransformFeedback", 680))(mode, id);
        }

        public partial void DrawTransformFeedbackStream(GLEnum mode, uint id, uint stream)
        {
            ((delegate *cdecl<GLEnum, UInt32, UInt32, void>)Load("glDrawTransformFeedbackStream", 681))(mode, id, stream);
        }

        public partial void EndQueryIndexed(GLEnum target, uint index)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glEndQueryIndexed", 682))(target, index);
        }

        public unsafe partial void GenTransformFeedbacks(uint n, uint *ids)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glGenTransformFeedbacks", 683))(n, ids);
        }

        public partial void GenTransformFeedbacks(uint n, Span<uint> ids)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glGenTransformFeedbacks", 684))(n, ids);
        }

        public unsafe partial void GetActiveSubroutineName(uint program, GLEnum shadertype, uint index, uint bufSize, uint *length, byte *name)
        {
            ((delegate *cdecl<UInt32, GLEnum, UInt32, UInt32,,, void>)Load("glGetActiveSubroutineName", 685))(program, shadertype, index, bufSize, length, name);
        }

        public partial void GetActiveSubroutineName(uint program, GLEnum shadertype, uint index, uint bufSize, out uint length, Span<byte> name)
        {
            ((delegate *cdecl<UInt32, GLEnum, UInt32, UInt32, UInt32, Span, void>)Load("glGetActiveSubroutineName", 686))(program, shadertype, index, bufSize, length, name);
        }

        public unsafe partial void GetActiveSubroutineUniform(uint program, GLEnum shadertype, uint index, GLEnum pname, int *values)
        {
            ((delegate *cdecl<UInt32, GLEnum, UInt32, GLEnum,, void>)Load("glGetActiveSubroutineUniformiv", 687))(program, shadertype, index, pname, values);
        }

        public partial void GetActiveSubroutineUniform(uint program, GLEnum shadertype, uint index, GLEnum pname, out int values)
        {
            ((delegate *cdecl<UInt32, GLEnum, UInt32, GLEnum, Int32, void>)Load("glGetActiveSubroutineUniformiv", 688))(program, shadertype, index, pname, values);
        }

        public unsafe partial void GetActiveSubroutineUniformName(uint program, GLEnum shadertype, uint index, uint bufSize, uint *length, byte *name)
        {
            ((delegate *cdecl<UInt32, GLEnum, UInt32, UInt32,,, void>)Load("glGetActiveSubroutineUniformName", 689))(program, shadertype, index, bufSize, length, name);
        }

        public partial void GetActiveSubroutineUniformName(uint program, GLEnum shadertype, uint index, uint bufSize, out uint length, Span<byte> name)
        {
            ((delegate *cdecl<UInt32, GLEnum, UInt32, UInt32, UInt32, Span, void>)Load("glGetActiveSubroutineUniformName", 690))(program, shadertype, index, bufSize, length, name);
        }

        public unsafe partial void GetProgramStage(uint program, GLEnum shadertype, GLEnum pname, int *values)
        {
            ((delegate *cdecl<UInt32, GLEnum, GLEnum,, void>)Load("glGetProgramStageiv", 691))(program, shadertype, pname, values);
        }

        public partial void GetProgramStage(uint program, GLEnum shadertype, GLEnum pname, out int values)
        {
            ((delegate *cdecl<UInt32, GLEnum, GLEnum, Int32, void>)Load("glGetProgramStageiv", 692))(program, shadertype, pname, values);
        }

        public unsafe partial void GetQueryIndexed(GLEnum target, uint index, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<GLEnum, UInt32, GLEnum,, void>)Load("glGetQueryIndexediv", 693))(target, index, pname, params);
        }

        public partial void GetQueryIndexed(GLEnum target, uint index, GLEnum pname, out int @params)
        {
            ((delegate *cdecl<GLEnum, UInt32, GLEnum, Int32, void>)Load("glGetQueryIndexediv", 694))(target, index, pname, params);
        }

        public unsafe partial void GetUniform(uint program, int location, double *@params)
        {
            ((delegate *cdecl<UInt32, Int32,, void>)Load("glGetUniformdv", 699))(program, location, params);
        }

        public partial void GetUniform(uint program, int location, out double @params)
        {
            ((delegate *cdecl<UInt32, Int32, Double, void>)Load("glGetUniformdv", 700))(program, location, params);
        }

        public unsafe partial void GetUniformSubroutine(GLEnum shadertype, int location, uint *@params)
        {
            ((delegate *cdecl<GLEnum, Int32,, void>)Load("glGetUniformSubroutineuiv", 701))(shadertype, location, params);
        }

        public partial void GetUniformSubroutine(GLEnum shadertype, int location, out uint @params)
        {
            ((delegate *cdecl<GLEnum, Int32, UInt32, void>)Load("glGetUniformSubroutineuiv", 702))(shadertype, location, params);
        }

        public partial bool IsTransformFeedback(uint id)
        {
            return ((delegate *cdecl<UInt32, byte>)Load("glIsTransformFeedback", 703))(id) == 1;
        }

        public partial void MinSampleShading(float value)
        {
            ((delegate *cdecl<Single, void>)Load("glMinSampleShading", 704))(value);
        }

        public partial void PatchParameter(GLEnum pname, int value)
        {
            ((delegate *cdecl<GLEnum, Int32, void>)Load("glPatchParameteri", 705))(pname, value);
        }

        public unsafe partial void PatchParameter(GLEnum pname, float *values)
        {
            ((delegate *cdecl<GLEnum,, void>)Load("glPatchParameterfv", 706))(pname, values);
        }

        public partial void PatchParameter(GLEnum pname, ref float values)
        {
            ((delegate *cdecl<GLEnum, Single, void>)Load("glPatchParameterfv", 707))(pname, values);
        }

        public partial void PauseTransformFeedback()
        {
            ((delegate *cdecl<void>)Load("glPauseTransformFeedback", 708))();
        }

        public partial void ResumeTransformFeedback()
        {
            ((delegate *cdecl<void>)Load("glResumeTransformFeedback", 709))();
        }

        public partial void Uniform1(int location, double x)
        {
            ((delegate *cdecl<Int32, Double, void>)Load("glUniform1d", 710))(location, x);
        }

        public unsafe partial void Uniform1(int location, uint count, double *value)
        {
            ((delegate *cdecl<Int32, UInt32,, void>)Load("glUniform1dv", 711))(location, count, value);
        }

        public partial void Uniform1(int location, uint count, Span<double> value)
        {
            ((delegate *cdecl<Int32, UInt32, Span, void>)Load("glUniform1dv", 712))(location, count, value);
        }

        public partial void Uniform2(int location, double x, double y)
        {
            ((delegate *cdecl<Int32, Double, Double, void>)Load("glUniform2d", 713))(location, x, y);
        }

        public unsafe partial void Uniform2(int location, uint count, double *value)
        {
            ((delegate *cdecl<Int32, UInt32,, void>)Load("glUniform2dv", 714))(location, count, value);
        }

        public partial void Uniform2(int location, uint count, Span<double> value)
        {
            ((delegate *cdecl<Int32, UInt32, Span, void>)Load("glUniform2dv", 715))(location, count, value);
        }

        public partial void Uniform3(int location, double x, double y, double z)
        {
            ((delegate *cdecl<Int32, Double, Double, Double, void>)Load("glUniform3d", 716))(location, x, y, z);
        }

        public unsafe partial void Uniform3(int location, uint count, double *value)
        {
            ((delegate *cdecl<Int32, UInt32,, void>)Load("glUniform3dv", 717))(location, count, value);
        }

        public partial void Uniform3(int location, uint count, Span<double> value)
        {
            ((delegate *cdecl<Int32, UInt32, Span, void>)Load("glUniform3dv", 718))(location, count, value);
        }

        public partial void Uniform4(int location, double x, double y, double z, double w)
        {
            ((delegate *cdecl<Int32, Double, Double, Double, Double, void>)Load("glUniform4d", 719))(location, x, y, z, w);
        }

        public unsafe partial void Uniform4(int location, uint count, double *value)
        {
            ((delegate *cdecl<Int32, UInt32,, void>)Load("glUniform4dv", 720))(location, count, value);
        }

        public partial void Uniform4(int location, uint count, Span<double> value)
        {
            ((delegate *cdecl<Int32, UInt32, Span, void>)Load("glUniform4dv", 721))(location, count, value);
        }

        public unsafe partial void UniformMatrix2(int location, uint count, bool transpose, double *value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean,, void>)Load("glUniformMatrix2dv", 722))(location, count, transpose, value);
        }

        public partial void UniformMatrix2(int location, uint count, bool transpose, Span<double> value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean, Span, void>)Load("glUniformMatrix2dv", 723))(location, count, transpose, value);
        }

        public unsafe partial void UniformMatrix2x3(int location, uint count, bool transpose, double *value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean,, void>)Load("glUniformMatrix2x3dv", 724))(location, count, transpose, value);
        }

        public partial void UniformMatrix2x3(int location, uint count, bool transpose, Span<double> value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean, Span, void>)Load("glUniformMatrix2x3dv", 725))(location, count, transpose, value);
        }

        public unsafe partial void UniformMatrix2x4(int location, uint count, bool transpose, double *value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean,, void>)Load("glUniformMatrix2x4dv", 726))(location, count, transpose, value);
        }

        public partial void UniformMatrix2x4(int location, uint count, bool transpose, Span<double> value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean, Span, void>)Load("glUniformMatrix2x4dv", 727))(location, count, transpose, value);
        }

        public unsafe partial void UniformMatrix3(int location, uint count, bool transpose, double *value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean,, void>)Load("glUniformMatrix3dv", 728))(location, count, transpose, value);
        }

        public partial void UniformMatrix3(int location, uint count, bool transpose, Span<double> value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean, Span, void>)Load("glUniformMatrix3dv", 729))(location, count, transpose, value);
        }

        public unsafe partial void UniformMatrix3x2(int location, uint count, bool transpose, double *value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean,, void>)Load("glUniformMatrix3x2dv", 730))(location, count, transpose, value);
        }

        public partial void UniformMatrix3x2(int location, uint count, bool transpose, Span<double> value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean, Span, void>)Load("glUniformMatrix3x2dv", 731))(location, count, transpose, value);
        }

        public unsafe partial void UniformMatrix3x4(int location, uint count, bool transpose, double *value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean,, void>)Load("glUniformMatrix3x4dv", 732))(location, count, transpose, value);
        }

        public partial void UniformMatrix3x4(int location, uint count, bool transpose, Span<double> value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean, Span, void>)Load("glUniformMatrix3x4dv", 733))(location, count, transpose, value);
        }

        public unsafe partial void UniformMatrix4(int location, uint count, bool transpose, double *value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean,, void>)Load("glUniformMatrix4dv", 734))(location, count, transpose, value);
        }

        public partial void UniformMatrix4(int location, uint count, bool transpose, Span<double> value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean, Span, void>)Load("glUniformMatrix4dv", 735))(location, count, transpose, value);
        }

        public unsafe partial void UniformMatrix4x2(int location, uint count, bool transpose, double *value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean,, void>)Load("glUniformMatrix4x2dv", 736))(location, count, transpose, value);
        }

        public partial void UniformMatrix4x2(int location, uint count, bool transpose, Span<double> value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean, Span, void>)Load("glUniformMatrix4x2dv", 737))(location, count, transpose, value);
        }

        public unsafe partial void UniformMatrix4x3(int location, uint count, bool transpose, double *value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean,, void>)Load("glUniformMatrix4x3dv", 738))(location, count, transpose, value);
        }

        public partial void UniformMatrix4x3(int location, uint count, bool transpose, Span<double> value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean, Span, void>)Load("glUniformMatrix4x3dv", 739))(location, count, transpose, value);
        }

        public unsafe partial void UniformSubroutines(GLEnum shadertype, uint count, uint *indices)
        {
            ((delegate *cdecl<GLEnum, UInt32,, void>)Load("glUniformSubroutinesuiv", 740))(shadertype, count, indices);
        }

        public partial void UniformSubroutines(GLEnum shadertype, uint count, Span<uint> indices)
        {
            ((delegate *cdecl<GLEnum, UInt32, Span, void>)Load("glUniformSubroutinesuiv", 741))(shadertype, count, indices);
        }

        public partial void BeginQueryIndexed(QueryTarget target, uint index, uint id)
        {
            ((delegate *cdecl<QueryTarget, UInt32, UInt32, void>)Load("glBeginQueryIndexed", 742))(target, index, id);
        }

        public partial void BindTransformFeedback(BindTransformFeedbackTarget target, uint id)
        {
            ((delegate *cdecl<BindTransformFeedbackTarget, UInt32, void>)Load("glBindTransformFeedback", 743))(target, id);
        }

        public partial void BlendEquation(uint buf, BlendEquationModeEXT mode)
        {
            ((delegate *cdecl<UInt32, BlendEquationModeEXT, void>)Load("glBlendEquationi", 744))(buf, mode);
        }

        public partial void BlendEquationSeparate(uint buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha)
        {
            ((delegate *cdecl<UInt32, BlendEquationModeEXT, BlendEquationModeEXT, void>)Load("glBlendEquationSeparatei", 745))(buf, modeRGB, modeAlpha);
        }

        public partial void BlendFunc(uint buf, BlendingFactor src, BlendingFactor dst)
        {
            ((delegate *cdecl<UInt32, BlendingFactor, BlendingFactor, void>)Load("glBlendFunci", 746))(buf, src, dst);
        }

        public partial void BlendFuncSeparate(uint buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha)
        {
            ((delegate *cdecl<UInt32, BlendingFactor, BlendingFactor, BlendingFactor, BlendingFactor, void>)Load("glBlendFuncSeparatei", 747))(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }

        public unsafe partial void DrawArraysIndirect(PrimitiveType mode, void *indirect)
        {
            ((delegate *cdecl<PrimitiveType,, void>)Load("glDrawArraysIndirect", 748))(mode, indirect);
        }

        public partial void DrawArraysIndirect<T0>(PrimitiveType mode, Span<T0> indirect)
            where T0 : unmanaged
        {
            ((delegate *cdecl<PrimitiveType, Span, void>)Load("glDrawArraysIndirect", 749))(mode, indirect);
        }

        public unsafe partial void DrawElementsIndirect(PrimitiveType mode, DrawElementsType type, void *indirect)
        {
            ((delegate *cdecl<PrimitiveType, DrawElementsType,, void>)Load("glDrawElementsIndirect", 750))(mode, type, indirect);
        }

        public partial void DrawElementsIndirect<T0>(PrimitiveType mode, DrawElementsType type, Span<T0> indirect)
            where T0 : unmanaged
        {
            ((delegate *cdecl<PrimitiveType, DrawElementsType, Span, void>)Load("glDrawElementsIndirect", 751))(mode, type, indirect);
        }

        public partial void DrawTransformFeedback(PrimitiveType mode, uint id)
        {
            ((delegate *cdecl<PrimitiveType, UInt32, void>)Load("glDrawTransformFeedback", 752))(mode, id);
        }

        public partial void DrawTransformFeedbackStream(PrimitiveType mode, uint id, uint stream)
        {
            ((delegate *cdecl<PrimitiveType, UInt32, UInt32, void>)Load("glDrawTransformFeedbackStream", 753))(mode, id, stream);
        }

        public partial void EndQueryIndexed(QueryTarget target, uint index)
        {
            ((delegate *cdecl<QueryTarget, UInt32, void>)Load("glEndQueryIndexed", 754))(target, index);
        }

        public unsafe partial void GetActiveSubroutineName(uint program, ShaderType shadertype, uint index, uint bufSize, uint *length, out string name)
        {
            ((delegate *cdecl<UInt32, ShaderType, UInt32, UInt32,, String, void>)Load("glGetActiveSubroutineName", 755))(program, shadertype, index, bufSize, length, name);
        }

        public partial void GetActiveSubroutineName(uint program, ShaderType shadertype, uint index, uint bufSize, out uint length, out string name)
        {
            ((delegate *cdecl<UInt32, ShaderType, UInt32, UInt32, UInt32, String, void>)Load("glGetActiveSubroutineName", 756))(program, shadertype, index, bufSize, length, name);
        }

        public unsafe partial void GetActiveSubroutineUniform(uint program, ShaderType shadertype, uint index, SubroutineParameterName pname, int *values)
        {
            ((delegate *cdecl<UInt32, ShaderType, UInt32, SubroutineParameterName,, void>)Load("glGetActiveSubroutineUniformiv", 757))(program, shadertype, index, pname, values);
        }

        public partial void GetActiveSubroutineUniform(uint program, ShaderType shadertype, uint index, SubroutineParameterName pname, out int values)
        {
            ((delegate *cdecl<UInt32, ShaderType, UInt32, SubroutineParameterName, Int32, void>)Load("glGetActiveSubroutineUniformiv", 758))(program, shadertype, index, pname, values);
        }

        public unsafe partial void GetActiveSubroutineUniformName(uint program, ShaderType shadertype, uint index, uint bufSize, uint *length, out string name)
        {
            ((delegate *cdecl<UInt32, ShaderType, UInt32, UInt32,, String, void>)Load("glGetActiveSubroutineUniformName", 759))(program, shadertype, index, bufSize, length, name);
        }

        public partial void GetActiveSubroutineUniformName(uint program, ShaderType shadertype, uint index, uint bufSize, out uint length, out string name)
        {
            ((delegate *cdecl<UInt32, ShaderType, UInt32, UInt32, UInt32, String, void>)Load("glGetActiveSubroutineUniformName", 760))(program, shadertype, index, bufSize, length, name);
        }

        public unsafe partial void GetProgramStage(uint program, ShaderType shadertype, ProgramStagePName pname, int *values)
        {
            ((delegate *cdecl<UInt32, ShaderType, ProgramStagePName,, void>)Load("glGetProgramStageiv", 761))(program, shadertype, pname, values);
        }

        public partial void GetProgramStage(uint program, ShaderType shadertype, ProgramStagePName pname, out int values)
        {
            ((delegate *cdecl<UInt32, ShaderType, ProgramStagePName, Int32, void>)Load("glGetProgramStageiv", 762))(program, shadertype, pname, values);
        }

        public unsafe partial void GetQueryIndexed(QueryTarget target, uint index, QueryParameterName pname, int *@params)
        {
            ((delegate *cdecl<QueryTarget, UInt32, QueryParameterName,, void>)Load("glGetQueryIndexediv", 763))(target, index, pname, params);
        }

        public partial void GetQueryIndexed(QueryTarget target, uint index, QueryParameterName pname, out int @params)
        {
            ((delegate *cdecl<QueryTarget, UInt32, QueryParameterName, Int32, void>)Load("glGetQueryIndexediv", 764))(target, index, pname, params);
        }

        public unsafe partial void GetUniformSubroutine(ShaderType shadertype, int location, uint *@params)
        {
            ((delegate *cdecl<ShaderType, Int32,, void>)Load("glGetUniformSubroutineuiv", 767))(shadertype, location, params);
        }

        public partial void GetUniformSubroutine(ShaderType shadertype, int location, out uint @params)
        {
            ((delegate *cdecl<ShaderType, Int32, UInt32, void>)Load("glGetUniformSubroutineuiv", 768))(shadertype, location, params);
        }

        public partial void PatchParameter(PatchParameterName pname, int value)
        {
            ((delegate *cdecl<PatchParameterName, Int32, void>)Load("glPatchParameteri", 769))(pname, value);
        }

        public unsafe partial void PatchParameter(PatchParameterName pname, float *values)
        {
            ((delegate *cdecl<PatchParameterName,, void>)Load("glPatchParameterfv", 770))(pname, values);
        }

        public partial void PatchParameter(PatchParameterName pname, ref float values)
        {
            ((delegate *cdecl<PatchParameterName, Single, void>)Load("glPatchParameterfv", 771))(pname, values);
        }

        public unsafe partial void UniformSubroutines(ShaderType shadertype, uint count, uint *indices)
        {
            ((delegate *cdecl<ShaderType, UInt32,, void>)Load("glUniformSubroutinesuiv", 772))(shadertype, count, indices);
        }

        public partial void UniformSubroutines(ShaderType shadertype, uint count, Span<uint> indices)
        {
            ((delegate *cdecl<ShaderType, UInt32, Span, void>)Load("glUniformSubroutinesuiv", 773))(shadertype, count, indices);
        }

        public unsafe partial void BindFragDataLocationIndexed(uint program, uint colorNumber, uint index, byte *name)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32,, void>)Load("glBindFragDataLocationIndexed", 774))(program, colorNumber, index, name);
        }

        public partial void BindFragDataLocationIndexed(uint program, uint colorNumber, uint index, Span<byte> name)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, Span, void>)Load("glBindFragDataLocationIndexed", 775))(program, colorNumber, index, name);
        }

        public partial void BindSampler(uint unit, uint sampler)
        {
            ((delegate *cdecl<UInt32, UInt32, void>)Load("glBindSampler", 776))(unit, sampler);
        }

        public partial void ColorP3(GLEnum type, uint color)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glColorP3ui", 777))(type, color);
        }

        public unsafe partial void ColorP3(GLEnum type, uint *color)
        {
            ((delegate *cdecl<GLEnum,, void>)Load("glColorP3uiv", 778))(type, color);
        }

        public partial void ColorP3(GLEnum type, ref uint color)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glColorP3uiv", 779))(type, color);
        }

        public partial void ColorP4(GLEnum type, uint color)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glColorP4ui", 780))(type, color);
        }

        public unsafe partial void ColorP4(GLEnum type, uint *color)
        {
            ((delegate *cdecl<GLEnum,, void>)Load("glColorP4uiv", 781))(type, color);
        }

        public partial void ColorP4(GLEnum type, ref uint color)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glColorP4uiv", 782))(type, color);
        }

        public unsafe partial void DeleteSamplers(uint count, uint *samplers)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glDeleteSamplers", 783))(count, samplers);
        }

        public partial void DeleteSamplers(uint count, Span<uint> samplers)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glDeleteSamplers", 784))(count, samplers);
        }

        public unsafe partial void GenSamplers(uint count, uint *samplers)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glGenSamplers", 785))(count, samplers);
        }

        public partial void GenSamplers(uint count, Span<uint> samplers)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glGenSamplers", 786))(count, samplers);
        }

        public unsafe partial void GetQueryObject(uint id, GLEnum pname, long *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetQueryObjecti64v", 789))(id, pname, params);
        }

        public partial void GetQueryObject(uint id, GLEnum pname, out long @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, Int64, void>)Load("glGetQueryObjecti64v", 790))(id, pname, params);
        }

        public unsafe partial void GetQueryObject(uint id, GLEnum pname, ulong *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetQueryObjectui64v", 791))(id, pname, params);
        }

        public partial void GetQueryObject(uint id, GLEnum pname, out ulong @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, UInt64, void>)Load("glGetQueryObjectui64v", 792))(id, pname, params);
        }

        public unsafe partial void GetSamplerParameter(uint sampler, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetSamplerParameteriv", 793))(sampler, pname, params);
        }

        public partial void GetSamplerParameter(uint sampler, GLEnum pname, out int @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, Int32, void>)Load("glGetSamplerParameteriv", 794))(sampler, pname, params);
        }

        public unsafe partial void GetSamplerParameter(uint sampler, GLEnum pname, float *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetSamplerParameterfv", 795))(sampler, pname, params);
        }

        public partial void GetSamplerParameter(uint sampler, GLEnum pname, out float @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, Single, void>)Load("glGetSamplerParameterfv", 796))(sampler, pname, params);
        }

        public unsafe partial void GetSamplerParameterI(uint sampler, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetSamplerParameterIiv", 797))(sampler, pname, params);
        }

        public partial void GetSamplerParameterI(uint sampler, GLEnum pname, out int @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, Int32, void>)Load("glGetSamplerParameterIiv", 798))(sampler, pname, params);
        }

        public unsafe partial void GetSamplerParameterI(uint sampler, GLEnum pname, uint *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetSamplerParameterIuiv", 799))(sampler, pname, params);
        }

        public partial void GetSamplerParameterI(uint sampler, GLEnum pname, out uint @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, UInt32, void>)Load("glGetSamplerParameterIuiv", 800))(sampler, pname, params);
        }

        public partial bool IsSampler(uint sampler)
        {
            return ((delegate *cdecl<UInt32, byte>)Load("glIsSampler", 801))(sampler) == 1;
        }

        public partial void MultiTexCoordP1(GLEnum texture, GLEnum type, uint coords)
        {
            ((delegate *cdecl<GLEnum, GLEnum, UInt32, void>)Load("glMultiTexCoordP1ui", 802))(texture, type, coords);
        }

        public unsafe partial void MultiTexCoordP1(GLEnum texture, GLEnum type, uint *coords)
        {
            ((delegate *cdecl<GLEnum, GLEnum,, void>)Load("glMultiTexCoordP1uiv", 803))(texture, type, coords);
        }

        public partial void MultiTexCoordP1(GLEnum texture, GLEnum type, ref uint coords)
        {
            ((delegate *cdecl<GLEnum, GLEnum, UInt32, void>)Load("glMultiTexCoordP1uiv", 804))(texture, type, coords);
        }

        public partial void MultiTexCoordP2(GLEnum texture, GLEnum type, uint coords)
        {
            ((delegate *cdecl<GLEnum, GLEnum, UInt32, void>)Load("glMultiTexCoordP2ui", 805))(texture, type, coords);
        }

        public unsafe partial void MultiTexCoordP2(GLEnum texture, GLEnum type, uint *coords)
        {
            ((delegate *cdecl<GLEnum, GLEnum,, void>)Load("glMultiTexCoordP2uiv", 806))(texture, type, coords);
        }

        public partial void MultiTexCoordP2(GLEnum texture, GLEnum type, ref uint coords)
        {
            ((delegate *cdecl<GLEnum, GLEnum, UInt32, void>)Load("glMultiTexCoordP2uiv", 807))(texture, type, coords);
        }

        public partial void MultiTexCoordP3(GLEnum texture, GLEnum type, uint coords)
        {
            ((delegate *cdecl<GLEnum, GLEnum, UInt32, void>)Load("glMultiTexCoordP3ui", 808))(texture, type, coords);
        }

        public unsafe partial void MultiTexCoordP3(GLEnum texture, GLEnum type, uint *coords)
        {
            ((delegate *cdecl<GLEnum, GLEnum,, void>)Load("glMultiTexCoordP3uiv", 809))(texture, type, coords);
        }

        public partial void MultiTexCoordP3(GLEnum texture, GLEnum type, ref uint coords)
        {
            ((delegate *cdecl<GLEnum, GLEnum, UInt32, void>)Load("glMultiTexCoordP3uiv", 810))(texture, type, coords);
        }

        public partial void MultiTexCoordP4(GLEnum texture, GLEnum type, uint coords)
        {
            ((delegate *cdecl<GLEnum, GLEnum, UInt32, void>)Load("glMultiTexCoordP4ui", 811))(texture, type, coords);
        }

        public unsafe partial void MultiTexCoordP4(GLEnum texture, GLEnum type, uint *coords)
        {
            ((delegate *cdecl<GLEnum, GLEnum,, void>)Load("glMultiTexCoordP4uiv", 812))(texture, type, coords);
        }

        public partial void MultiTexCoordP4(GLEnum texture, GLEnum type, ref uint coords)
        {
            ((delegate *cdecl<GLEnum, GLEnum, UInt32, void>)Load("glMultiTexCoordP4uiv", 813))(texture, type, coords);
        }

        public partial void NormalP3(GLEnum type, uint coords)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glNormalP3ui", 814))(type, coords);
        }

        public unsafe partial void NormalP3(GLEnum type, uint *coords)
        {
            ((delegate *cdecl<GLEnum,, void>)Load("glNormalP3uiv", 815))(type, coords);
        }

        public partial void NormalP3(GLEnum type, ref uint coords)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glNormalP3uiv", 816))(type, coords);
        }

        public partial void QueryCounter(uint id, GLEnum target)
        {
            ((delegate *cdecl<UInt32, GLEnum, void>)Load("glQueryCounter", 817))(id, target);
        }

        public partial void SamplerParameter(uint sampler, GLEnum pname, int param)
        {
            ((delegate *cdecl<UInt32, GLEnum, Int32, void>)Load("glSamplerParameteri", 818))(sampler, pname, param);
        }

        public unsafe partial void SamplerParameter(uint sampler, GLEnum pname, int *param)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glSamplerParameteriv", 819))(sampler, pname, param);
        }

        public partial void SamplerParameter(uint sampler, GLEnum pname, ref int param)
        {
            ((delegate *cdecl<UInt32, GLEnum, Int32, void>)Load("glSamplerParameteriv", 820))(sampler, pname, param);
        }

        public partial void SamplerParameter(uint sampler, GLEnum pname, float param)
        {
            ((delegate *cdecl<UInt32, GLEnum, Single, void>)Load("glSamplerParameterf", 821))(sampler, pname, param);
        }

        public unsafe partial void SamplerParameter(uint sampler, GLEnum pname, float *param)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glSamplerParameterfv", 822))(sampler, pname, param);
        }

        public partial void SamplerParameter(uint sampler, GLEnum pname, ref float param)
        {
            ((delegate *cdecl<UInt32, GLEnum, Single, void>)Load("glSamplerParameterfv", 823))(sampler, pname, param);
        }

        public unsafe partial void SamplerParameterI(uint sampler, GLEnum pname, int *param)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glSamplerParameterIiv", 824))(sampler, pname, param);
        }

        public partial void SamplerParameterI(uint sampler, GLEnum pname, ref int param)
        {
            ((delegate *cdecl<UInt32, GLEnum, Int32, void>)Load("glSamplerParameterIiv", 825))(sampler, pname, param);
        }

        public unsafe partial void SamplerParameterI(uint sampler, GLEnum pname, uint *param)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glSamplerParameterIuiv", 826))(sampler, pname, param);
        }

        public partial void SamplerParameterI(uint sampler, GLEnum pname, ref uint param)
        {
            ((delegate *cdecl<UInt32, GLEnum, UInt32, void>)Load("glSamplerParameterIuiv", 827))(sampler, pname, param);
        }

        public partial void SecondaryColorP3(GLEnum type, uint color)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glSecondaryColorP3ui", 828))(type, color);
        }

        public unsafe partial void SecondaryColorP3(GLEnum type, uint *color)
        {
            ((delegate *cdecl<GLEnum,, void>)Load("glSecondaryColorP3uiv", 829))(type, color);
        }

        public partial void SecondaryColorP3(GLEnum type, ref uint color)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glSecondaryColorP3uiv", 830))(type, color);
        }

        public partial void TexCoordP1(GLEnum type, uint coords)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glTexCoordP1ui", 831))(type, coords);
        }

        public unsafe partial void TexCoordP1(GLEnum type, uint *coords)
        {
            ((delegate *cdecl<GLEnum,, void>)Load("glTexCoordP1uiv", 832))(type, coords);
        }

        public partial void TexCoordP1(GLEnum type, ref uint coords)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glTexCoordP1uiv", 833))(type, coords);
        }

        public partial void TexCoordP2(GLEnum type, uint coords)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glTexCoordP2ui", 834))(type, coords);
        }

        public unsafe partial void TexCoordP2(GLEnum type, uint *coords)
        {
            ((delegate *cdecl<GLEnum,, void>)Load("glTexCoordP2uiv", 835))(type, coords);
        }

        public partial void TexCoordP2(GLEnum type, ref uint coords)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glTexCoordP2uiv", 836))(type, coords);
        }

        public partial void TexCoordP3(GLEnum type, uint coords)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glTexCoordP3ui", 837))(type, coords);
        }

        public unsafe partial void TexCoordP3(GLEnum type, uint *coords)
        {
            ((delegate *cdecl<GLEnum,, void>)Load("glTexCoordP3uiv", 838))(type, coords);
        }

        public partial void TexCoordP3(GLEnum type, ref uint coords)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glTexCoordP3uiv", 839))(type, coords);
        }

        public partial void TexCoordP4(GLEnum type, uint coords)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glTexCoordP4ui", 840))(type, coords);
        }

        public unsafe partial void TexCoordP4(GLEnum type, uint *coords)
        {
            ((delegate *cdecl<GLEnum,, void>)Load("glTexCoordP4uiv", 841))(type, coords);
        }

        public partial void TexCoordP4(GLEnum type, ref uint coords)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glTexCoordP4uiv", 842))(type, coords);
        }

        public partial void VertexAttribDivisor(uint index, uint divisor)
        {
            ((delegate *cdecl<UInt32, UInt32, void>)Load("glVertexAttribDivisor", 843))(index, divisor);
        }

        public partial void VertexAttribP1(uint index, GLEnum type, bool normalized, uint value)
        {
            ((delegate *cdecl<UInt32, GLEnum, Boolean, UInt32, void>)Load("glVertexAttribP1ui", 844))(index, type, normalized, value);
        }

        public unsafe partial void VertexAttribP1(uint index, GLEnum type, bool normalized, uint *value)
        {
            ((delegate *cdecl<UInt32, GLEnum, Boolean,, void>)Load("glVertexAttribP1uiv", 845))(index, type, normalized, value);
        }

        public partial void VertexAttribP1(uint index, GLEnum type, bool normalized, ref uint value)
        {
            ((delegate *cdecl<UInt32, GLEnum, Boolean, UInt32, void>)Load("glVertexAttribP1uiv", 846))(index, type, normalized, value);
        }

        public partial void VertexAttribP2(uint index, GLEnum type, bool normalized, uint value)
        {
            ((delegate *cdecl<UInt32, GLEnum, Boolean, UInt32, void>)Load("glVertexAttribP2ui", 847))(index, type, normalized, value);
        }

        public unsafe partial void VertexAttribP2(uint index, GLEnum type, bool normalized, uint *value)
        {
            ((delegate *cdecl<UInt32, GLEnum, Boolean,, void>)Load("glVertexAttribP2uiv", 848))(index, type, normalized, value);
        }

        public partial void VertexAttribP2(uint index, GLEnum type, bool normalized, ref uint value)
        {
            ((delegate *cdecl<UInt32, GLEnum, Boolean, UInt32, void>)Load("glVertexAttribP2uiv", 849))(index, type, normalized, value);
        }

        public partial void VertexAttribP3(uint index, GLEnum type, bool normalized, uint value)
        {
            ((delegate *cdecl<UInt32, GLEnum, Boolean, UInt32, void>)Load("glVertexAttribP3ui", 850))(index, type, normalized, value);
        }

        public unsafe partial void VertexAttribP3(uint index, GLEnum type, bool normalized, uint *value)
        {
            ((delegate *cdecl<UInt32, GLEnum, Boolean,, void>)Load("glVertexAttribP3uiv", 851))(index, type, normalized, value);
        }

        public partial void VertexAttribP3(uint index, GLEnum type, bool normalized, ref uint value)
        {
            ((delegate *cdecl<UInt32, GLEnum, Boolean, UInt32, void>)Load("glVertexAttribP3uiv", 852))(index, type, normalized, value);
        }

        public partial void VertexAttribP4(uint index, GLEnum type, bool normalized, uint value)
        {
            ((delegate *cdecl<UInt32, GLEnum, Boolean, UInt32, void>)Load("glVertexAttribP4ui", 853))(index, type, normalized, value);
        }

        public unsafe partial void VertexAttribP4(uint index, GLEnum type, bool normalized, uint *value)
        {
            ((delegate *cdecl<UInt32, GLEnum, Boolean,, void>)Load("glVertexAttribP4uiv", 854))(index, type, normalized, value);
        }

        public partial void VertexAttribP4(uint index, GLEnum type, bool normalized, ref uint value)
        {
            ((delegate *cdecl<UInt32, GLEnum, Boolean, UInt32, void>)Load("glVertexAttribP4uiv", 855))(index, type, normalized, value);
        }

        public partial void VertexP2(GLEnum type, uint value)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glVertexP2ui", 856))(type, value);
        }

        public unsafe partial void VertexP2(GLEnum type, uint *value)
        {
            ((delegate *cdecl<GLEnum,, void>)Load("glVertexP2uiv", 857))(type, value);
        }

        public partial void VertexP2(GLEnum type, ref uint value)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glVertexP2uiv", 858))(type, value);
        }

        public partial void VertexP3(GLEnum type, uint value)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glVertexP3ui", 859))(type, value);
        }

        public unsafe partial void VertexP3(GLEnum type, uint *value)
        {
            ((delegate *cdecl<GLEnum,, void>)Load("glVertexP3uiv", 860))(type, value);
        }

        public partial void VertexP3(GLEnum type, ref uint value)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glVertexP3uiv", 861))(type, value);
        }

        public partial void VertexP4(GLEnum type, uint value)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glVertexP4ui", 862))(type, value);
        }

        public unsafe partial void VertexP4(GLEnum type, uint *value)
        {
            ((delegate *cdecl<GLEnum,, void>)Load("glVertexP4uiv", 863))(type, value);
        }

        public partial void VertexP4(GLEnum type, ref uint value)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glVertexP4uiv", 864))(type, value);
        }

        public partial void BindFragDataLocationIndexed(uint program, uint colorNumber, uint index, string name)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, String, void>)Load("glBindFragDataLocationIndexed", 865))(program, colorNumber, index, name);
        }

        public partial void ColorP3(ColorPointerType type, uint color)
        {
            ((delegate *cdecl<ColorPointerType, UInt32, void>)Load("glColorP3ui", 866))(type, color);
        }

        public unsafe partial void ColorP3(ColorPointerType type, uint *color)
        {
            ((delegate *cdecl<ColorPointerType,, void>)Load("glColorP3uiv", 867))(type, color);
        }

        public partial void ColorP3(ColorPointerType type, ref uint color)
        {
            ((delegate *cdecl<ColorPointerType, UInt32, void>)Load("glColorP3uiv", 868))(type, color);
        }

        public partial void ColorP4(ColorPointerType type, uint color)
        {
            ((delegate *cdecl<ColorPointerType, UInt32, void>)Load("glColorP4ui", 869))(type, color);
        }

        public unsafe partial void ColorP4(ColorPointerType type, uint *color)
        {
            ((delegate *cdecl<ColorPointerType,, void>)Load("glColorP4uiv", 870))(type, color);
        }

        public partial void ColorP4(ColorPointerType type, ref uint color)
        {
            ((delegate *cdecl<ColorPointerType, UInt32, void>)Load("glColorP4uiv", 871))(type, color);
        }

        public unsafe partial void GetQueryObject(uint id, QueryObjectParameterName pname, long *@params)
        {
            ((delegate *cdecl<UInt32, QueryObjectParameterName,, void>)Load("glGetQueryObjecti64v", 873))(id, pname, params);
        }

        public partial void GetQueryObject(uint id, QueryObjectParameterName pname, out long @params)
        {
            ((delegate *cdecl<UInt32, QueryObjectParameterName, Int64, void>)Load("glGetQueryObjecti64v", 874))(id, pname, params);
        }

        public unsafe partial void GetQueryObject(uint id, QueryObjectParameterName pname, ulong *@params)
        {
            ((delegate *cdecl<UInt32, QueryObjectParameterName,, void>)Load("glGetQueryObjectui64v", 875))(id, pname, params);
        }

        public partial void GetQueryObject(uint id, QueryObjectParameterName pname, out ulong @params)
        {
            ((delegate *cdecl<UInt32, QueryObjectParameterName, UInt64, void>)Load("glGetQueryObjectui64v", 876))(id, pname, params);
        }

        public unsafe partial void GetSamplerParameter(uint sampler, SamplerParameterI pname, int *@params)
        {
            ((delegate *cdecl<UInt32, SamplerParameterI,, void>)Load("glGetSamplerParameteriv", 877))(sampler, pname, params);
        }

        public partial void GetSamplerParameter(uint sampler, SamplerParameterI pname, out int @params)
        {
            ((delegate *cdecl<UInt32, SamplerParameterI, Int32, void>)Load("glGetSamplerParameteriv", 878))(sampler, pname, params);
        }

        public unsafe partial void GetSamplerParameter(uint sampler, SamplerParameterF pname, float *@params)
        {
            ((delegate *cdecl<UInt32, SamplerParameterF,, void>)Load("glGetSamplerParameterfv", 879))(sampler, pname, params);
        }

        public partial void GetSamplerParameter(uint sampler, SamplerParameterF pname, out float @params)
        {
            ((delegate *cdecl<UInt32, SamplerParameterF, Single, void>)Load("glGetSamplerParameterfv", 880))(sampler, pname, params);
        }

        public unsafe partial void GetSamplerParameterI(uint sampler, SamplerParameterI pname, int *@params)
        {
            ((delegate *cdecl<UInt32, SamplerParameterI,, void>)Load("glGetSamplerParameterIiv", 881))(sampler, pname, params);
        }

        public partial void GetSamplerParameterI(uint sampler, SamplerParameterI pname, out int @params)
        {
            ((delegate *cdecl<UInt32, SamplerParameterI, Int32, void>)Load("glGetSamplerParameterIiv", 882))(sampler, pname, params);
        }

        public unsafe partial void GetSamplerParameterI(uint sampler, SamplerParameterI pname, uint *@params)
        {
            ((delegate *cdecl<UInt32, SamplerParameterI,, void>)Load("glGetSamplerParameterIuiv", 883))(sampler, pname, params);
        }

        public partial void GetSamplerParameterI(uint sampler, SamplerParameterI pname, out uint @params)
        {
            ((delegate *cdecl<UInt32, SamplerParameterI, UInt32, void>)Load("glGetSamplerParameterIuiv", 884))(sampler, pname, params);
        }

        public partial void MultiTexCoordP1(TextureUnit texture, TexCoordPointerType type, uint coords)
        {
            ((delegate *cdecl<TextureUnit, TexCoordPointerType, UInt32, void>)Load("glMultiTexCoordP1ui", 885))(texture, type, coords);
        }

        public unsafe partial void MultiTexCoordP1(TextureUnit texture, TexCoordPointerType type, uint *coords)
        {
            ((delegate *cdecl<TextureUnit, TexCoordPointerType,, void>)Load("glMultiTexCoordP1uiv", 886))(texture, type, coords);
        }

        public partial void MultiTexCoordP1(TextureUnit texture, TexCoordPointerType type, ref uint coords)
        {
            ((delegate *cdecl<TextureUnit, TexCoordPointerType, UInt32, void>)Load("glMultiTexCoordP1uiv", 887))(texture, type, coords);
        }

        public partial void MultiTexCoordP2(TextureUnit texture, TexCoordPointerType type, uint coords)
        {
            ((delegate *cdecl<TextureUnit, TexCoordPointerType, UInt32, void>)Load("glMultiTexCoordP2ui", 888))(texture, type, coords);
        }

        public unsafe partial void MultiTexCoordP2(TextureUnit texture, TexCoordPointerType type, uint *coords)
        {
            ((delegate *cdecl<TextureUnit, TexCoordPointerType,, void>)Load("glMultiTexCoordP2uiv", 889))(texture, type, coords);
        }

        public partial void MultiTexCoordP2(TextureUnit texture, TexCoordPointerType type, ref uint coords)
        {
            ((delegate *cdecl<TextureUnit, TexCoordPointerType, UInt32, void>)Load("glMultiTexCoordP2uiv", 890))(texture, type, coords);
        }

        public partial void MultiTexCoordP3(TextureUnit texture, TexCoordPointerType type, uint coords)
        {
            ((delegate *cdecl<TextureUnit, TexCoordPointerType, UInt32, void>)Load("glMultiTexCoordP3ui", 891))(texture, type, coords);
        }

        public unsafe partial void MultiTexCoordP3(TextureUnit texture, TexCoordPointerType type, uint *coords)
        {
            ((delegate *cdecl<TextureUnit, TexCoordPointerType,, void>)Load("glMultiTexCoordP3uiv", 892))(texture, type, coords);
        }

        public partial void MultiTexCoordP3(TextureUnit texture, TexCoordPointerType type, ref uint coords)
        {
            ((delegate *cdecl<TextureUnit, TexCoordPointerType, UInt32, void>)Load("glMultiTexCoordP3uiv", 893))(texture, type, coords);
        }

        public partial void MultiTexCoordP4(TextureUnit texture, TexCoordPointerType type, uint coords)
        {
            ((delegate *cdecl<TextureUnit, TexCoordPointerType, UInt32, void>)Load("glMultiTexCoordP4ui", 894))(texture, type, coords);
        }

        public unsafe partial void MultiTexCoordP4(TextureUnit texture, TexCoordPointerType type, uint *coords)
        {
            ((delegate *cdecl<TextureUnit, TexCoordPointerType,, void>)Load("glMultiTexCoordP4uiv", 895))(texture, type, coords);
        }

        public partial void MultiTexCoordP4(TextureUnit texture, TexCoordPointerType type, ref uint coords)
        {
            ((delegate *cdecl<TextureUnit, TexCoordPointerType, UInt32, void>)Load("glMultiTexCoordP4uiv", 896))(texture, type, coords);
        }

        public partial void NormalP3(NormalPointerType type, uint coords)
        {
            ((delegate *cdecl<NormalPointerType, UInt32, void>)Load("glNormalP3ui", 897))(type, coords);
        }

        public unsafe partial void NormalP3(NormalPointerType type, uint *coords)
        {
            ((delegate *cdecl<NormalPointerType,, void>)Load("glNormalP3uiv", 898))(type, coords);
        }

        public partial void NormalP3(NormalPointerType type, ref uint coords)
        {
            ((delegate *cdecl<NormalPointerType, UInt32, void>)Load("glNormalP3uiv", 899))(type, coords);
        }

        public partial void QueryCounter(uint id, QueryCounterTarget target)
        {
            ((delegate *cdecl<UInt32, QueryCounterTarget, void>)Load("glQueryCounter", 900))(id, target);
        }

        public partial void SamplerParameter(uint sampler, SamplerParameterI pname, int param)
        {
            ((delegate *cdecl<UInt32, SamplerParameterI, Int32, void>)Load("glSamplerParameteri", 901))(sampler, pname, param);
        }

        public unsafe partial void SamplerParameter(uint sampler, SamplerParameterI pname, int *param)
        {
            ((delegate *cdecl<UInt32, SamplerParameterI,, void>)Load("glSamplerParameteriv", 902))(sampler, pname, param);
        }

        public partial void SamplerParameter(uint sampler, SamplerParameterI pname, ref int param)
        {
            ((delegate *cdecl<UInt32, SamplerParameterI, Int32, void>)Load("glSamplerParameteriv", 903))(sampler, pname, param);
        }

        public partial void SamplerParameter(uint sampler, SamplerParameterF pname, float param)
        {
            ((delegate *cdecl<UInt32, SamplerParameterF, Single, void>)Load("glSamplerParameterf", 904))(sampler, pname, param);
        }

        public unsafe partial void SamplerParameter(uint sampler, SamplerParameterF pname, float *param)
        {
            ((delegate *cdecl<UInt32, SamplerParameterF,, void>)Load("glSamplerParameterfv", 905))(sampler, pname, param);
        }

        public partial void SamplerParameter(uint sampler, SamplerParameterF pname, ref float param)
        {
            ((delegate *cdecl<UInt32, SamplerParameterF, Single, void>)Load("glSamplerParameterfv", 906))(sampler, pname, param);
        }

        public unsafe partial void SamplerParameterI(uint sampler, SamplerParameterI pname, int *param)
        {
            ((delegate *cdecl<UInt32, SamplerParameterI,, void>)Load("glSamplerParameterIiv", 907))(sampler, pname, param);
        }

        public partial void SamplerParameterI(uint sampler, SamplerParameterI pname, ref int param)
        {
            ((delegate *cdecl<UInt32, SamplerParameterI, Int32, void>)Load("glSamplerParameterIiv", 908))(sampler, pname, param);
        }

        public unsafe partial void SamplerParameterI(uint sampler, SamplerParameterI pname, uint *param)
        {
            ((delegate *cdecl<UInt32, SamplerParameterI,, void>)Load("glSamplerParameterIuiv", 909))(sampler, pname, param);
        }

        public partial void SamplerParameterI(uint sampler, SamplerParameterI pname, ref uint param)
        {
            ((delegate *cdecl<UInt32, SamplerParameterI, UInt32, void>)Load("glSamplerParameterIuiv", 910))(sampler, pname, param);
        }

        public partial void SecondaryColorP3(ColorPointerType type, uint color)
        {
            ((delegate *cdecl<ColorPointerType, UInt32, void>)Load("glSecondaryColorP3ui", 911))(type, color);
        }

        public unsafe partial void SecondaryColorP3(ColorPointerType type, uint *color)
        {
            ((delegate *cdecl<ColorPointerType,, void>)Load("glSecondaryColorP3uiv", 912))(type, color);
        }

        public partial void SecondaryColorP3(ColorPointerType type, ref uint color)
        {
            ((delegate *cdecl<ColorPointerType, UInt32, void>)Load("glSecondaryColorP3uiv", 913))(type, color);
        }

        public partial void TexCoordP1(TexCoordPointerType type, uint coords)
        {
            ((delegate *cdecl<TexCoordPointerType, UInt32, void>)Load("glTexCoordP1ui", 914))(type, coords);
        }

        public unsafe partial void TexCoordP1(TexCoordPointerType type, uint *coords)
        {
            ((delegate *cdecl<TexCoordPointerType,, void>)Load("glTexCoordP1uiv", 915))(type, coords);
        }

        public partial void TexCoordP1(TexCoordPointerType type, ref uint coords)
        {
            ((delegate *cdecl<TexCoordPointerType, UInt32, void>)Load("glTexCoordP1uiv", 916))(type, coords);
        }

        public partial void TexCoordP2(TexCoordPointerType type, uint coords)
        {
            ((delegate *cdecl<TexCoordPointerType, UInt32, void>)Load("glTexCoordP2ui", 917))(type, coords);
        }

        public unsafe partial void TexCoordP2(TexCoordPointerType type, uint *coords)
        {
            ((delegate *cdecl<TexCoordPointerType,, void>)Load("glTexCoordP2uiv", 918))(type, coords);
        }

        public partial void TexCoordP2(TexCoordPointerType type, ref uint coords)
        {
            ((delegate *cdecl<TexCoordPointerType, UInt32, void>)Load("glTexCoordP2uiv", 919))(type, coords);
        }

        public partial void TexCoordP3(TexCoordPointerType type, uint coords)
        {
            ((delegate *cdecl<TexCoordPointerType, UInt32, void>)Load("glTexCoordP3ui", 920))(type, coords);
        }

        public unsafe partial void TexCoordP3(TexCoordPointerType type, uint *coords)
        {
            ((delegate *cdecl<TexCoordPointerType,, void>)Load("glTexCoordP3uiv", 921))(type, coords);
        }

        public partial void TexCoordP3(TexCoordPointerType type, ref uint coords)
        {
            ((delegate *cdecl<TexCoordPointerType, UInt32, void>)Load("glTexCoordP3uiv", 922))(type, coords);
        }

        public partial void TexCoordP4(TexCoordPointerType type, uint coords)
        {
            ((delegate *cdecl<TexCoordPointerType, UInt32, void>)Load("glTexCoordP4ui", 923))(type, coords);
        }

        public unsafe partial void TexCoordP4(TexCoordPointerType type, uint *coords)
        {
            ((delegate *cdecl<TexCoordPointerType,, void>)Load("glTexCoordP4uiv", 924))(type, coords);
        }

        public partial void TexCoordP4(TexCoordPointerType type, ref uint coords)
        {
            ((delegate *cdecl<TexCoordPointerType, UInt32, void>)Load("glTexCoordP4uiv", 925))(type, coords);
        }

        public partial void VertexAttribP1(uint index, VertexAttribPointerType type, bool normalized, uint value)
        {
            ((delegate *cdecl<UInt32, VertexAttribPointerType, Boolean, UInt32, void>)Load("glVertexAttribP1ui", 926))(index, type, normalized, value);
        }

        public unsafe partial void VertexAttribP1(uint index, VertexAttribPointerType type, bool normalized, uint *value)
        {
            ((delegate *cdecl<UInt32, VertexAttribPointerType, Boolean,, void>)Load("glVertexAttribP1uiv", 927))(index, type, normalized, value);
        }

        public partial void VertexAttribP1(uint index, VertexAttribPointerType type, bool normalized, ref uint value)
        {
            ((delegate *cdecl<UInt32, VertexAttribPointerType, Boolean, UInt32, void>)Load("glVertexAttribP1uiv", 928))(index, type, normalized, value);
        }

        public partial void VertexAttribP2(uint index, VertexAttribPointerType type, bool normalized, uint value)
        {
            ((delegate *cdecl<UInt32, VertexAttribPointerType, Boolean, UInt32, void>)Load("glVertexAttribP2ui", 929))(index, type, normalized, value);
        }

        public unsafe partial void VertexAttribP2(uint index, VertexAttribPointerType type, bool normalized, uint *value)
        {
            ((delegate *cdecl<UInt32, VertexAttribPointerType, Boolean,, void>)Load("glVertexAttribP2uiv", 930))(index, type, normalized, value);
        }

        public partial void VertexAttribP2(uint index, VertexAttribPointerType type, bool normalized, ref uint value)
        {
            ((delegate *cdecl<UInt32, VertexAttribPointerType, Boolean, UInt32, void>)Load("glVertexAttribP2uiv", 931))(index, type, normalized, value);
        }

        public partial void VertexAttribP3(uint index, VertexAttribPointerType type, bool normalized, uint value)
        {
            ((delegate *cdecl<UInt32, VertexAttribPointerType, Boolean, UInt32, void>)Load("glVertexAttribP3ui", 932))(index, type, normalized, value);
        }

        public unsafe partial void VertexAttribP3(uint index, VertexAttribPointerType type, bool normalized, uint *value)
        {
            ((delegate *cdecl<UInt32, VertexAttribPointerType, Boolean,, void>)Load("glVertexAttribP3uiv", 933))(index, type, normalized, value);
        }

        public partial void VertexAttribP3(uint index, VertexAttribPointerType type, bool normalized, ref uint value)
        {
            ((delegate *cdecl<UInt32, VertexAttribPointerType, Boolean, UInt32, void>)Load("glVertexAttribP3uiv", 934))(index, type, normalized, value);
        }

        public partial void VertexAttribP4(uint index, VertexAttribPointerType type, bool normalized, uint value)
        {
            ((delegate *cdecl<UInt32, VertexAttribPointerType, Boolean, UInt32, void>)Load("glVertexAttribP4ui", 935))(index, type, normalized, value);
        }

        public unsafe partial void VertexAttribP4(uint index, VertexAttribPointerType type, bool normalized, uint *value)
        {
            ((delegate *cdecl<UInt32, VertexAttribPointerType, Boolean,, void>)Load("glVertexAttribP4uiv", 936))(index, type, normalized, value);
        }

        public partial void VertexAttribP4(uint index, VertexAttribPointerType type, bool normalized, ref uint value)
        {
            ((delegate *cdecl<UInt32, VertexAttribPointerType, Boolean, UInt32, void>)Load("glVertexAttribP4uiv", 937))(index, type, normalized, value);
        }

        public partial void VertexP2(VertexPointerType type, uint value)
        {
            ((delegate *cdecl<VertexPointerType, UInt32, void>)Load("glVertexP2ui", 938))(type, value);
        }

        public unsafe partial void VertexP2(VertexPointerType type, uint *value)
        {
            ((delegate *cdecl<VertexPointerType,, void>)Load("glVertexP2uiv", 939))(type, value);
        }

        public partial void VertexP2(VertexPointerType type, ref uint value)
        {
            ((delegate *cdecl<VertexPointerType, UInt32, void>)Load("glVertexP2uiv", 940))(type, value);
        }

        public partial void VertexP3(VertexPointerType type, uint value)
        {
            ((delegate *cdecl<VertexPointerType, UInt32, void>)Load("glVertexP3ui", 941))(type, value);
        }

        public unsafe partial void VertexP3(VertexPointerType type, uint *value)
        {
            ((delegate *cdecl<VertexPointerType,, void>)Load("glVertexP3uiv", 942))(type, value);
        }

        public partial void VertexP3(VertexPointerType type, ref uint value)
        {
            ((delegate *cdecl<VertexPointerType, UInt32, void>)Load("glVertexP3uiv", 943))(type, value);
        }

        public partial void VertexP4(VertexPointerType type, uint value)
        {
            ((delegate *cdecl<VertexPointerType, UInt32, void>)Load("glVertexP4ui", 944))(type, value);
        }

        public unsafe partial void VertexP4(VertexPointerType type, uint *value)
        {
            ((delegate *cdecl<VertexPointerType,, void>)Load("glVertexP4uiv", 945))(type, value);
        }

        public partial void VertexP4(VertexPointerType type, ref uint value)
        {
            ((delegate *cdecl<VertexPointerType, UInt32, void>)Load("glVertexP4uiv", 946))(type, value);
        }

        public partial void DeleteSync(IntPtr sync)
        {
            ((delegate *cdecl<IntPtr, void>)Load("glDeleteSync", 948))(sync);
        }

        public unsafe partial void DrawElementsBaseVertex(GLEnum mode, uint count, GLEnum type, void *indices, int basevertex)
        {
            ((delegate *cdecl<GLEnum, UInt32, GLEnum,, Int32, void>)Load("glDrawElementsBaseVertex", 949))(mode, count, type, indices, basevertex);
        }

        public partial void DrawElementsBaseVertex<T0>(GLEnum mode, uint count, GLEnum type, ref T0 indices, int basevertex)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, UInt32, GLEnum, T0, Int32, void>)Load("glDrawElementsBaseVertex", 950))(mode, count, type, indices, basevertex);
        }

        public unsafe partial void DrawElementsInstancedBaseVertex(GLEnum mode, uint count, GLEnum type, void *indices, uint instancecount, int basevertex)
        {
            ((delegate *cdecl<GLEnum, UInt32, GLEnum,, UInt32, Int32, void>)Load("glDrawElementsInstancedBaseVertex", 951))(mode, count, type, indices, instancecount, basevertex);
        }

        public partial void DrawElementsInstancedBaseVertex<T0>(GLEnum mode, uint count, GLEnum type, ref T0 indices, uint instancecount, int basevertex)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, UInt32, GLEnum, T0, UInt32, Int32, void>)Load("glDrawElementsInstancedBaseVertex", 952))(mode, count, type, indices, instancecount, basevertex);
        }

        public unsafe partial void DrawRangeElementsBaseVertex(GLEnum mode, uint start, uint end, uint count, GLEnum type, void *indices, int basevertex)
        {
            ((delegate *cdecl<GLEnum, UInt32, UInt32, UInt32, GLEnum,, Int32, void>)Load("glDrawRangeElementsBaseVertex", 953))(mode, start, end, count, type, indices, basevertex);
        }

        public partial void DrawRangeElementsBaseVertex<T0>(GLEnum mode, uint start, uint end, uint count, GLEnum type, ref T0 indices, int basevertex)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, UInt32, UInt32, UInt32, GLEnum, T0, Int32, void>)Load("glDrawRangeElementsBaseVertex", 954))(mode, start, end, count, type, indices, basevertex);
        }

        public partial void FramebufferTexture(GLEnum target, GLEnum attachment, uint texture, int level)
        {
            ((delegate *cdecl<GLEnum, GLEnum, UInt32, Int32, void>)Load("glFramebufferTexture", 956))(target, attachment, texture, level);
        }

        public unsafe partial void GetBufferParameter(GLEnum target, GLEnum pname, long *@params)
        {
            ((delegate *cdecl<GLEnum, GLEnum,, void>)Load("glGetBufferParameteri64v", 957))(target, pname, params);
        }

        public partial void GetBufferParameter(GLEnum target, GLEnum pname, out long @params)
        {
            ((delegate *cdecl<GLEnum, GLEnum, Int64, void>)Load("glGetBufferParameteri64v", 958))(target, pname, params);
        }

        public unsafe partial void GetInteger64(GLEnum pname, long *data)
        {
            ((delegate *cdecl<GLEnum,, void>)Load("glGetInteger64v", 959))(pname, data);
        }

        public partial void GetInteger64(GLEnum pname, out long data)
        {
            ((delegate *cdecl<GLEnum, Int64, void>)Load("glGetInteger64v", 960))(pname, data);
        }

        public unsafe partial void GetInteger64(GLEnum target, uint index, long *data)
        {
            ((delegate *cdecl<GLEnum, UInt32,, void>)Load("glGetInteger64i_v", 961))(target, index, data);
        }

        public partial void GetInteger64(GLEnum target, uint index, out long data)
        {
            ((delegate *cdecl<GLEnum, UInt32, Int64, void>)Load("glGetInteger64i_v", 962))(target, index, data);
        }

        public unsafe partial void GetMultisample(GLEnum pname, uint index, float *val)
        {
            ((delegate *cdecl<GLEnum, UInt32,, void>)Load("glGetMultisamplefv", 963))(pname, index, val);
        }

        public partial void GetMultisample(GLEnum pname, uint index, out float val)
        {
            ((delegate *cdecl<GLEnum, UInt32, Single, void>)Load("glGetMultisamplefv", 964))(pname, index, val);
        }

        public unsafe partial void GetSync(IntPtr sync, GLEnum pname, uint count, uint *length, int *values)
        {
            ((delegate *cdecl<IntPtr, GLEnum, UInt32,,, void>)Load("glGetSynciv", 965))(sync, pname, count, length, values);
        }

        public partial void GetSync(IntPtr sync, GLEnum pname, uint count, out uint length, Span<int> values)
        {
            ((delegate *cdecl<IntPtr, GLEnum, UInt32, UInt32, Span, void>)Load("glGetSynciv", 966))(sync, pname, count, length, values);
        }

        public partial bool IsSync(IntPtr sync)
        {
            return ((delegate *cdecl<IntPtr, byte>)Load("glIsSync", 967))(sync) == 1;
        }

        public unsafe partial void MultiDrawElementsBaseVertex(GLEnum mode, uint *count, GLEnum type, void **indices, uint drawcount, int *basevertex)
        {
            ((delegate *cdecl<GLEnum,, GLEnum,, UInt32,, void>)Load("glMultiDrawElementsBaseVertex", 968))(mode, count, type, indices, drawcount, basevertex);
        }

        public unsafe partial void MultiDrawElementsBaseVertex<T0>(GLEnum mode, ref uint count, GLEnum type, ref T0*indices, uint drawcount, ref int basevertex)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, UInt32, GLEnum,, UInt32, Int32, void>)Load("glMultiDrawElementsBaseVertex", 969))(mode, count, type, indices, drawcount, basevertex);
        }

        public partial void ProvokingVertex(GLEnum mode)
        {
            ((delegate *cdecl<GLEnum, void>)Load("glProvokingVertex", 970))(mode);
        }

        public partial void SampleMask(uint maskNumber, uint mask)
        {
            ((delegate *cdecl<UInt32, UInt32, void>)Load("glSampleMaski", 971))(maskNumber, mask);
        }

        public partial void TexImage2DMultisample(GLEnum target, uint samples, GLEnum internalformat, uint width, uint height, bool fixedsamplelocations)
        {
            ((delegate *cdecl<GLEnum, UInt32, GLEnum, UInt32, UInt32, Boolean, void>)Load("glTexImage2DMultisample", 972))(target, samples, internalformat, width, height, fixedsamplelocations);
        }

        public partial void TexImage3DMultisample(GLEnum target, uint samples, GLEnum internalformat, uint width, uint height, uint depth, bool fixedsamplelocations)
        {
            ((delegate *cdecl<GLEnum, UInt32, GLEnum, UInt32, UInt32, UInt32, Boolean, void>)Load("glTexImage3DMultisample", 973))(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }

        public partial void WaitSync(IntPtr sync, uint flags, ulong timeout)
        {
            ((delegate *cdecl<IntPtr, UInt32, UInt64, void>)Load("glWaitSync", 974))(sync, flags, timeout);
        }

        public unsafe partial void DrawElementsBaseVertex(PrimitiveType mode, uint count, DrawElementsType type, void *indices, int basevertex)
        {
            ((delegate *cdecl<PrimitiveType, UInt32, DrawElementsType,, Int32, void>)Load("glDrawElementsBaseVertex", 975))(mode, count, type, indices, basevertex);
        }

        public partial void DrawElementsBaseVertex<T0>(PrimitiveType mode, uint count, DrawElementsType type, ref T0 indices, int basevertex)
            where T0 : unmanaged
        {
            ((delegate *cdecl<PrimitiveType, UInt32, DrawElementsType, T0, Int32, void>)Load("glDrawElementsBaseVertex", 976))(mode, count, type, indices, basevertex);
        }

        public unsafe partial void DrawElementsInstancedBaseVertex(PrimitiveType mode, uint count, DrawElementsType type, void *indices, uint instancecount, int basevertex)
        {
            ((delegate *cdecl<PrimitiveType, UInt32, DrawElementsType,, UInt32, Int32, void>)Load("glDrawElementsInstancedBaseVertex", 977))(mode, count, type, indices, instancecount, basevertex);
        }

        public partial void DrawElementsInstancedBaseVertex<T0>(PrimitiveType mode, uint count, DrawElementsType type, ref T0 indices, uint instancecount, int basevertex)
            where T0 : unmanaged
        {
            ((delegate *cdecl<PrimitiveType, UInt32, DrawElementsType, T0, UInt32, Int32, void>)Load("glDrawElementsInstancedBaseVertex", 978))(mode, count, type, indices, instancecount, basevertex);
        }

        public unsafe partial void DrawRangeElementsBaseVertex(PrimitiveType mode, uint start, uint end, uint count, DrawElementsType type, void *indices, int basevertex)
        {
            ((delegate *cdecl<PrimitiveType, UInt32, UInt32, UInt32, DrawElementsType,, Int32, void>)Load("glDrawRangeElementsBaseVertex", 979))(mode, start, end, count, type, indices, basevertex);
        }

        public partial void DrawRangeElementsBaseVertex<T0>(PrimitiveType mode, uint start, uint end, uint count, DrawElementsType type, ref T0 indices, int basevertex)
            where T0 : unmanaged
        {
            ((delegate *cdecl<PrimitiveType, UInt32, UInt32, UInt32, DrawElementsType, T0, Int32, void>)Load("glDrawRangeElementsBaseVertex", 980))(mode, start, end, count, type, indices, basevertex);
        }

        public partial void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level)
        {
            ((delegate *cdecl<FramebufferTarget, FramebufferAttachment, UInt32, Int32, void>)Load("glFramebufferTexture", 982))(target, attachment, texture, level);
        }

        public unsafe partial void GetBufferParameter(BufferTargetARB target, BufferPNameARB pname, long *@params)
        {
            ((delegate *cdecl<BufferTargetARB, BufferPNameARB,, void>)Load("glGetBufferParameteri64v", 983))(target, pname, params);
        }

        public partial void GetBufferParameter(BufferTargetARB target, BufferPNameARB pname, out long @params)
        {
            ((delegate *cdecl<BufferTargetARB, BufferPNameARB, Int64, void>)Load("glGetBufferParameteri64v", 984))(target, pname, params);
        }

        public unsafe partial void GetInteger64(GetPName pname, long *data)
        {
            ((delegate *cdecl<GetPName,, void>)Load("glGetInteger64v", 985))(pname, data);
        }

        public partial void GetInteger64(GetPName pname, out long data)
        {
            ((delegate *cdecl<GetPName, Int64, void>)Load("glGetInteger64v", 986))(pname, data);
        }

        public unsafe partial void GetMultisample(GetMultisamplePNameNV pname, uint index, float *val)
        {
            ((delegate *cdecl<GetMultisamplePNameNV, UInt32,, void>)Load("glGetMultisamplefv", 987))(pname, index, val);
        }

        public partial void GetMultisample(GetMultisamplePNameNV pname, uint index, out float val)
        {
            ((delegate *cdecl<GetMultisamplePNameNV, UInt32, Single, void>)Load("glGetMultisamplefv", 988))(pname, index, val);
        }

        public unsafe partial void GetSync(IntPtr sync, SyncParameterName pname, uint count, uint *length, int *values)
        {
            ((delegate *cdecl<IntPtr, SyncParameterName, UInt32,,, void>)Load("glGetSynciv", 989))(sync, pname, count, length, values);
        }

        public partial void GetSync(IntPtr sync, SyncParameterName pname, uint count, out uint length, Span<int> values)
        {
            ((delegate *cdecl<IntPtr, SyncParameterName, UInt32, UInt32, Span, void>)Load("glGetSynciv", 990))(sync, pname, count, length, values);
        }

        public unsafe partial void MultiDrawElementsBaseVertex(PrimitiveType mode, uint *count, DrawElementsType type, void **indices, uint drawcount, int *basevertex)
        {
            ((delegate *cdecl<PrimitiveType,, DrawElementsType,, UInt32,, void>)Load("glMultiDrawElementsBaseVertex", 991))(mode, count, type, indices, drawcount, basevertex);
        }

        public unsafe partial void MultiDrawElementsBaseVertex<T0>(PrimitiveType mode, ref uint count, DrawElementsType type, ref T0*indices, uint drawcount, ref int basevertex)
            where T0 : unmanaged
        {
            ((delegate *cdecl<PrimitiveType, UInt32, DrawElementsType,, UInt32, Int32, void>)Load("glMultiDrawElementsBaseVertex", 992))(mode, count, type, indices, drawcount, basevertex);
        }

        public partial void ProvokingVertex(VertexProvokingMode mode)
        {
            ((delegate *cdecl<VertexProvokingMode, void>)Load("glProvokingVertex", 993))(mode);
        }

        public partial void TexImage2DMultisample(TextureTarget target, uint samples, InternalFormat internalformat, uint width, uint height, bool fixedsamplelocations)
        {
            ((delegate *cdecl<TextureTarget, UInt32, InternalFormat, UInt32, UInt32, Boolean, void>)Load("glTexImage2DMultisample", 994))(target, samples, internalformat, width, height, fixedsamplelocations);
        }

        public partial void TexImage3DMultisample(TextureTarget target, uint samples, InternalFormat internalformat, uint width, uint height, uint depth, bool fixedsamplelocations)
        {
            ((delegate *cdecl<TextureTarget, UInt32, InternalFormat, UInt32, UInt32, UInt32, Boolean, void>)Load("glTexImage3DMultisample", 995))(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }

        public partial void BindBufferBase(GLEnum target, uint index, uint buffer)
        {
            ((delegate *cdecl<GLEnum, UInt32, UInt32, void>)Load("glBindBufferBase", 996))(target, index, buffer);
        }

        public partial void BindBufferRange(GLEnum target, uint index, uint buffer, IntPtr offset, UIntPtr size)
        {
            ((delegate *cdecl<GLEnum, UInt32, UInt32, IntPtr, UIntPtr, void>)Load("glBindBufferRange", 997))(target, index, buffer, offset, size);
        }

        public partial void CopyBufferSubData(GLEnum readTarget, GLEnum writeTarget, IntPtr readOffset, IntPtr writeOffset, UIntPtr size)
        {
            ((delegate *cdecl<GLEnum, GLEnum, IntPtr, IntPtr, UIntPtr, void>)Load("glCopyBufferSubData", 998))(readTarget, writeTarget, readOffset, writeOffset, size);
        }

        public partial void DrawArraysInstanced(GLEnum mode, int first, uint count, uint instancecount)
        {
            ((delegate *cdecl<GLEnum, Int32, UInt32, UInt32, void>)Load("glDrawArraysInstanced", 999))(mode, first, count, instancecount);
        }

        public unsafe partial void DrawElementsInstanced(GLEnum mode, uint count, GLEnum type, void *indices, uint instancecount)
        {
            ((delegate *cdecl<GLEnum, UInt32, GLEnum,, UInt32, void>)Load("glDrawElementsInstanced", 1000))(mode, count, type, indices, instancecount);
        }

        public partial void DrawElementsInstanced<T0>(GLEnum mode, uint count, GLEnum type, ref T0 indices, uint instancecount)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, UInt32, GLEnum, T0, UInt32, void>)Load("glDrawElementsInstanced", 1001))(mode, count, type, indices, instancecount);
        }

        public unsafe partial void GetActiveUniformBlock(uint program, uint uniformBlockIndex, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<UInt32, UInt32, GLEnum,, void>)Load("glGetActiveUniformBlockiv", 1002))(program, uniformBlockIndex, pname, params);
        }

        public partial void GetActiveUniformBlock(uint program, uint uniformBlockIndex, GLEnum pname, out int @params)
        {
            ((delegate *cdecl<UInt32, UInt32, GLEnum, Int32, void>)Load("glGetActiveUniformBlockiv", 1003))(program, uniformBlockIndex, pname, params);
        }

        public unsafe partial void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, uint bufSize, uint *length, byte *uniformBlockName)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32,,, void>)Load("glGetActiveUniformBlockName", 1004))(program, uniformBlockIndex, bufSize, length, uniformBlockName);
        }

        public partial void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, uint bufSize, out uint length, Span<byte> uniformBlockName)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, UInt32, Span, void>)Load("glGetActiveUniformBlockName", 1005))(program, uniformBlockIndex, bufSize, length, uniformBlockName);
        }

        public unsafe partial void GetActiveUniformName(uint program, uint uniformIndex, uint bufSize, uint *length, byte *uniformName)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32,,, void>)Load("glGetActiveUniformName", 1006))(program, uniformIndex, bufSize, length, uniformName);
        }

        public partial void GetActiveUniformName(uint program, uint uniformIndex, uint bufSize, out uint length, Span<byte> uniformName)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, UInt32, Span, void>)Load("glGetActiveUniformName", 1007))(program, uniformIndex, bufSize, length, uniformName);
        }

        public unsafe partial void GetActiveUniforms(uint program, uint uniformCount, uint *uniformIndices, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<UInt32, UInt32,, GLEnum,, void>)Load("glGetActiveUniformsiv", 1008))(program, uniformCount, uniformIndices, pname, params);
        }

        public partial void GetActiveUniforms(uint program, uint uniformCount, Span<uint> uniformIndices, GLEnum pname, out int @params)
        {
            ((delegate *cdecl<UInt32, UInt32, Span, GLEnum, Int32, void>)Load("glGetActiveUniformsiv", 1009))(program, uniformCount, uniformIndices, pname, params);
        }

        public unsafe partial void GetInteger(GLEnum target, uint index, int *data)
        {
            ((delegate *cdecl<GLEnum, UInt32,, void>)Load("glGetIntegeri_v", 1010))(target, index, data);
        }

        public partial void GetInteger(GLEnum target, uint index, out int data)
        {
            ((delegate *cdecl<GLEnum, UInt32, Int32, void>)Load("glGetIntegeri_v", 1011))(target, index, data);
        }

        public unsafe partial void GetUniformIndices(uint program, uint uniformCount, byte **uniformNames, uint *uniformIndices)
        {
            ((delegate *cdecl<UInt32, UInt32,,, void>)Load("glGetUniformIndices", 1014))(program, uniformCount, uniformNames, uniformIndices);
        }

        public unsafe partial void GetUniformIndices(uint program, uint uniformCount, ref byte *uniformNames, out uint uniformIndices)
        {
            ((delegate *cdecl<UInt32, UInt32,, UInt32, void>)Load("glGetUniformIndices", 1015))(program, uniformCount, uniformNames, uniformIndices);
        }

        public partial void PrimitiveRestartIndex(uint index)
        {
            ((delegate *cdecl<UInt32, void>)Load("glPrimitiveRestartIndex", 1016))(index);
        }

        public partial void TexBuffer(GLEnum target, GLEnum internalformat, uint buffer)
        {
            ((delegate *cdecl<GLEnum, GLEnum, UInt32, void>)Load("glTexBuffer", 1017))(target, internalformat, buffer);
        }

        public partial void UniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, void>)Load("glUniformBlockBinding", 1018))(program, uniformBlockIndex, uniformBlockBinding);
        }

        public partial void BindBufferBase(BufferTargetARB target, uint index, uint buffer)
        {
            ((delegate *cdecl<BufferTargetARB, UInt32, UInt32, void>)Load("glBindBufferBase", 1019))(target, index, buffer);
        }

        public partial void BindBufferRange(BufferTargetARB target, uint index, uint buffer, IntPtr offset, UIntPtr size)
        {
            ((delegate *cdecl<BufferTargetARB, UInt32, UInt32, IntPtr, UIntPtr, void>)Load("glBindBufferRange", 1020))(target, index, buffer, offset, size);
        }

        public partial void CopyBufferSubData(CopyBufferSubDataTarget readTarget, CopyBufferSubDataTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, UIntPtr size)
        {
            ((delegate *cdecl<CopyBufferSubDataTarget, CopyBufferSubDataTarget, IntPtr, IntPtr, UIntPtr, void>)Load("glCopyBufferSubData", 1021))(readTarget, writeTarget, readOffset, writeOffset, size);
        }

        public partial void DrawArraysInstanced(PrimitiveType mode, int first, uint count, uint instancecount)
        {
            ((delegate *cdecl<PrimitiveType, Int32, UInt32, UInt32, void>)Load("glDrawArraysInstanced", 1022))(mode, first, count, instancecount);
        }

        public unsafe partial void DrawElementsInstanced(PrimitiveType mode, uint count, DrawElementsType type, void *indices, uint instancecount)
        {
            ((delegate *cdecl<PrimitiveType, UInt32, DrawElementsType,, UInt32, void>)Load("glDrawElementsInstanced", 1023))(mode, count, type, indices, instancecount);
        }

        public partial void DrawElementsInstanced<T0>(PrimitiveType mode, uint count, DrawElementsType type, ref T0 indices, uint instancecount)
            where T0 : unmanaged
        {
            ((delegate *cdecl<PrimitiveType, UInt32, DrawElementsType, T0, UInt32, void>)Load("glDrawElementsInstanced", 1024))(mode, count, type, indices, instancecount);
        }

        public unsafe partial void GetActiveUniformBlock(uint program, uint uniformBlockIndex, UniformBlockPName pname, int *@params)
        {
            ((delegate *cdecl<UInt32, UInt32, UniformBlockPName,, void>)Load("glGetActiveUniformBlockiv", 1025))(program, uniformBlockIndex, pname, params);
        }

        public partial void GetActiveUniformBlock(uint program, uint uniformBlockIndex, UniformBlockPName pname, out int @params)
        {
            ((delegate *cdecl<UInt32, UInt32, UniformBlockPName, Int32, void>)Load("glGetActiveUniformBlockiv", 1026))(program, uniformBlockIndex, pname, params);
        }

        public unsafe partial void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, uint bufSize, uint *length, out string uniformBlockName)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32,, String, void>)Load("glGetActiveUniformBlockName", 1027))(program, uniformBlockIndex, bufSize, length, uniformBlockName);
        }

        public partial void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, uint bufSize, out uint length, out string uniformBlockName)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, UInt32, String, void>)Load("glGetActiveUniformBlockName", 1028))(program, uniformBlockIndex, bufSize, length, uniformBlockName);
        }

        public unsafe partial void GetActiveUniformName(uint program, uint uniformIndex, uint bufSize, uint *length, out string uniformName)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32,, String, void>)Load("glGetActiveUniformName", 1029))(program, uniformIndex, bufSize, length, uniformName);
        }

        public partial void GetActiveUniformName(uint program, uint uniformIndex, uint bufSize, out uint length, out string uniformName)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, UInt32, String, void>)Load("glGetActiveUniformName", 1030))(program, uniformIndex, bufSize, length, uniformName);
        }

        public unsafe partial void GetActiveUniforms(uint program, uint uniformCount, uint *uniformIndices, UniformPName pname, int *@params)
        {
            ((delegate *cdecl<UInt32, UInt32,, UniformPName,, void>)Load("glGetActiveUniformsiv", 1031))(program, uniformCount, uniformIndices, pname, params);
        }

        public partial void GetActiveUniforms(uint program, uint uniformCount, Span<uint> uniformIndices, UniformPName pname, out int @params)
        {
            ((delegate *cdecl<UInt32, UInt32, Span, UniformPName, Int32, void>)Load("glGetActiveUniformsiv", 1032))(program, uniformCount, uniformIndices, pname, params);
        }

        public partial void TexBuffer(TextureTarget target, InternalFormat internalformat, uint buffer)
        {
            ((delegate *cdecl<TextureTarget, InternalFormat, UInt32, void>)Load("glTexBuffer", 1034))(target, internalformat, buffer);
        }

        public partial void BeginConditionalRender(uint id, GLEnum mode)
        {
            ((delegate *cdecl<UInt32, GLEnum, void>)Load("glBeginConditionalRender", 1035))(id, mode);
        }

        public partial void BeginTransformFeedback(GLEnum primitiveMode)
        {
            ((delegate *cdecl<GLEnum, void>)Load("glBeginTransformFeedback", 1036))(primitiveMode);
        }

        public unsafe partial void BindFragDataLocation(uint program, uint color, byte *name)
        {
            ((delegate *cdecl<UInt32, UInt32,, void>)Load("glBindFragDataLocation", 1037))(program, color, name);
        }

        public partial void BindFragDataLocation(uint program, uint color, ref byte name)
        {
            ((delegate *cdecl<UInt32, UInt32, Byte, void>)Load("glBindFragDataLocation", 1038))(program, color, name);
        }

        public partial void BindFramebuffer(GLEnum target, uint framebuffer)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glBindFramebuffer", 1039))(target, framebuffer);
        }

        public partial void BindRenderbuffer(GLEnum target, uint renderbuffer)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glBindRenderbuffer", 1040))(target, renderbuffer);
        }

        public partial void BindVertexArray(uint array)
        {
            ((delegate *cdecl<UInt32, void>)Load("glBindVertexArray", 1041))(array);
        }

        public partial void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, GLEnum filter)
        {
            ((delegate *cdecl<Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, UInt32, GLEnum, void>)Load("glBlitFramebuffer", 1042))(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }

        public partial void ClampColor(GLEnum target, GLEnum clamp)
        {
            ((delegate *cdecl<GLEnum, GLEnum, void>)Load("glClampColor", 1044))(target, clamp);
        }

        public unsafe partial void ClearBuffer(GLEnum buffer, int drawbuffer, int *value)
        {
            ((delegate *cdecl<GLEnum, Int32,, void>)Load("glClearBufferiv", 1045))(buffer, drawbuffer, value);
        }

        public partial void ClearBuffer(GLEnum buffer, int drawbuffer, ref int value)
        {
            ((delegate *cdecl<GLEnum, Int32, Int32, void>)Load("glClearBufferiv", 1046))(buffer, drawbuffer, value);
        }

        public unsafe partial void ClearBuffer(GLEnum buffer, int drawbuffer, uint *value)
        {
            ((delegate *cdecl<GLEnum, Int32,, void>)Load("glClearBufferuiv", 1047))(buffer, drawbuffer, value);
        }

        public partial void ClearBuffer(GLEnum buffer, int drawbuffer, ref uint value)
        {
            ((delegate *cdecl<GLEnum, Int32, UInt32, void>)Load("glClearBufferuiv", 1048))(buffer, drawbuffer, value);
        }

        public unsafe partial void ClearBuffer(GLEnum buffer, int drawbuffer, float *value)
        {
            ((delegate *cdecl<GLEnum, Int32,, void>)Load("glClearBufferfv", 1049))(buffer, drawbuffer, value);
        }

        public partial void ClearBuffer(GLEnum buffer, int drawbuffer, ref float value)
        {
            ((delegate *cdecl<GLEnum, Int32, Single, void>)Load("glClearBufferfv", 1050))(buffer, drawbuffer, value);
        }

        public partial void ClearBuffer(GLEnum buffer, int drawbuffer, float depth, int stencil)
        {
            ((delegate *cdecl<GLEnum, Int32, Single, Int32, void>)Load("glClearBufferfi", 1051))(buffer, drawbuffer, depth, stencil);
        }

        public partial void ColorMask(uint index, bool r, bool g, bool b, bool a)
        {
            ((delegate *cdecl<UInt32, Boolean, Boolean, Boolean, Boolean, void>)Load("glColorMaski", 1052))(index, r, g, b, a);
        }

        public unsafe partial void DeleteFramebuffers(uint n, uint *framebuffers)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glDeleteFramebuffers", 1053))(n, framebuffers);
        }

        public partial void DeleteFramebuffers(uint n, Span<uint> framebuffers)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glDeleteFramebuffers", 1054))(n, framebuffers);
        }

        public unsafe partial void DeleteRenderbuffers(uint n, uint *renderbuffers)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glDeleteRenderbuffers", 1055))(n, renderbuffers);
        }

        public partial void DeleteRenderbuffers(uint n, Span<uint> renderbuffers)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glDeleteRenderbuffers", 1056))(n, renderbuffers);
        }

        public unsafe partial void DeleteVertexArrays(uint n, uint *arrays)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glDeleteVertexArrays", 1057))(n, arrays);
        }

        public partial void DeleteVertexArrays(uint n, Span<uint> arrays)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glDeleteVertexArrays", 1058))(n, arrays);
        }

        public partial void Disable(GLEnum target, uint index)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glDisablei", 1059))(target, index);
        }

        public partial void Enable(GLEnum target, uint index)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glEnablei", 1060))(target, index);
        }

        public partial void EndConditionalRender()
        {
            ((delegate *cdecl<void>)Load("glEndConditionalRender", 1061))();
        }

        public partial void EndTransformFeedback()
        {
            ((delegate *cdecl<void>)Load("glEndTransformFeedback", 1062))();
        }

        public partial void FlushMappedBufferRange(GLEnum target, IntPtr offset, UIntPtr length)
        {
            ((delegate *cdecl<GLEnum, IntPtr, UIntPtr, void>)Load("glFlushMappedBufferRange", 1063))(target, offset, length);
        }

        public partial void FramebufferRenderbuffer(GLEnum target, GLEnum attachment, GLEnum renderbuffertarget, uint renderbuffer)
        {
            ((delegate *cdecl<GLEnum, GLEnum, GLEnum, UInt32, void>)Load("glFramebufferRenderbuffer", 1064))(target, attachment, renderbuffertarget, renderbuffer);
        }

        public partial void FramebufferTexture1D(GLEnum target, GLEnum attachment, GLEnum textarget, uint texture, int level)
        {
            ((delegate *cdecl<GLEnum, GLEnum, GLEnum, UInt32, Int32, void>)Load("glFramebufferTexture1D", 1065))(target, attachment, textarget, texture, level);
        }

        public partial void FramebufferTexture2D(GLEnum target, GLEnum attachment, GLEnum textarget, uint texture, int level)
        {
            ((delegate *cdecl<GLEnum, GLEnum, GLEnum, UInt32, Int32, void>)Load("glFramebufferTexture2D", 1066))(target, attachment, textarget, texture, level);
        }

        public partial void FramebufferTexture3D(GLEnum target, GLEnum attachment, GLEnum textarget, uint texture, int level, int zoffset)
        {
            ((delegate *cdecl<GLEnum, GLEnum, GLEnum, UInt32, Int32, Int32, void>)Load("glFramebufferTexture3D", 1067))(target, attachment, textarget, texture, level, zoffset);
        }

        public partial void FramebufferTextureLayer(GLEnum target, GLEnum attachment, uint texture, int level, int layer)
        {
            ((delegate *cdecl<GLEnum, GLEnum, UInt32, Int32, Int32, void>)Load("glFramebufferTextureLayer", 1068))(target, attachment, texture, level, layer);
        }

        public partial void GenerateMipmap(GLEnum target)
        {
            ((delegate *cdecl<GLEnum, void>)Load("glGenerateMipmap", 1069))(target);
        }

        public unsafe partial void GenFramebuffers(uint n, uint *framebuffers)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glGenFramebuffers", 1070))(n, framebuffers);
        }

        public partial void GenFramebuffers(uint n, Span<uint> framebuffers)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glGenFramebuffers", 1071))(n, framebuffers);
        }

        public unsafe partial void GenRenderbuffers(uint n, uint *renderbuffers)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glGenRenderbuffers", 1072))(n, renderbuffers);
        }

        public partial void GenRenderbuffers(uint n, Span<uint> renderbuffers)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glGenRenderbuffers", 1073))(n, renderbuffers);
        }

        public unsafe partial void GenVertexArrays(uint n, uint *arrays)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glGenVertexArrays", 1074))(n, arrays);
        }

        public partial void GenVertexArrays(uint n, Span<uint> arrays)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glGenVertexArrays", 1075))(n, arrays);
        }

        public unsafe partial void GetBoolean(GLEnum target, uint index, bool *data)
        {
            ((delegate *cdecl<GLEnum, UInt32,, void>)Load("glGetBooleani_v", 1076))(target, index, data);
        }

        public partial void GetBoolean(GLEnum target, uint index, out bool data)
        {
            ((delegate *cdecl<GLEnum, UInt32, Boolean, void>)Load("glGetBooleani_v", 1077))(target, index, data);
        }

        public unsafe partial void GetFramebufferAttachmentParameter(GLEnum target, GLEnum attachment, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<GLEnum, GLEnum, GLEnum,, void>)Load("glGetFramebufferAttachmentParameteriv", 1080))(target, attachment, pname, params);
        }

        public partial void GetFramebufferAttachmentParameter(GLEnum target, GLEnum attachment, GLEnum pname, out int @params)
        {
            ((delegate *cdecl<GLEnum, GLEnum, GLEnum, Int32, void>)Load("glGetFramebufferAttachmentParameteriv", 1081))(target, attachment, pname, params);
        }

        public unsafe partial void GetRenderbufferParameter(GLEnum target, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<GLEnum, GLEnum,, void>)Load("glGetRenderbufferParameteriv", 1082))(target, pname, params);
        }

        public partial void GetRenderbufferParameter(GLEnum target, GLEnum pname, out int @params)
        {
            ((delegate *cdecl<GLEnum, GLEnum, Int32, void>)Load("glGetRenderbufferParameteriv", 1083))(target, pname, params);
        }

        public unsafe partial void GetTexParameterI(GLEnum target, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<GLEnum, GLEnum,, void>)Load("glGetTexParameterIiv", 1085))(target, pname, params);
        }

        public partial void GetTexParameterI(GLEnum target, GLEnum pname, out int @params)
        {
            ((delegate *cdecl<GLEnum, GLEnum, Int32, void>)Load("glGetTexParameterIiv", 1086))(target, pname, params);
        }

        public unsafe partial void GetTexParameterI(GLEnum target, GLEnum pname, uint *@params)
        {
            ((delegate *cdecl<GLEnum, GLEnum,, void>)Load("glGetTexParameterIuiv", 1087))(target, pname, params);
        }

        public partial void GetTexParameterI(GLEnum target, GLEnum pname, out uint @params)
        {
            ((delegate *cdecl<GLEnum, GLEnum, UInt32, void>)Load("glGetTexParameterIuiv", 1088))(target, pname, params);
        }

        public unsafe partial void GetTransformFeedbackVarying(uint program, uint index, uint bufSize, uint *length, uint *size, GLEnum*type, byte *name)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32,,,,, void>)Load("glGetTransformFeedbackVarying", 1089))(program, index, bufSize, length, size, type, name);
        }

        public partial void GetTransformFeedbackVarying(uint program, uint index, uint bufSize, out uint length, out uint size, out GLEnum type, Span<byte> name)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, UInt32, UInt32, GLEnum, Span, void>)Load("glGetTransformFeedbackVarying", 1090))(program, index, bufSize, length, size, type, name);
        }

        public unsafe partial void GetUniform(uint program, int location, uint *@params)
        {
            ((delegate *cdecl<UInt32, Int32,, void>)Load("glGetUniformuiv", 1091))(program, location, params);
        }

        public partial void GetUniform(uint program, int location, out uint @params)
        {
            ((delegate *cdecl<UInt32, Int32, UInt32, void>)Load("glGetUniformuiv", 1092))(program, location, params);
        }

        public unsafe partial void GetVertexAttribI(uint index, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetVertexAttribIiv", 1093))(index, pname, params);
        }

        public partial void GetVertexAttribI(uint index, GLEnum pname, out int @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, Int32, void>)Load("glGetVertexAttribIiv", 1094))(index, pname, params);
        }

        public unsafe partial void GetVertexAttribI(uint index, GLEnum pname, uint *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetVertexAttribIuiv", 1095))(index, pname, params);
        }

        public partial void GetVertexAttribI(uint index, GLEnum pname, out uint @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, UInt32, void>)Load("glGetVertexAttribIuiv", 1096))(index, pname, params);
        }

        public partial bool IsEnabled(GLEnum target, uint index)
        {
            return ((delegate *cdecl<GLEnum, UInt32, byte>)Load("glIsEnabledi", 1097))(target, index) == 1;
        }

        public partial bool IsFramebuffer(uint framebuffer)
        {
            return ((delegate *cdecl<UInt32, byte>)Load("glIsFramebuffer", 1098))(framebuffer) == 1;
        }

        public partial bool IsRenderbuffer(uint renderbuffer)
        {
            return ((delegate *cdecl<UInt32, byte>)Load("glIsRenderbuffer", 1099))(renderbuffer) == 1;
        }

        public partial bool IsVertexArray(uint array)
        {
            return ((delegate *cdecl<UInt32, byte>)Load("glIsVertexArray", 1100))(array) == 1;
        }

        public partial void RenderbufferStorage(GLEnum target, GLEnum internalformat, uint width, uint height)
        {
            ((delegate *cdecl<GLEnum, GLEnum, UInt32, UInt32, void>)Load("glRenderbufferStorage", 1102))(target, internalformat, width, height);
        }

        public partial void RenderbufferStorageMultisample(GLEnum target, uint samples, GLEnum internalformat, uint width, uint height)
        {
            ((delegate *cdecl<GLEnum, UInt32, GLEnum, UInt32, UInt32, void>)Load("glRenderbufferStorageMultisample", 1103))(target, samples, internalformat, width, height);
        }

        public unsafe partial void TexParameterI(GLEnum target, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<GLEnum, GLEnum,, void>)Load("glTexParameterIiv", 1104))(target, pname, params);
        }

        public partial void TexParameterI(GLEnum target, GLEnum pname, ref int @params)
        {
            ((delegate *cdecl<GLEnum, GLEnum, Int32, void>)Load("glTexParameterIiv", 1105))(target, pname, params);
        }

        public unsafe partial void TexParameterI(GLEnum target, GLEnum pname, uint *@params)
        {
            ((delegate *cdecl<GLEnum, GLEnum,, void>)Load("glTexParameterIuiv", 1106))(target, pname, params);
        }

        public partial void TexParameterI(GLEnum target, GLEnum pname, ref uint @params)
        {
            ((delegate *cdecl<GLEnum, GLEnum, UInt32, void>)Load("glTexParameterIuiv", 1107))(target, pname, params);
        }

        public unsafe partial void TransformFeedbackVaryings(uint program, uint count, byte **varyings, GLEnum bufferMode)
        {
            ((delegate *cdecl<UInt32, UInt32,, GLEnum, void>)Load("glTransformFeedbackVaryings", 1108))(program, count, varyings, bufferMode);
        }

        public partial void Uniform1(int location, uint v0)
        {
            ((delegate *cdecl<Int32, UInt32, void>)Load("glUniform1ui", 1109))(location, v0);
        }

        public unsafe partial void Uniform1(int location, uint count, uint *value)
        {
            ((delegate *cdecl<Int32, UInt32,, void>)Load("glUniform1uiv", 1110))(location, count, value);
        }

        public partial void Uniform1(int location, uint count, Span<uint> value)
        {
            ((delegate *cdecl<Int32, UInt32, Span, void>)Load("glUniform1uiv", 1111))(location, count, value);
        }

        public partial void Uniform2(int location, uint v0, uint v1)
        {
            ((delegate *cdecl<Int32, UInt32, UInt32, void>)Load("glUniform2ui", 1112))(location, v0, v1);
        }

        public unsafe partial void Uniform2(int location, uint count, uint *value)
        {
            ((delegate *cdecl<Int32, UInt32,, void>)Load("glUniform2uiv", 1113))(location, count, value);
        }

        public partial void Uniform2(int location, uint count, Span<uint> value)
        {
            ((delegate *cdecl<Int32, UInt32, Span, void>)Load("glUniform2uiv", 1114))(location, count, value);
        }

        public partial void Uniform3(int location, uint v0, uint v1, uint v2)
        {
            ((delegate *cdecl<Int32, UInt32, UInt32, UInt32, void>)Load("glUniform3ui", 1115))(location, v0, v1, v2);
        }

        public unsafe partial void Uniform3(int location, uint count, uint *value)
        {
            ((delegate *cdecl<Int32, UInt32,, void>)Load("glUniform3uiv", 1116))(location, count, value);
        }

        public partial void Uniform3(int location, uint count, Span<uint> value)
        {
            ((delegate *cdecl<Int32, UInt32, Span, void>)Load("glUniform3uiv", 1117))(location, count, value);
        }

        public partial void Uniform4(int location, uint v0, uint v1, uint v2, uint v3)
        {
            ((delegate *cdecl<Int32, UInt32, UInt32, UInt32, UInt32, void>)Load("glUniform4ui", 1118))(location, v0, v1, v2, v3);
        }

        public unsafe partial void Uniform4(int location, uint count, uint *value)
        {
            ((delegate *cdecl<Int32, UInt32,, void>)Load("glUniform4uiv", 1119))(location, count, value);
        }

        public partial void Uniform4(int location, uint count, Span<uint> value)
        {
            ((delegate *cdecl<Int32, UInt32, Span, void>)Load("glUniform4uiv", 1120))(location, count, value);
        }

        public partial void VertexAttribI1(uint index, int x)
        {
            ((delegate *cdecl<UInt32, Int32, void>)Load("glVertexAttribI1i", 1121))(index, x);
        }

        public partial void VertexAttribI1(uint index, uint x)
        {
            ((delegate *cdecl<UInt32, UInt32, void>)Load("glVertexAttribI1ui", 1122))(index, x);
        }

        public unsafe partial void VertexAttribI1(uint index, int *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttribI1iv", 1123))(index, v);
        }

        public partial void VertexAttribI1(uint index, ref int v)
        {
            ((delegate *cdecl<UInt32, Int32, void>)Load("glVertexAttribI1iv", 1124))(index, v);
        }

        public unsafe partial void VertexAttribI1(uint index, uint *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttribI1uiv", 1125))(index, v);
        }

        public partial void VertexAttribI1(uint index, ref uint v)
        {
            ((delegate *cdecl<UInt32, UInt32, void>)Load("glVertexAttribI1uiv", 1126))(index, v);
        }

        public partial void VertexAttribI2(uint index, int x, int y)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, void>)Load("glVertexAttribI2i", 1127))(index, x, y);
        }

        public partial void VertexAttribI2(uint index, uint x, uint y)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, void>)Load("glVertexAttribI2ui", 1128))(index, x, y);
        }

        public unsafe partial void VertexAttribI2(uint index, int *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttribI2iv", 1129))(index, v);
        }

        public partial void VertexAttribI2(uint index, Span<int> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttribI2iv", 1130))(index, v);
        }

        public unsafe partial void VertexAttribI2(uint index, uint *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttribI2uiv", 1131))(index, v);
        }

        public partial void VertexAttribI2(uint index, Span<uint> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttribI2uiv", 1132))(index, v);
        }

        public partial void VertexAttribI3(uint index, int x, int y, int z)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, void>)Load("glVertexAttribI3i", 1133))(index, x, y, z);
        }

        public partial void VertexAttribI3(uint index, uint x, uint y, uint z)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, UInt32, void>)Load("glVertexAttribI3ui", 1134))(index, x, y, z);
        }

        public unsafe partial void VertexAttribI3(uint index, int *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttribI3iv", 1135))(index, v);
        }

        public partial void VertexAttribI3(uint index, Span<int> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttribI3iv", 1136))(index, v);
        }

        public unsafe partial void VertexAttribI3(uint index, uint *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttribI3uiv", 1137))(index, v);
        }

        public partial void VertexAttribI3(uint index, Span<uint> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttribI3uiv", 1138))(index, v);
        }

        public partial void VertexAttribI4(uint index, int x, int y, int z, int w)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, Int32, Int32, void>)Load("glVertexAttribI4i", 1139))(index, x, y, z, w);
        }

        public partial void VertexAttribI4(uint index, uint x, uint y, uint z, uint w)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, UInt32, UInt32, void>)Load("glVertexAttribI4ui", 1140))(index, x, y, z, w);
        }

        public unsafe partial void VertexAttribI4(uint index, int *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttribI4iv", 1141))(index, v);
        }

        public partial void VertexAttribI4(uint index, Span<int> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttribI4iv", 1142))(index, v);
        }

        public unsafe partial void VertexAttribI4(uint index, uint *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttribI4uiv", 1143))(index, v);
        }

        public partial void VertexAttribI4(uint index, Span<uint> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttribI4uiv", 1144))(index, v);
        }

        public unsafe partial void VertexAttribI4(uint index, sbyte *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttribI4bv", 1145))(index, v);
        }

        public partial void VertexAttribI4(uint index, Span<sbyte> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttribI4bv", 1146))(index, v);
        }

        public unsafe partial void VertexAttribI4(uint index, short *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttribI4sv", 1147))(index, v);
        }

        public partial void VertexAttribI4(uint index, Span<short> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttribI4sv", 1148))(index, v);
        }

        public unsafe partial void VertexAttribI4(uint index, byte *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttribI4ubv", 1149))(index, v);
        }

        public partial void VertexAttribI4(uint index, Span<byte> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttribI4ubv", 1150))(index, v);
        }

        public unsafe partial void VertexAttribI4(uint index, ushort *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttribI4usv", 1151))(index, v);
        }

        public partial void VertexAttribI4(uint index, Span<ushort> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttribI4usv", 1152))(index, v);
        }

        public unsafe partial void VertexAttribIPointer(uint index, int size, GLEnum type, uint stride, void *pointer)
        {
            ((delegate *cdecl<UInt32, Int32, GLEnum, UInt32,, void>)Load("glVertexAttribIPointer", 1153))(index, size, type, stride, pointer);
        }

        public partial void VertexAttribIPointer<T0>(uint index, int size, GLEnum type, uint stride, ref T0 pointer)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, GLEnum, UInt32, T0, void>)Load("glVertexAttribIPointer", 1154))(index, size, type, stride, pointer);
        }

        public partial void BeginConditionalRender(uint id, ConditionalRenderMode mode)
        {
            ((delegate *cdecl<UInt32, ConditionalRenderMode, void>)Load("glBeginConditionalRender", 1155))(id, mode);
        }

        public partial void BeginTransformFeedback(PrimitiveType primitiveMode)
        {
            ((delegate *cdecl<PrimitiveType, void>)Load("glBeginTransformFeedback", 1156))(primitiveMode);
        }

        public partial void BindFragDataLocation(uint program, uint color, string name)
        {
            ((delegate *cdecl<UInt32, UInt32, String, void>)Load("glBindFragDataLocation", 1157))(program, color, name);
        }

        public partial void BindFramebuffer(FramebufferTarget target, uint framebuffer)
        {
            ((delegate *cdecl<FramebufferTarget, UInt32, void>)Load("glBindFramebuffer", 1158))(target, framebuffer);
        }

        public partial void BindRenderbuffer(RenderbufferTarget target, uint renderbuffer)
        {
            ((delegate *cdecl<RenderbufferTarget, UInt32, void>)Load("glBindRenderbuffer", 1159))(target, renderbuffer);
        }

        public partial void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, BlitFramebufferFilter filter)
        {
            ((delegate *cdecl<Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, UInt32, BlitFramebufferFilter, void>)Load("glBlitFramebuffer", 1160))(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }

        public partial void ClampColor(ClampColorTargetARB target, ClampColorModeARB clamp)
        {
            ((delegate *cdecl<ClampColorTargetARB, ClampColorModeARB, void>)Load("glClampColor", 1162))(target, clamp);
        }

        public unsafe partial void ClearBuffer(Buffer buffer, int drawbuffer, int *value)
        {
            ((delegate *cdecl<Buffer, Int32,, void>)Load("glClearBufferiv", 1163))(buffer, drawbuffer, value);
        }

        public partial void ClearBuffer(Buffer buffer, int drawbuffer, ref int value)
        {
            ((delegate *cdecl<Buffer, Int32, Int32, void>)Load("glClearBufferiv", 1164))(buffer, drawbuffer, value);
        }

        public unsafe partial void ClearBuffer(Buffer buffer, int drawbuffer, uint *value)
        {
            ((delegate *cdecl<Buffer, Int32,, void>)Load("glClearBufferuiv", 1165))(buffer, drawbuffer, value);
        }

        public partial void ClearBuffer(Buffer buffer, int drawbuffer, ref uint value)
        {
            ((delegate *cdecl<Buffer, Int32, UInt32, void>)Load("glClearBufferuiv", 1166))(buffer, drawbuffer, value);
        }

        public unsafe partial void ClearBuffer(Buffer buffer, int drawbuffer, float *value)
        {
            ((delegate *cdecl<Buffer, Int32,, void>)Load("glClearBufferfv", 1167))(buffer, drawbuffer, value);
        }

        public partial void ClearBuffer(Buffer buffer, int drawbuffer, ref float value)
        {
            ((delegate *cdecl<Buffer, Int32, Single, void>)Load("glClearBufferfv", 1168))(buffer, drawbuffer, value);
        }

        public partial void ClearBuffer(Buffer buffer, int drawbuffer, float depth, int stencil)
        {
            ((delegate *cdecl<Buffer, Int32, Single, Int32, void>)Load("glClearBufferfi", 1169))(buffer, drawbuffer, depth, stencil);
        }

        public partial void Disable(EnableCap target, uint index)
        {
            ((delegate *cdecl<EnableCap, UInt32, void>)Load("glDisablei", 1170))(target, index);
        }

        public partial void Enable(EnableCap target, uint index)
        {
            ((delegate *cdecl<EnableCap, UInt32, void>)Load("glEnablei", 1171))(target, index);
        }

        public partial void FlushMappedBufferRange(BufferTargetARB target, IntPtr offset, UIntPtr length)
        {
            ((delegate *cdecl<BufferTargetARB, IntPtr, UIntPtr, void>)Load("glFlushMappedBufferRange", 1172))(target, offset, length);
        }

        public partial void FramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer)
        {
            ((delegate *cdecl<FramebufferTarget, FramebufferAttachment, RenderbufferTarget, UInt32, void>)Load("glFramebufferRenderbuffer", 1173))(target, attachment, renderbuffertarget, renderbuffer);
        }

        public partial void FramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
        {
            ((delegate *cdecl<FramebufferTarget, FramebufferAttachment, TextureTarget, UInt32, Int32, void>)Load("glFramebufferTexture1D", 1174))(target, attachment, textarget, texture, level);
        }

        public partial void FramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
        {
            ((delegate *cdecl<FramebufferTarget, FramebufferAttachment, TextureTarget, UInt32, Int32, void>)Load("glFramebufferTexture2D", 1175))(target, attachment, textarget, texture, level);
        }

        public partial void FramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset)
        {
            ((delegate *cdecl<FramebufferTarget, FramebufferAttachment, TextureTarget, UInt32, Int32, Int32, void>)Load("glFramebufferTexture3D", 1176))(target, attachment, textarget, texture, level, zoffset);
        }

        public partial void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer)
        {
            ((delegate *cdecl<FramebufferTarget, FramebufferAttachment, UInt32, Int32, Int32, void>)Load("glFramebufferTextureLayer", 1177))(target, attachment, texture, level, layer);
        }

        public partial void GenerateMipmap(TextureTarget target)
        {
            ((delegate *cdecl<TextureTarget, void>)Load("glGenerateMipmap", 1178))(target);
        }

        public unsafe partial void GetBoolean(BufferTargetARB target, uint index, bool *data)
        {
            ((delegate *cdecl<BufferTargetARB, UInt32,, void>)Load("glGetBooleani_v", 1179))(target, index, data);
        }

        public partial void GetBoolean(BufferTargetARB target, uint index, out bool data)
        {
            ((delegate *cdecl<BufferTargetARB, UInt32, Boolean, void>)Load("glGetBooleani_v", 1180))(target, index, data);
        }

        public unsafe partial void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int *@params)
        {
            ((delegate *cdecl<FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName,, void>)Load("glGetFramebufferAttachmentParameteriv", 1182))(target, attachment, pname, params);
        }

        public partial void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, out int @params)
        {
            ((delegate *cdecl<FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, Int32, void>)Load("glGetFramebufferAttachmentParameteriv", 1183))(target, attachment, pname, params);
        }

        public unsafe partial void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, int *@params)
        {
            ((delegate *cdecl<RenderbufferTarget, RenderbufferParameterName,, void>)Load("glGetRenderbufferParameteriv", 1184))(target, pname, params);
        }

        public partial void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, out int @params)
        {
            ((delegate *cdecl<RenderbufferTarget, RenderbufferParameterName, Int32, void>)Load("glGetRenderbufferParameteriv", 1185))(target, pname, params);
        }

        public unsafe partial void GetTexParameterI(TextureTarget target, GetTextureParameter pname, int *@params)
        {
            ((delegate *cdecl<TextureTarget, GetTextureParameter,, void>)Load("glGetTexParameterIiv", 1187))(target, pname, params);
        }

        public partial void GetTexParameterI(TextureTarget target, GetTextureParameter pname, out int @params)
        {
            ((delegate *cdecl<TextureTarget, GetTextureParameter, Int32, void>)Load("glGetTexParameterIiv", 1188))(target, pname, params);
        }

        public unsafe partial void GetTexParameterI(TextureTarget target, GetTextureParameter pname, uint *@params)
        {
            ((delegate *cdecl<TextureTarget, GetTextureParameter,, void>)Load("glGetTexParameterIuiv", 1189))(target, pname, params);
        }

        public partial void GetTexParameterI(TextureTarget target, GetTextureParameter pname, out uint @params)
        {
            ((delegate *cdecl<TextureTarget, GetTextureParameter, UInt32, void>)Load("glGetTexParameterIuiv", 1190))(target, pname, params);
        }

        public unsafe partial void GetTransformFeedbackVarying(uint program, uint index, uint bufSize, uint *length, uint *size, AttributeType*type, out string name)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32,,,, String, void>)Load("glGetTransformFeedbackVarying", 1191))(program, index, bufSize, length, size, type, name);
        }

        public partial void GetTransformFeedbackVarying(uint program, uint index, uint bufSize, out uint length, out uint size, out AttributeType type, out string name)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, UInt32, UInt32, AttributeType, String, void>)Load("glGetTransformFeedbackVarying", 1192))(program, index, bufSize, length, size, type, name);
        }

        public unsafe partial void GetVertexAttribI(uint index, VertexAttribEnum pname, int *@params)
        {
            ((delegate *cdecl<UInt32, VertexAttribEnum,, void>)Load("glGetVertexAttribIiv", 1193))(index, pname, params);
        }

        public partial void GetVertexAttribI(uint index, VertexAttribEnum pname, out int @params)
        {
            ((delegate *cdecl<UInt32, VertexAttribEnum, Int32, void>)Load("glGetVertexAttribIiv", 1194))(index, pname, params);
        }

        public unsafe partial void GetVertexAttribI(uint index, VertexAttribEnum pname, uint *@params)
        {
            ((delegate *cdecl<UInt32, VertexAttribEnum,, void>)Load("glGetVertexAttribIuiv", 1195))(index, pname, params);
        }

        public partial void GetVertexAttribI(uint index, VertexAttribEnum pname, out uint @params)
        {
            ((delegate *cdecl<UInt32, VertexAttribEnum, UInt32, void>)Load("glGetVertexAttribIuiv", 1196))(index, pname, params);
        }

        public partial bool IsEnabled(EnableCap target, uint index)
        {
            return ((delegate *cdecl<EnableCap, UInt32, byte>)Load("glIsEnabledi", 1197))(target, index) == 1;
        }

        public partial void RenderbufferStorage(RenderbufferTarget target, InternalFormat internalformat, uint width, uint height)
        {
            ((delegate *cdecl<RenderbufferTarget, InternalFormat, UInt32, UInt32, void>)Load("glRenderbufferStorage", 1199))(target, internalformat, width, height);
        }

        public partial void RenderbufferStorageMultisample(RenderbufferTarget target, uint samples, InternalFormat internalformat, uint width, uint height)
        {
            ((delegate *cdecl<RenderbufferTarget, UInt32, InternalFormat, UInt32, UInt32, void>)Load("glRenderbufferStorageMultisample", 1200))(target, samples, internalformat, width, height);
        }

        public unsafe partial void TexParameterI(TextureTarget target, TextureParameterName pname, int *@params)
        {
            ((delegate *cdecl<TextureTarget, TextureParameterName,, void>)Load("glTexParameterIiv", 1201))(target, pname, params);
        }

        public partial void TexParameterI(TextureTarget target, TextureParameterName pname, ref int @params)
        {
            ((delegate *cdecl<TextureTarget, TextureParameterName, Int32, void>)Load("glTexParameterIiv", 1202))(target, pname, params);
        }

        public unsafe partial void TexParameterI(TextureTarget target, TextureParameterName pname, uint *@params)
        {
            ((delegate *cdecl<TextureTarget, TextureParameterName,, void>)Load("glTexParameterIuiv", 1203))(target, pname, params);
        }

        public partial void TexParameterI(TextureTarget target, TextureParameterName pname, ref uint @params)
        {
            ((delegate *cdecl<TextureTarget, TextureParameterName, UInt32, void>)Load("glTexParameterIuiv", 1204))(target, pname, params);
        }

        public unsafe partial void TransformFeedbackVaryings(uint program, uint count, byte **varyings, TransformFeedbackBufferMode bufferMode)
        {
            ((delegate *cdecl<UInt32, UInt32,, TransformFeedbackBufferMode, void>)Load("glTransformFeedbackVaryings", 1205))(program, count, varyings, bufferMode);
        }

        public partial void VertexAttribI4(uint index, string v)
        {
            ((delegate *cdecl<UInt32, String, void>)Load("glVertexAttribI4ubv", 1206))(index, v);
        }

        public unsafe partial void VertexAttribIPointer(uint index, int size, VertexAttribIType type, uint stride, void *pointer)
        {
            ((delegate *cdecl<UInt32, Int32, VertexAttribIType, UInt32,, void>)Load("glVertexAttribIPointer", 1207))(index, size, type, stride, pointer);
        }

        public partial void VertexAttribIPointer<T0>(uint index, int size, VertexAttribIType type, uint stride, ref T0 pointer)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, VertexAttribIType, UInt32, T0, void>)Load("glVertexAttribIPointer", 1208))(index, size, type, stride, pointer);
        }

        public unsafe partial void UniformMatrix2x3(int location, uint count, bool transpose, float *value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean,, void>)Load("glUniformMatrix2x3fv", 1209))(location, count, transpose, value);
        }

        public partial void UniformMatrix2x3(int location, uint count, bool transpose, Span<float> value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean, Span, void>)Load("glUniformMatrix2x3fv", 1210))(location, count, transpose, value);
        }

        public unsafe partial void UniformMatrix2x4(int location, uint count, bool transpose, float *value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean,, void>)Load("glUniformMatrix2x4fv", 1211))(location, count, transpose, value);
        }

        public partial void UniformMatrix2x4(int location, uint count, bool transpose, Span<float> value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean, Span, void>)Load("glUniformMatrix2x4fv", 1212))(location, count, transpose, value);
        }

        public unsafe partial void UniformMatrix3x2(int location, uint count, bool transpose, float *value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean,, void>)Load("glUniformMatrix3x2fv", 1213))(location, count, transpose, value);
        }

        public partial void UniformMatrix3x2(int location, uint count, bool transpose, Span<float> value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean, Span, void>)Load("glUniformMatrix3x2fv", 1214))(location, count, transpose, value);
        }

        public unsafe partial void UniformMatrix3x4(int location, uint count, bool transpose, float *value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean,, void>)Load("glUniformMatrix3x4fv", 1215))(location, count, transpose, value);
        }

        public partial void UniformMatrix3x4(int location, uint count, bool transpose, Span<float> value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean, Span, void>)Load("glUniformMatrix3x4fv", 1216))(location, count, transpose, value);
        }

        public unsafe partial void UniformMatrix4x2(int location, uint count, bool transpose, float *value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean,, void>)Load("glUniformMatrix4x2fv", 1217))(location, count, transpose, value);
        }

        public partial void UniformMatrix4x2(int location, uint count, bool transpose, Span<float> value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean, Span, void>)Load("glUniformMatrix4x2fv", 1218))(location, count, transpose, value);
        }

        public unsafe partial void UniformMatrix4x3(int location, uint count, bool transpose, float *value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean,, void>)Load("glUniformMatrix4x3fv", 1219))(location, count, transpose, value);
        }

        public partial void UniformMatrix4x3(int location, uint count, bool transpose, Span<float> value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean, Span, void>)Load("glUniformMatrix4x3fv", 1220))(location, count, transpose, value);
        }

        public partial void AttachShader(uint program, uint shader)
        {
            ((delegate *cdecl<UInt32, UInt32, void>)Load("glAttachShader", 1221))(program, shader);
        }

        public unsafe partial void BindAttribLocation(uint program, uint index, byte *name)
        {
            ((delegate *cdecl<UInt32, UInt32,, void>)Load("glBindAttribLocation", 1222))(program, index, name);
        }

        public partial void BindAttribLocation(uint program, uint index, Span<byte> name)
        {
            ((delegate *cdecl<UInt32, UInt32, Span, void>)Load("glBindAttribLocation", 1223))(program, index, name);
        }

        public partial void BlendEquationSeparate(GLEnum modeRGB, GLEnum modeAlpha)
        {
            ((delegate *cdecl<GLEnum, GLEnum, void>)Load("glBlendEquationSeparate", 1224))(modeRGB, modeAlpha);
        }

        public partial void CompileShader(uint shader)
        {
            ((delegate *cdecl<UInt32, void>)Load("glCompileShader", 1225))(shader);
        }

        public partial void DeleteProgram(uint program)
        {
            ((delegate *cdecl<UInt32, void>)Load("glDeleteProgram", 1228))(program);
        }

        public partial void DeleteShader(uint shader)
        {
            ((delegate *cdecl<UInt32, void>)Load("glDeleteShader", 1229))(shader);
        }

        public partial void DetachShader(uint program, uint shader)
        {
            ((delegate *cdecl<UInt32, UInt32, void>)Load("glDetachShader", 1230))(program, shader);
        }

        public partial void DisableVertexAttribArray(uint index)
        {
            ((delegate *cdecl<UInt32, void>)Load("glDisableVertexAttribArray", 1231))(index);
        }

        public unsafe partial void DrawBuffers(uint n, GLEnum*bufs)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glDrawBuffers", 1232))(n, bufs);
        }

        public partial void DrawBuffers(uint n, Span<GLEnum> bufs)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glDrawBuffers", 1233))(n, bufs);
        }

        public partial void EnableVertexAttribArray(uint index)
        {
            ((delegate *cdecl<UInt32, void>)Load("glEnableVertexAttribArray", 1234))(index);
        }

        public unsafe partial void GetActiveAttrib(uint program, uint index, uint bufSize, uint *length, int *size, GLEnum*type, byte *name)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32,,,,, void>)Load("glGetActiveAttrib", 1235))(program, index, bufSize, length, size, type, name);
        }

        public partial void GetActiveAttrib(uint program, uint index, uint bufSize, out uint length, out int size, out GLEnum type, Span<byte> name)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, UInt32, Int32, GLEnum, Span, void>)Load("glGetActiveAttrib", 1236))(program, index, bufSize, length, size, type, name);
        }

        public unsafe partial void GetActiveUniform(uint program, uint index, uint bufSize, uint *length, int *size, GLEnum*type, byte *name)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32,,,,, void>)Load("glGetActiveUniform", 1237))(program, index, bufSize, length, size, type, name);
        }

        public partial void GetActiveUniform(uint program, uint index, uint bufSize, out uint length, out int size, out GLEnum type, Span<byte> name)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, UInt32, Int32, GLEnum, Span, void>)Load("glGetActiveUniform", 1238))(program, index, bufSize, length, size, type, name);
        }

        public unsafe partial void GetAttachedShaders(uint program, uint maxCount, uint *count, uint *shaders)
        {
            ((delegate *cdecl<UInt32, UInt32,,, void>)Load("glGetAttachedShaders", 1239))(program, maxCount, count, shaders);
        }

        public partial void GetAttachedShaders(uint program, uint maxCount, out uint count, Span<uint> shaders)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, Span, void>)Load("glGetAttachedShaders", 1240))(program, maxCount, count, shaders);
        }

        public unsafe partial void GetProgram(uint program, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetProgramiv", 1243))(program, pname, params);
        }

        public partial void GetProgram(uint program, GLEnum pname, out int @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, Int32, void>)Load("glGetProgramiv", 1244))(program, pname, params);
        }

        public unsafe partial void GetProgramInfoLog(uint program, uint bufSize, uint *length, byte *infoLog)
        {
            ((delegate *cdecl<UInt32, UInt32,,, void>)Load("glGetProgramInfoLog", 1245))(program, bufSize, length, infoLog);
        }

        public partial void GetProgramInfoLog(uint program, uint bufSize, out uint length, Span<byte> infoLog)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, Span, void>)Load("glGetProgramInfoLog", 1246))(program, bufSize, length, infoLog);
        }

        public unsafe partial void GetShader(uint shader, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetShaderiv", 1247))(shader, pname, params);
        }

        public partial void GetShader(uint shader, GLEnum pname, out int @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, Int32, void>)Load("glGetShaderiv", 1248))(shader, pname, params);
        }

        public unsafe partial void GetShaderInfoLog(uint shader, uint bufSize, uint *length, byte *infoLog)
        {
            ((delegate *cdecl<UInt32, UInt32,,, void>)Load("glGetShaderInfoLog", 1249))(shader, bufSize, length, infoLog);
        }

        public partial void GetShaderInfoLog(uint shader, uint bufSize, out uint length, Span<byte> infoLog)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, Span, void>)Load("glGetShaderInfoLog", 1250))(shader, bufSize, length, infoLog);
        }

        public unsafe partial void GetShaderSource(uint shader, uint bufSize, uint *length, byte *source)
        {
            ((delegate *cdecl<UInt32, UInt32,,, void>)Load("glGetShaderSource", 1251))(shader, bufSize, length, source);
        }

        public partial void GetShaderSource(uint shader, uint bufSize, out uint length, Span<byte> source)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, Span, void>)Load("glGetShaderSource", 1252))(shader, bufSize, length, source);
        }

        public unsafe partial void GetUniform(uint program, int location, float *@params)
        {
            ((delegate *cdecl<UInt32, Int32,, void>)Load("glGetUniformfv", 1253))(program, location, params);
        }

        public partial void GetUniform(uint program, int location, out float @params)
        {
            ((delegate *cdecl<UInt32, Int32, Single, void>)Load("glGetUniformfv", 1254))(program, location, params);
        }

        public unsafe partial void GetUniform(uint program, int location, int *@params)
        {
            ((delegate *cdecl<UInt32, Int32,, void>)Load("glGetUniformiv", 1255))(program, location, params);
        }

        public partial void GetUniform(uint program, int location, out int @params)
        {
            ((delegate *cdecl<UInt32, Int32, Int32, void>)Load("glGetUniformiv", 1256))(program, location, params);
        }

        public unsafe partial void GetVertexAttrib(uint index, GLEnum pname, double *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetVertexAttribdv", 1259))(index, pname, params);
        }

        public partial void GetVertexAttrib(uint index, GLEnum pname, Span<double> @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, Span, void>)Load("glGetVertexAttribdv", 1260))(index, pname, params);
        }

        public unsafe partial void GetVertexAttrib(uint index, GLEnum pname, float *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetVertexAttribfv", 1261))(index, pname, params);
        }

        public partial void GetVertexAttrib(uint index, GLEnum pname, Span<float> @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, Span, void>)Load("glGetVertexAttribfv", 1262))(index, pname, params);
        }

        public unsafe partial void GetVertexAttrib(uint index, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetVertexAttribiv", 1263))(index, pname, params);
        }

        public partial void GetVertexAttrib(uint index, GLEnum pname, Span<int> @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, Span, void>)Load("glGetVertexAttribiv", 1264))(index, pname, params);
        }

        public unsafe partial void GetVertexAttribPointer(uint index, GLEnum pname, void **pointer)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetVertexAttribPointerv", 1265))(index, pname, pointer);
        }

        public unsafe partial void GetVertexAttribPointer<T0>(uint index, GLEnum pname, out T0*pointer)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetVertexAttribPointerv", 1266))(index, pname, pointer);
        }

        public partial bool IsProgram(uint program)
        {
            return ((delegate *cdecl<UInt32, byte>)Load("glIsProgram", 1267))(program) == 1;
        }

        public partial bool IsShader(uint shader)
        {
            return ((delegate *cdecl<UInt32, byte>)Load("glIsShader", 1268))(shader) == 1;
        }

        public partial void LinkProgram(uint program)
        {
            ((delegate *cdecl<UInt32, void>)Load("glLinkProgram", 1269))(program);
        }

        public unsafe partial void ShaderSource(uint shader, uint count, byte **@string, int *length)
        {
            ((delegate *cdecl<UInt32, UInt32,,, void>)Load("glShaderSource", 1270))(shader, count, string, length);
        }

        public unsafe partial void ShaderSource(uint shader, uint count, byte **@string, Span<int> length)
        {
            ((delegate *cdecl<UInt32, UInt32,, Span, void>)Load("glShaderSource", 1271))(shader, count, string, length);
        }

        public partial void StencilFuncSeparate(GLEnum face, GLEnum func, int @ref, uint mask)
        {
            ((delegate *cdecl<GLEnum, GLEnum, Int32, UInt32, void>)Load("glStencilFuncSeparate", 1272))(face, func, ref, mask);
        }

        public partial void StencilMaskSeparate(GLEnum face, uint mask)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glStencilMaskSeparate", 1273))(face, mask);
        }

        public partial void StencilOpSeparate(GLEnum face, GLEnum sfail, GLEnum dpfail, GLEnum dppass)
        {
            ((delegate *cdecl<GLEnum, GLEnum, GLEnum, GLEnum, void>)Load("glStencilOpSeparate", 1274))(face, sfail, dpfail, dppass);
        }

        public partial void Uniform1(int location, float v0)
        {
            ((delegate *cdecl<Int32, Single, void>)Load("glUniform1f", 1275))(location, v0);
        }

        public partial void Uniform1(int location, int v0)
        {
            ((delegate *cdecl<Int32, Int32, void>)Load("glUniform1i", 1276))(location, v0);
        }

        public unsafe partial void Uniform1(int location, uint count, float *value)
        {
            ((delegate *cdecl<Int32, UInt32,, void>)Load("glUniform1fv", 1277))(location, count, value);
        }

        public partial void Uniform1(int location, uint count, Span<float> value)
        {
            ((delegate *cdecl<Int32, UInt32, Span, void>)Load("glUniform1fv", 1278))(location, count, value);
        }

        public unsafe partial void Uniform1(int location, uint count, int *value)
        {
            ((delegate *cdecl<Int32, UInt32,, void>)Load("glUniform1iv", 1279))(location, count, value);
        }

        public partial void Uniform1(int location, uint count, Span<int> value)
        {
            ((delegate *cdecl<Int32, UInt32, Span, void>)Load("glUniform1iv", 1280))(location, count, value);
        }

        public partial void Uniform2(int location, float v0, float v1)
        {
            ((delegate *cdecl<Int32, Single, Single, void>)Load("glUniform2f", 1281))(location, v0, v1);
        }

        public partial void Uniform2(int location, int v0, int v1)
        {
            ((delegate *cdecl<Int32, Int32, Int32, void>)Load("glUniform2i", 1282))(location, v0, v1);
        }

        public unsafe partial void Uniform2(int location, uint count, float *value)
        {
            ((delegate *cdecl<Int32, UInt32,, void>)Load("glUniform2fv", 1283))(location, count, value);
        }

        public partial void Uniform2(int location, uint count, Span<float> value)
        {
            ((delegate *cdecl<Int32, UInt32, Span, void>)Load("glUniform2fv", 1284))(location, count, value);
        }

        public unsafe partial void Uniform2(int location, uint count, int *value)
        {
            ((delegate *cdecl<Int32, UInt32,, void>)Load("glUniform2iv", 1285))(location, count, value);
        }

        public partial void Uniform2(int location, uint count, Span<int> value)
        {
            ((delegate *cdecl<Int32, UInt32, Span, void>)Load("glUniform2iv", 1286))(location, count, value);
        }

        public partial void Uniform3(int location, float v0, float v1, float v2)
        {
            ((delegate *cdecl<Int32, Single, Single, Single, void>)Load("glUniform3f", 1287))(location, v0, v1, v2);
        }

        public partial void Uniform3(int location, int v0, int v1, int v2)
        {
            ((delegate *cdecl<Int32, Int32, Int32, Int32, void>)Load("glUniform3i", 1288))(location, v0, v1, v2);
        }

        public unsafe partial void Uniform3(int location, uint count, float *value)
        {
            ((delegate *cdecl<Int32, UInt32,, void>)Load("glUniform3fv", 1289))(location, count, value);
        }

        public partial void Uniform3(int location, uint count, Span<float> value)
        {
            ((delegate *cdecl<Int32, UInt32, Span, void>)Load("glUniform3fv", 1290))(location, count, value);
        }

        public unsafe partial void Uniform3(int location, uint count, int *value)
        {
            ((delegate *cdecl<Int32, UInt32,, void>)Load("glUniform3iv", 1291))(location, count, value);
        }

        public partial void Uniform3(int location, uint count, Span<int> value)
        {
            ((delegate *cdecl<Int32, UInt32, Span, void>)Load("glUniform3iv", 1292))(location, count, value);
        }

        public partial void Uniform4(int location, float v0, float v1, float v2, float v3)
        {
            ((delegate *cdecl<Int32, Single, Single, Single, Single, void>)Load("glUniform4f", 1293))(location, v0, v1, v2, v3);
        }

        public partial void Uniform4(int location, int v0, int v1, int v2, int v3)
        {
            ((delegate *cdecl<Int32, Int32, Int32, Int32, Int32, void>)Load("glUniform4i", 1294))(location, v0, v1, v2, v3);
        }

        public unsafe partial void Uniform4(int location, uint count, float *value)
        {
            ((delegate *cdecl<Int32, UInt32,, void>)Load("glUniform4fv", 1295))(location, count, value);
        }

        public partial void Uniform4(int location, uint count, Span<float> value)
        {
            ((delegate *cdecl<Int32, UInt32, Span, void>)Load("glUniform4fv", 1296))(location, count, value);
        }

        public unsafe partial void Uniform4(int location, uint count, int *value)
        {
            ((delegate *cdecl<Int32, UInt32,, void>)Load("glUniform4iv", 1297))(location, count, value);
        }

        public partial void Uniform4(int location, uint count, Span<int> value)
        {
            ((delegate *cdecl<Int32, UInt32, Span, void>)Load("glUniform4iv", 1298))(location, count, value);
        }

        public unsafe partial void UniformMatrix2(int location, uint count, bool transpose, float *value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean,, void>)Load("glUniformMatrix2fv", 1299))(location, count, transpose, value);
        }

        public partial void UniformMatrix2(int location, uint count, bool transpose, Span<float> value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean, Span, void>)Load("glUniformMatrix2fv", 1300))(location, count, transpose, value);
        }

        public unsafe partial void UniformMatrix3(int location, uint count, bool transpose, float *value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean,, void>)Load("glUniformMatrix3fv", 1301))(location, count, transpose, value);
        }

        public partial void UniformMatrix3(int location, uint count, bool transpose, Span<float> value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean, Span, void>)Load("glUniformMatrix3fv", 1302))(location, count, transpose, value);
        }

        public unsafe partial void UniformMatrix4(int location, uint count, bool transpose, float *value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean,, void>)Load("glUniformMatrix4fv", 1303))(location, count, transpose, value);
        }

        public partial void UniformMatrix4(int location, uint count, bool transpose, Span<float> value)
        {
            ((delegate *cdecl<Int32, UInt32, Boolean, Span, void>)Load("glUniformMatrix4fv", 1304))(location, count, transpose, value);
        }

        public partial void UseProgram(uint program)
        {
            ((delegate *cdecl<UInt32, void>)Load("glUseProgram", 1305))(program);
        }

        public partial void ValidateProgram(uint program)
        {
            ((delegate *cdecl<UInt32, void>)Load("glValidateProgram", 1306))(program);
        }

        public partial void VertexAttrib1(uint index, double x)
        {
            ((delegate *cdecl<UInt32, Double, void>)Load("glVertexAttrib1d", 1307))(index, x);
        }

        public unsafe partial void VertexAttrib1(uint index, double *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttrib1dv", 1308))(index, v);
        }

        public partial void VertexAttrib1(uint index, ref double v)
        {
            ((delegate *cdecl<UInt32, Double, void>)Load("glVertexAttrib1dv", 1309))(index, v);
        }

        public partial void VertexAttrib1(uint index, float x)
        {
            ((delegate *cdecl<UInt32, Single, void>)Load("glVertexAttrib1f", 1310))(index, x);
        }

        public unsafe partial void VertexAttrib1(uint index, float *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttrib1fv", 1311))(index, v);
        }

        public partial void VertexAttrib1(uint index, ref float v)
        {
            ((delegate *cdecl<UInt32, Single, void>)Load("glVertexAttrib1fv", 1312))(index, v);
        }

        public partial void VertexAttrib1(uint index, short x)
        {
            ((delegate *cdecl<UInt32, Int16, void>)Load("glVertexAttrib1s", 1313))(index, x);
        }

        public unsafe partial void VertexAttrib1(uint index, short *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttrib1sv", 1314))(index, v);
        }

        public partial void VertexAttrib1(uint index, ref short v)
        {
            ((delegate *cdecl<UInt32, Int16, void>)Load("glVertexAttrib1sv", 1315))(index, v);
        }

        public partial void VertexAttrib2(uint index, double x, double y)
        {
            ((delegate *cdecl<UInt32, Double, Double, void>)Load("glVertexAttrib2d", 1316))(index, x, y);
        }

        public unsafe partial void VertexAttrib2(uint index, double *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttrib2dv", 1317))(index, v);
        }

        public partial void VertexAttrib2(uint index, Span<double> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttrib2dv", 1318))(index, v);
        }

        public partial void VertexAttrib2(uint index, float x, float y)
        {
            ((delegate *cdecl<UInt32, Single, Single, void>)Load("glVertexAttrib2f", 1319))(index, x, y);
        }

        public unsafe partial void VertexAttrib2(uint index, float *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttrib2fv", 1320))(index, v);
        }

        public partial void VertexAttrib2(uint index, Span<float> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttrib2fv", 1321))(index, v);
        }

        public partial void VertexAttrib2(uint index, short x, short y)
        {
            ((delegate *cdecl<UInt32, Int16, Int16, void>)Load("glVertexAttrib2s", 1322))(index, x, y);
        }

        public unsafe partial void VertexAttrib2(uint index, short *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttrib2sv", 1323))(index, v);
        }

        public partial void VertexAttrib2(uint index, Span<short> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttrib2sv", 1324))(index, v);
        }

        public partial void VertexAttrib3(uint index, double x, double y, double z)
        {
            ((delegate *cdecl<UInt32, Double, Double, Double, void>)Load("glVertexAttrib3d", 1325))(index, x, y, z);
        }

        public unsafe partial void VertexAttrib3(uint index, double *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttrib3dv", 1326))(index, v);
        }

        public partial void VertexAttrib3(uint index, Span<double> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttrib3dv", 1327))(index, v);
        }

        public partial void VertexAttrib3(uint index, float x, float y, float z)
        {
            ((delegate *cdecl<UInt32, Single, Single, Single, void>)Load("glVertexAttrib3f", 1328))(index, x, y, z);
        }

        public unsafe partial void VertexAttrib3(uint index, float *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttrib3fv", 1329))(index, v);
        }

        public partial void VertexAttrib3(uint index, Span<float> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttrib3fv", 1330))(index, v);
        }

        public partial void VertexAttrib3(uint index, short x, short y, short z)
        {
            ((delegate *cdecl<UInt32, Int16, Int16, Int16, void>)Load("glVertexAttrib3s", 1331))(index, x, y, z);
        }

        public unsafe partial void VertexAttrib3(uint index, short *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttrib3sv", 1332))(index, v);
        }

        public partial void VertexAttrib3(uint index, Span<short> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttrib3sv", 1333))(index, v);
        }

        public unsafe partial void VertexAttrib4(uint index, sbyte *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttrib4bv", 1334))(index, v);
        }

        public partial void VertexAttrib4(uint index, Span<sbyte> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttrib4bv", 1335))(index, v);
        }

        public partial void VertexAttrib4(uint index, double x, double y, double z, double w)
        {
            ((delegate *cdecl<UInt32, Double, Double, Double, Double, void>)Load("glVertexAttrib4d", 1336))(index, x, y, z, w);
        }

        public unsafe partial void VertexAttrib4(uint index, double *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttrib4dv", 1337))(index, v);
        }

        public partial void VertexAttrib4(uint index, Span<double> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttrib4dv", 1338))(index, v);
        }

        public partial void VertexAttrib4(uint index, float x, float y, float z, float w)
        {
            ((delegate *cdecl<UInt32, Single, Single, Single, Single, void>)Load("glVertexAttrib4f", 1339))(index, x, y, z, w);
        }

        public unsafe partial void VertexAttrib4(uint index, float *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttrib4fv", 1340))(index, v);
        }

        public partial void VertexAttrib4(uint index, Span<float> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttrib4fv", 1341))(index, v);
        }

        public unsafe partial void VertexAttrib4(uint index, int *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttrib4iv", 1342))(index, v);
        }

        public partial void VertexAttrib4(uint index, Span<int> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttrib4iv", 1343))(index, v);
        }

        public partial void VertexAttrib4(uint index, short x, short y, short z, short w)
        {
            ((delegate *cdecl<UInt32, Int16, Int16, Int16, Int16, void>)Load("glVertexAttrib4s", 1344))(index, x, y, z, w);
        }

        public unsafe partial void VertexAttrib4(uint index, short *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttrib4sv", 1345))(index, v);
        }

        public partial void VertexAttrib4(uint index, Span<short> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttrib4sv", 1346))(index, v);
        }

        public unsafe partial void VertexAttrib4(uint index, byte *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttrib4ubv", 1347))(index, v);
        }

        public partial void VertexAttrib4(uint index, Span<byte> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttrib4ubv", 1348))(index, v);
        }

        public unsafe partial void VertexAttrib4(uint index, uint *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttrib4uiv", 1349))(index, v);
        }

        public partial void VertexAttrib4(uint index, Span<uint> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttrib4uiv", 1350))(index, v);
        }

        public unsafe partial void VertexAttrib4(uint index, ushort *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttrib4usv", 1351))(index, v);
        }

        public partial void VertexAttrib4(uint index, Span<ushort> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttrib4usv", 1352))(index, v);
        }

        public unsafe partial void VertexAttrib4N(uint index, sbyte *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttrib4Nbv", 1353))(index, v);
        }

        public partial void VertexAttrib4N(uint index, Span<sbyte> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttrib4Nbv", 1354))(index, v);
        }

        public unsafe partial void VertexAttrib4N(uint index, int *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttrib4Niv", 1355))(index, v);
        }

        public partial void VertexAttrib4N(uint index, Span<int> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttrib4Niv", 1356))(index, v);
        }

        public unsafe partial void VertexAttrib4N(uint index, short *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttrib4Nsv", 1357))(index, v);
        }

        public partial void VertexAttrib4N(uint index, Span<short> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttrib4Nsv", 1358))(index, v);
        }

        public partial void VertexAttrib4N(uint index, byte x, byte y, byte z, byte w)
        {
            ((delegate *cdecl<UInt32, Byte, Byte, Byte, Byte, void>)Load("glVertexAttrib4Nub", 1359))(index, x, y, z, w);
        }

        public unsafe partial void VertexAttrib4N(uint index, byte *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttrib4Nubv", 1360))(index, v);
        }

        public partial void VertexAttrib4N(uint index, Span<byte> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttrib4Nubv", 1361))(index, v);
        }

        public unsafe partial void VertexAttrib4N(uint index, uint *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttrib4Nuiv", 1362))(index, v);
        }

        public partial void VertexAttrib4N(uint index, Span<uint> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttrib4Nuiv", 1363))(index, v);
        }

        public unsafe partial void VertexAttrib4N(uint index, ushort *v)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glVertexAttrib4Nusv", 1364))(index, v);
        }

        public partial void VertexAttrib4N(uint index, Span<ushort> v)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glVertexAttrib4Nusv", 1365))(index, v);
        }

        public unsafe partial void VertexAttribPointer(uint index, int size, GLEnum type, bool normalized, uint stride, void *pointer)
        {
            ((delegate *cdecl<UInt32, Int32, GLEnum, Boolean, UInt32,, void>)Load("glVertexAttribPointer", 1366))(index, size, type, normalized, stride, pointer);
        }

        public partial void VertexAttribPointer<T0>(uint index, int size, GLEnum type, bool normalized, uint stride, ref T0 pointer)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, GLEnum, Boolean, UInt32, T0, void>)Load("glVertexAttribPointer", 1367))(index, size, type, normalized, stride, pointer);
        }

        public partial void BindAttribLocation(uint program, uint index, string name)
        {
            ((delegate *cdecl<UInt32, UInt32, String, void>)Load("glBindAttribLocation", 1368))(program, index, name);
        }

        public partial void BlendEquationSeparate(BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha)
        {
            ((delegate *cdecl<BlendEquationModeEXT, BlendEquationModeEXT, void>)Load("glBlendEquationSeparate", 1369))(modeRGB, modeAlpha);
        }

        public unsafe partial void DrawBuffers(uint n, DrawBufferMode*bufs)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glDrawBuffers", 1371))(n, bufs);
        }

        public partial void DrawBuffers(uint n, Span<DrawBufferMode> bufs)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glDrawBuffers", 1372))(n, bufs);
        }

        public unsafe partial void GetActiveAttrib(uint program, uint index, uint bufSize, uint *length, int *size, AttributeType*type, out string name)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32,,,, String, void>)Load("glGetActiveAttrib", 1373))(program, index, bufSize, length, size, type, name);
        }

        public partial void GetActiveAttrib(uint program, uint index, uint bufSize, out uint length, out int size, out AttributeType type, out string name)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, UInt32, Int32, AttributeType, String, void>)Load("glGetActiveAttrib", 1374))(program, index, bufSize, length, size, type, name);
        }

        public unsafe partial void GetActiveUniform(uint program, uint index, uint bufSize, uint *length, int *size, UniformType*type, out string name)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32,,,, String, void>)Load("glGetActiveUniform", 1375))(program, index, bufSize, length, size, type, name);
        }

        public partial void GetActiveUniform(uint program, uint index, uint bufSize, out uint length, out int size, out UniformType type, out string name)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, UInt32, Int32, UniformType, String, void>)Load("glGetActiveUniform", 1376))(program, index, bufSize, length, size, type, name);
        }

        public unsafe partial void GetProgram(uint program, ProgramPropertyARB pname, int *@params)
        {
            ((delegate *cdecl<UInt32, ProgramPropertyARB,, void>)Load("glGetProgramiv", 1378))(program, pname, params);
        }

        public partial void GetProgram(uint program, ProgramPropertyARB pname, out int @params)
        {
            ((delegate *cdecl<UInt32, ProgramPropertyARB, Int32, void>)Load("glGetProgramiv", 1379))(program, pname, params);
        }

        public unsafe partial void GetProgramInfoLog(uint program, uint bufSize, uint *length, out string infoLog)
        {
            ((delegate *cdecl<UInt32, UInt32,, String, void>)Load("glGetProgramInfoLog", 1380))(program, bufSize, length, infoLog);
        }

        public partial void GetProgramInfoLog(uint program, uint bufSize, out uint length, out string infoLog)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, String, void>)Load("glGetProgramInfoLog", 1381))(program, bufSize, length, infoLog);
        }

        public unsafe partial void GetShader(uint shader, ShaderParameterName pname, int *@params)
        {
            ((delegate *cdecl<UInt32, ShaderParameterName,, void>)Load("glGetShaderiv", 1382))(shader, pname, params);
        }

        public partial void GetShader(uint shader, ShaderParameterName pname, out int @params)
        {
            ((delegate *cdecl<UInt32, ShaderParameterName, Int32, void>)Load("glGetShaderiv", 1383))(shader, pname, params);
        }

        public unsafe partial void GetShaderInfoLog(uint shader, uint bufSize, uint *length, out string infoLog)
        {
            ((delegate *cdecl<UInt32, UInt32,, String, void>)Load("glGetShaderInfoLog", 1384))(shader, bufSize, length, infoLog);
        }

        public partial void GetShaderInfoLog(uint shader, uint bufSize, out uint length, out string infoLog)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, String, void>)Load("glGetShaderInfoLog", 1385))(shader, bufSize, length, infoLog);
        }

        public unsafe partial void GetShaderSource(uint shader, uint bufSize, uint *length, out string source)
        {
            ((delegate *cdecl<UInt32, UInt32,, String, void>)Load("glGetShaderSource", 1386))(shader, bufSize, length, source);
        }

        public partial void GetShaderSource(uint shader, uint bufSize, out uint length, out string source)
        {
            ((delegate *cdecl<UInt32, UInt32, UInt32, String, void>)Load("glGetShaderSource", 1387))(shader, bufSize, length, source);
        }

        public unsafe partial void GetVertexAttrib(uint index, VertexAttribPropertyARB pname, double *@params)
        {
            ((delegate *cdecl<UInt32, VertexAttribPropertyARB,, void>)Load("glGetVertexAttribdv", 1389))(index, pname, params);
        }

        public partial void GetVertexAttrib(uint index, VertexAttribPropertyARB pname, Span<double> @params)
        {
            ((delegate *cdecl<UInt32, VertexAttribPropertyARB, Span, void>)Load("glGetVertexAttribdv", 1390))(index, pname, params);
        }

        public unsafe partial void GetVertexAttrib(uint index, VertexAttribPropertyARB pname, float *@params)
        {
            ((delegate *cdecl<UInt32, VertexAttribPropertyARB,, void>)Load("glGetVertexAttribfv", 1391))(index, pname, params);
        }

        public partial void GetVertexAttrib(uint index, VertexAttribPropertyARB pname, Span<float> @params)
        {
            ((delegate *cdecl<UInt32, VertexAttribPropertyARB, Span, void>)Load("glGetVertexAttribfv", 1392))(index, pname, params);
        }

        public unsafe partial void GetVertexAttrib(uint index, VertexAttribPropertyARB pname, int *@params)
        {
            ((delegate *cdecl<UInt32, VertexAttribPropertyARB,, void>)Load("glGetVertexAttribiv", 1393))(index, pname, params);
        }

        public partial void GetVertexAttrib(uint index, VertexAttribPropertyARB pname, Span<int> @params)
        {
            ((delegate *cdecl<UInt32, VertexAttribPropertyARB, Span, void>)Load("glGetVertexAttribiv", 1394))(index, pname, params);
        }

        public unsafe partial void GetVertexAttribPointer(uint index, VertexAttribPointerPropertyARB pname, void **pointer)
        {
            ((delegate *cdecl<UInt32, VertexAttribPointerPropertyARB,, void>)Load("glGetVertexAttribPointerv", 1395))(index, pname, pointer);
        }

        public unsafe partial void GetVertexAttribPointer<T0>(uint index, VertexAttribPointerPropertyARB pname, out T0*pointer)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, VertexAttribPointerPropertyARB,, void>)Load("glGetVertexAttribPointerv", 1396))(index, pname, pointer);
        }

        public partial void StencilFuncSeparate(StencilFaceDirection face, StencilFunction func, int @ref, uint mask)
        {
            ((delegate *cdecl<StencilFaceDirection, StencilFunction, Int32, UInt32, void>)Load("glStencilFuncSeparate", 1397))(face, func, ref, mask);
        }

        public partial void StencilMaskSeparate(StencilFaceDirection face, uint mask)
        {
            ((delegate *cdecl<StencilFaceDirection, UInt32, void>)Load("glStencilMaskSeparate", 1398))(face, mask);
        }

        public partial void StencilOpSeparate(StencilFaceDirection face, StencilOp sfail, StencilOp dpfail, StencilOp dppass)
        {
            ((delegate *cdecl<StencilFaceDirection, StencilOp, StencilOp, StencilOp, void>)Load("glStencilOpSeparate", 1399))(face, sfail, dpfail, dppass);
        }

        public partial void VertexAttrib4(uint index, string v)
        {
            ((delegate *cdecl<UInt32, String, void>)Load("glVertexAttrib4ubv", 1400))(index, v);
        }

        public partial void VertexAttrib4N(uint index, string v)
        {
            ((delegate *cdecl<UInt32, String, void>)Load("glVertexAttrib4Nubv", 1401))(index, v);
        }

        public unsafe partial void VertexAttribPointer(uint index, int size, VertexAttribPointerType type, bool normalized, uint stride, void *pointer)
        {
            ((delegate *cdecl<UInt32, Int32, VertexAttribPointerType, Boolean, UInt32,, void>)Load("glVertexAttribPointer", 1402))(index, size, type, normalized, stride, pointer);
        }

        public partial void VertexAttribPointer<T0>(uint index, int size, VertexAttribPointerType type, bool normalized, uint stride, ref T0 pointer)
            where T0 : unmanaged
        {
            ((delegate *cdecl<UInt32, Int32, VertexAttribPointerType, Boolean, UInt32, T0, void>)Load("glVertexAttribPointer", 1403))(index, size, type, normalized, stride, pointer);
        }

        public partial void BeginQuery(GLEnum target, uint id)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glBeginQuery", 1404))(target, id);
        }

        public partial void BindBuffer(GLEnum target, uint buffer)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glBindBuffer", 1405))(target, buffer);
        }

        public unsafe partial void BufferData(GLEnum target, UIntPtr size, void *data, GLEnum usage)
        {
            ((delegate *cdecl<GLEnum, UIntPtr,, GLEnum, void>)Load("glBufferData", 1406))(target, size, data, usage);
        }

        public partial void BufferData<T0>(GLEnum target, UIntPtr size, Span<T0> data, GLEnum usage)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, UIntPtr, Span, GLEnum, void>)Load("glBufferData", 1407))(target, size, data, usage);
        }

        public unsafe partial void BufferSubData(GLEnum target, IntPtr offset, UIntPtr size, void *data)
        {
            ((delegate *cdecl<GLEnum, IntPtr, UIntPtr,, void>)Load("glBufferSubData", 1408))(target, offset, size, data);
        }

        public partial void BufferSubData<T0>(GLEnum target, IntPtr offset, UIntPtr size, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, IntPtr, UIntPtr, Span, void>)Load("glBufferSubData", 1409))(target, offset, size, data);
        }

        public unsafe partial void DeleteBuffers(uint n, uint *buffers)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glDeleteBuffers", 1410))(n, buffers);
        }

        public partial void DeleteBuffers(uint n, Span<uint> buffers)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glDeleteBuffers", 1411))(n, buffers);
        }

        public unsafe partial void DeleteQueries(uint n, uint *ids)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glDeleteQueries", 1412))(n, ids);
        }

        public partial void DeleteQueries(uint n, Span<uint> ids)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glDeleteQueries", 1413))(n, ids);
        }

        public partial void EndQuery(GLEnum target)
        {
            ((delegate *cdecl<GLEnum, void>)Load("glEndQuery", 1414))(target);
        }

        public unsafe partial void GenBuffers(uint n, uint *buffers)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glGenBuffers", 1415))(n, buffers);
        }

        public partial void GenBuffers(uint n, Span<uint> buffers)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glGenBuffers", 1416))(n, buffers);
        }

        public unsafe partial void GenQueries(uint n, uint *ids)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glGenQueries", 1417))(n, ids);
        }

        public partial void GenQueries(uint n, Span<uint> ids)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glGenQueries", 1418))(n, ids);
        }

        public unsafe partial void GetBufferParameter(GLEnum target, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<GLEnum, GLEnum,, void>)Load("glGetBufferParameteriv", 1419))(target, pname, params);
        }

        public partial void GetBufferParameter(GLEnum target, GLEnum pname, out int @params)
        {
            ((delegate *cdecl<GLEnum, GLEnum, Int32, void>)Load("glGetBufferParameteriv", 1420))(target, pname, params);
        }

        public unsafe partial void GetBufferPointer(GLEnum target, GLEnum pname, void **@params)
        {
            ((delegate *cdecl<GLEnum, GLEnum,, void>)Load("glGetBufferPointerv", 1421))(target, pname, params);
        }

        public unsafe partial void GetBufferPointer<T0>(GLEnum target, GLEnum pname, out T0*@params)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, GLEnum,, void>)Load("glGetBufferPointerv", 1422))(target, pname, params);
        }

        public unsafe partial void GetBufferSubData(GLEnum target, IntPtr offset, UIntPtr size, void *data)
        {
            ((delegate *cdecl<GLEnum, IntPtr, UIntPtr,, void>)Load("glGetBufferSubData", 1423))(target, offset, size, data);
        }

        public partial void GetBufferSubData<T0>(GLEnum target, IntPtr offset, UIntPtr size, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, IntPtr, UIntPtr, Span, void>)Load("glGetBufferSubData", 1424))(target, offset, size, data);
        }

        public unsafe partial void GetQuery(GLEnum target, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<GLEnum, GLEnum,, void>)Load("glGetQueryiv", 1425))(target, pname, params);
        }

        public partial void GetQuery(GLEnum target, GLEnum pname, out int @params)
        {
            ((delegate *cdecl<GLEnum, GLEnum, Int32, void>)Load("glGetQueryiv", 1426))(target, pname, params);
        }

        public unsafe partial void GetQueryObject(uint id, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetQueryObjectiv", 1427))(id, pname, params);
        }

        public partial void GetQueryObject(uint id, GLEnum pname, out int @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, Int32, void>)Load("glGetQueryObjectiv", 1428))(id, pname, params);
        }

        public unsafe partial void GetQueryObject(uint id, GLEnum pname, uint *@params)
        {
            ((delegate *cdecl<UInt32, GLEnum,, void>)Load("glGetQueryObjectuiv", 1429))(id, pname, params);
        }

        public partial void GetQueryObject(uint id, GLEnum pname, out uint @params)
        {
            ((delegate *cdecl<UInt32, GLEnum, UInt32, void>)Load("glGetQueryObjectuiv", 1430))(id, pname, params);
        }

        public partial bool IsBuffer(uint buffer)
        {
            return ((delegate *cdecl<UInt32, byte>)Load("glIsBuffer", 1431))(buffer) == 1;
        }

        public partial bool IsQuery(uint id)
        {
            return ((delegate *cdecl<UInt32, byte>)Load("glIsQuery", 1432))(id) == 1;
        }

        public partial bool UnmapBuffer(GLEnum target)
        {
            return ((delegate *cdecl<GLEnum, byte>)Load("glUnmapBuffer", 1434))(target) == 1;
        }

        public partial void BeginQuery(QueryTarget target, uint id)
        {
            ((delegate *cdecl<QueryTarget, UInt32, void>)Load("glBeginQuery", 1435))(target, id);
        }

        public partial void BindBuffer(BufferTargetARB target, uint buffer)
        {
            ((delegate *cdecl<BufferTargetARB, UInt32, void>)Load("glBindBuffer", 1436))(target, buffer);
        }

        public unsafe partial void BufferData(BufferTargetARB target, UIntPtr size, void *data, BufferUsageARB usage)
        {
            ((delegate *cdecl<BufferTargetARB, UIntPtr,, BufferUsageARB, void>)Load("glBufferData", 1437))(target, size, data, usage);
        }

        public partial void BufferData<T0>(BufferTargetARB target, UIntPtr size, Span<T0> data, BufferUsageARB usage)
            where T0 : unmanaged
        {
            ((delegate *cdecl<BufferTargetARB, UIntPtr, Span, BufferUsageARB, void>)Load("glBufferData", 1438))(target, size, data, usage);
        }

        public unsafe partial void BufferSubData(BufferTargetARB target, IntPtr offset, UIntPtr size, void *data)
        {
            ((delegate *cdecl<BufferTargetARB, IntPtr, UIntPtr,, void>)Load("glBufferSubData", 1439))(target, offset, size, data);
        }

        public partial void BufferSubData<T0>(BufferTargetARB target, IntPtr offset, UIntPtr size, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<BufferTargetARB, IntPtr, UIntPtr, Span, void>)Load("glBufferSubData", 1440))(target, offset, size, data);
        }

        public partial void EndQuery(QueryTarget target)
        {
            ((delegate *cdecl<QueryTarget, void>)Load("glEndQuery", 1441))(target);
        }

        public unsafe partial void GetBufferParameter(BufferTargetARB target, BufferPNameARB pname, int *@params)
        {
            ((delegate *cdecl<BufferTargetARB, BufferPNameARB,, void>)Load("glGetBufferParameteriv", 1442))(target, pname, params);
        }

        public partial void GetBufferParameter(BufferTargetARB target, BufferPNameARB pname, out int @params)
        {
            ((delegate *cdecl<BufferTargetARB, BufferPNameARB, Int32, void>)Load("glGetBufferParameteriv", 1443))(target, pname, params);
        }

        public unsafe partial void GetBufferPointer(BufferTargetARB target, BufferPointerNameARB pname, void **@params)
        {
            ((delegate *cdecl<BufferTargetARB, BufferPointerNameARB,, void>)Load("glGetBufferPointerv", 1444))(target, pname, params);
        }

        public unsafe partial void GetBufferPointer<T0>(BufferTargetARB target, BufferPointerNameARB pname, out T0*@params)
            where T0 : unmanaged
        {
            ((delegate *cdecl<BufferTargetARB, BufferPointerNameARB,, void>)Load("glGetBufferPointerv", 1445))(target, pname, params);
        }

        public unsafe partial void GetBufferSubData(BufferTargetARB target, IntPtr offset, UIntPtr size, void *data)
        {
            ((delegate *cdecl<BufferTargetARB, IntPtr, UIntPtr,, void>)Load("glGetBufferSubData", 1446))(target, offset, size, data);
        }

        public partial void GetBufferSubData<T0>(BufferTargetARB target, IntPtr offset, UIntPtr size, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<BufferTargetARB, IntPtr, UIntPtr, Span, void>)Load("glGetBufferSubData", 1447))(target, offset, size, data);
        }

        public unsafe partial void GetQuery(QueryTarget target, QueryParameterName pname, int *@params)
        {
            ((delegate *cdecl<QueryTarget, QueryParameterName,, void>)Load("glGetQueryiv", 1448))(target, pname, params);
        }

        public partial void GetQuery(QueryTarget target, QueryParameterName pname, out int @params)
        {
            ((delegate *cdecl<QueryTarget, QueryParameterName, Int32, void>)Load("glGetQueryiv", 1449))(target, pname, params);
        }

        public unsafe partial void GetQueryObject(uint id, QueryObjectParameterName pname, int *@params)
        {
            ((delegate *cdecl<UInt32, QueryObjectParameterName,, void>)Load("glGetQueryObjectiv", 1450))(id, pname, params);
        }

        public partial void GetQueryObject(uint id, QueryObjectParameterName pname, out int @params)
        {
            ((delegate *cdecl<UInt32, QueryObjectParameterName, Int32, void>)Load("glGetQueryObjectiv", 1451))(id, pname, params);
        }

        public unsafe partial void GetQueryObject(uint id, QueryObjectParameterName pname, uint *@params)
        {
            ((delegate *cdecl<UInt32, QueryObjectParameterName,, void>)Load("glGetQueryObjectuiv", 1452))(id, pname, params);
        }

        public partial void GetQueryObject(uint id, QueryObjectParameterName pname, out uint @params)
        {
            ((delegate *cdecl<UInt32, QueryObjectParameterName, UInt32, void>)Load("glGetQueryObjectuiv", 1453))(id, pname, params);
        }

        public partial bool UnmapBuffer(BufferTargetARB target)
        {
            return ((delegate *cdecl<BufferTargetARB, byte>)Load("glUnmapBuffer", 1455))(target) == 1;
        }

        public partial void BlendColor(float red, float green, float blue, float alpha)
        {
            ((delegate *cdecl<Single, Single, Single, Single, void>)Load("glBlendColor", 1456))(red, green, blue, alpha);
        }

        public partial void BlendEquation(GLEnum mode)
        {
            ((delegate *cdecl<GLEnum, void>)Load("glBlendEquation", 1457))(mode);
        }

        public partial void BlendFuncSeparate(GLEnum sfactorRGB, GLEnum dfactorRGB, GLEnum sfactorAlpha, GLEnum dfactorAlpha)
        {
            ((delegate *cdecl<GLEnum, GLEnum, GLEnum, GLEnum, void>)Load("glBlendFuncSeparate", 1458))(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }

        public unsafe partial void MultiDrawArrays(GLEnum mode, int *first, uint *count, uint drawcount)
        {
            ((delegate *cdecl<GLEnum,,, UInt32, void>)Load("glMultiDrawArrays", 1459))(mode, first, count, drawcount);
        }

        public partial void MultiDrawArrays(GLEnum mode, ref int first, ref uint count, uint drawcount)
        {
            ((delegate *cdecl<GLEnum, Int32, UInt32, UInt32, void>)Load("glMultiDrawArrays", 1460))(mode, first, count, drawcount);
        }

        public unsafe partial void MultiDrawElements(GLEnum mode, uint *count, GLEnum type, void **indices, uint drawcount)
        {
            ((delegate *cdecl<GLEnum,, GLEnum,, UInt32, void>)Load("glMultiDrawElements", 1461))(mode, count, type, indices, drawcount);
        }

        public unsafe partial void MultiDrawElements<T0>(GLEnum mode, ref uint count, GLEnum type, ref T0*indices, uint drawcount)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, UInt32, GLEnum,, UInt32, void>)Load("glMultiDrawElements", 1462))(mode, count, type, indices, drawcount);
        }

        public partial void PointParameter(GLEnum pname, float param)
        {
            ((delegate *cdecl<GLEnum, Single, void>)Load("glPointParameterf", 1463))(pname, param);
        }

        public unsafe partial void PointParameter(GLEnum pname, float *@params)
        {
            ((delegate *cdecl<GLEnum,, void>)Load("glPointParameterfv", 1464))(pname, params);
        }

        public partial void PointParameter(GLEnum pname, ref float @params)
        {
            ((delegate *cdecl<GLEnum, Single, void>)Load("glPointParameterfv", 1465))(pname, params);
        }

        public partial void PointParameter(GLEnum pname, int param)
        {
            ((delegate *cdecl<GLEnum, Int32, void>)Load("glPointParameteri", 1466))(pname, param);
        }

        public unsafe partial void PointParameter(GLEnum pname, int *@params)
        {
            ((delegate *cdecl<GLEnum,, void>)Load("glPointParameteriv", 1467))(pname, params);
        }

        public partial void PointParameter(GLEnum pname, ref int @params)
        {
            ((delegate *cdecl<GLEnum, Int32, void>)Load("glPointParameteriv", 1468))(pname, params);
        }

        public partial void BlendEquation(BlendEquationModeEXT mode)
        {
            ((delegate *cdecl<BlendEquationModeEXT, void>)Load("glBlendEquation", 1469))(mode);
        }

        public partial void BlendFuncSeparate(BlendingFactor sfactorRGB, BlendingFactor dfactorRGB, BlendingFactor sfactorAlpha, BlendingFactor dfactorAlpha)
        {
            ((delegate *cdecl<BlendingFactor, BlendingFactor, BlendingFactor, BlendingFactor, void>)Load("glBlendFuncSeparate", 1470))(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }

        public unsafe partial void MultiDrawArrays(PrimitiveType mode, int *first, uint *count, uint drawcount)
        {
            ((delegate *cdecl<PrimitiveType,,, UInt32, void>)Load("glMultiDrawArrays", 1471))(mode, first, count, drawcount);
        }

        public partial void MultiDrawArrays(PrimitiveType mode, ref int first, ref uint count, uint drawcount)
        {
            ((delegate *cdecl<PrimitiveType, Int32, UInt32, UInt32, void>)Load("glMultiDrawArrays", 1472))(mode, first, count, drawcount);
        }

        public unsafe partial void MultiDrawElements(PrimitiveType mode, uint *count, DrawElementsType type, void **indices, uint drawcount)
        {
            ((delegate *cdecl<PrimitiveType,, DrawElementsType,, UInt32, void>)Load("glMultiDrawElements", 1473))(mode, count, type, indices, drawcount);
        }

        public unsafe partial void MultiDrawElements<T0>(PrimitiveType mode, ref uint count, DrawElementsType type, ref T0*indices, uint drawcount)
            where T0 : unmanaged
        {
            ((delegate *cdecl<PrimitiveType, UInt32, DrawElementsType,, UInt32, void>)Load("glMultiDrawElements", 1474))(mode, count, type, indices, drawcount);
        }

        public partial void PointParameter(PointParameterNameARB pname, float param)
        {
            ((delegate *cdecl<PointParameterNameARB, Single, void>)Load("glPointParameterf", 1475))(pname, param);
        }

        public unsafe partial void PointParameter(PointParameterNameARB pname, float *@params)
        {
            ((delegate *cdecl<PointParameterNameARB,, void>)Load("glPointParameterfv", 1476))(pname, params);
        }

        public partial void PointParameter(PointParameterNameARB pname, ref float @params)
        {
            ((delegate *cdecl<PointParameterNameARB, Single, void>)Load("glPointParameterfv", 1477))(pname, params);
        }

        public partial void PointParameter(PointParameterNameARB pname, int param)
        {
            ((delegate *cdecl<PointParameterNameARB, Int32, void>)Load("glPointParameteri", 1478))(pname, param);
        }

        public unsafe partial void PointParameter(PointParameterNameARB pname, int *@params)
        {
            ((delegate *cdecl<PointParameterNameARB,, void>)Load("glPointParameteriv", 1479))(pname, params);
        }

        public partial void PointParameter(PointParameterNameARB pname, ref int @params)
        {
            ((delegate *cdecl<PointParameterNameARB, Int32, void>)Load("glPointParameteriv", 1480))(pname, params);
        }

        public partial void ActiveTexture(GLEnum texture)
        {
            ((delegate *cdecl<GLEnum, void>)Load("glActiveTexture", 1481))(texture);
        }

        public unsafe partial void CompressedTexImage1D(GLEnum target, int level, GLEnum internalformat, uint width, int border, uint imageSize, void *data)
        {
            ((delegate *cdecl<GLEnum, Int32, GLEnum, UInt32, Int32, UInt32,, void>)Load("glCompressedTexImage1D", 1482))(target, level, internalformat, width, border, imageSize, data);
        }

        public partial void CompressedTexImage1D<T0>(GLEnum target, int level, GLEnum internalformat, uint width, int border, uint imageSize, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, Int32, GLEnum, UInt32, Int32, UInt32, Span, void>)Load("glCompressedTexImage1D", 1483))(target, level, internalformat, width, border, imageSize, data);
        }

        public unsafe partial void CompressedTexImage2D(GLEnum target, int level, GLEnum internalformat, uint width, uint height, int border, uint imageSize, void *data)
        {
            ((delegate *cdecl<GLEnum, Int32, GLEnum, UInt32, UInt32, Int32, UInt32,, void>)Load("glCompressedTexImage2D", 1484))(target, level, internalformat, width, height, border, imageSize, data);
        }

        public partial void CompressedTexImage2D<T0>(GLEnum target, int level, GLEnum internalformat, uint width, uint height, int border, uint imageSize, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, Int32, GLEnum, UInt32, UInt32, Int32, UInt32, Span, void>)Load("glCompressedTexImage2D", 1485))(target, level, internalformat, width, height, border, imageSize, data);
        }

        public unsafe partial void CompressedTexImage3D(GLEnum target, int level, GLEnum internalformat, uint width, uint height, uint depth, int border, uint imageSize, void *data)
        {
            ((delegate *cdecl<GLEnum, Int32, GLEnum, UInt32, UInt32, UInt32, Int32, UInt32,, void>)Load("glCompressedTexImage3D", 1486))(target, level, internalformat, width, height, depth, border, imageSize, data);
        }

        public partial void CompressedTexImage3D<T0>(GLEnum target, int level, GLEnum internalformat, uint width, uint height, uint depth, int border, uint imageSize, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, Int32, GLEnum, UInt32, UInt32, UInt32, Int32, UInt32, Span, void>)Load("glCompressedTexImage3D", 1487))(target, level, internalformat, width, height, depth, border, imageSize, data);
        }

        public unsafe partial void CompressedTexSubImage1D(GLEnum target, int level, int xoffset, uint width, GLEnum format, uint imageSize, void *data)
        {
            ((delegate *cdecl<GLEnum, Int32, Int32, UInt32, GLEnum, UInt32,, void>)Load("glCompressedTexSubImage1D", 1488))(target, level, xoffset, width, format, imageSize, data);
        }

        public partial void CompressedTexSubImage1D<T0>(GLEnum target, int level, int xoffset, uint width, GLEnum format, uint imageSize, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, Int32, Int32, UInt32, GLEnum, UInt32, Span, void>)Load("glCompressedTexSubImage1D", 1489))(target, level, xoffset, width, format, imageSize, data);
        }

        public unsafe partial void CompressedTexSubImage2D(GLEnum target, int level, int xoffset, int yoffset, uint width, uint height, GLEnum format, uint imageSize, void *data)
        {
            ((delegate *cdecl<GLEnum, Int32, Int32, Int32, UInt32, UInt32, GLEnum, UInt32,, void>)Load("glCompressedTexSubImage2D", 1490))(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }

        public partial void CompressedTexSubImage2D<T0>(GLEnum target, int level, int xoffset, int yoffset, uint width, uint height, GLEnum format, uint imageSize, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, Int32, Int32, Int32, UInt32, UInt32, GLEnum, UInt32, Span, void>)Load("glCompressedTexSubImage2D", 1491))(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }

        public unsafe partial void CompressedTexSubImage3D(GLEnum target, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, GLEnum format, uint imageSize, void *data)
        {
            ((delegate *cdecl<GLEnum, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, GLEnum, UInt32,, void>)Load("glCompressedTexSubImage3D", 1492))(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }

        public partial void CompressedTexSubImage3D<T0>(GLEnum target, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, GLEnum format, uint imageSize, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, GLEnum, UInt32, Span, void>)Load("glCompressedTexSubImage3D", 1493))(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }

        public unsafe partial void GetCompressedTexImage(GLEnum target, int level, void *img)
        {
            ((delegate *cdecl<GLEnum, Int32,, void>)Load("glGetCompressedTexImage", 1494))(target, level, img);
        }

        public partial void GetCompressedTexImage<T0>(GLEnum target, int level, out T0 img)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, Int32, T0, void>)Load("glGetCompressedTexImage", 1495))(target, level, img);
        }

        public partial void SampleCoverage(float value, bool invert)
        {
            ((delegate *cdecl<Single, Boolean, void>)Load("glSampleCoverage", 1496))(value, invert);
        }

        public partial void ActiveTexture(TextureUnit texture)
        {
            ((delegate *cdecl<TextureUnit, void>)Load("glActiveTexture", 1497))(texture);
        }

        public unsafe partial void CompressedTexImage1D(TextureTarget target, int level, InternalFormat internalformat, uint width, int border, uint imageSize, void *data)
        {
            ((delegate *cdecl<TextureTarget, Int32, InternalFormat, UInt32, Int32, UInt32,, void>)Load("glCompressedTexImage1D", 1498))(target, level, internalformat, width, border, imageSize, data);
        }

        public partial void CompressedTexImage1D<T0>(TextureTarget target, int level, InternalFormat internalformat, uint width, int border, uint imageSize, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<TextureTarget, Int32, InternalFormat, UInt32, Int32, UInt32, Span, void>)Load("glCompressedTexImage1D", 1499))(target, level, internalformat, width, border, imageSize, data);
        }

        public unsafe partial void CompressedTexImage2D(TextureTarget target, int level, InternalFormat internalformat, uint width, uint height, int border, uint imageSize, void *data)
        {
            ((delegate *cdecl<TextureTarget, Int32, InternalFormat, UInt32, UInt32, Int32, UInt32,, void>)Load("glCompressedTexImage2D", 1500))(target, level, internalformat, width, height, border, imageSize, data);
        }

        public partial void CompressedTexImage2D<T0>(TextureTarget target, int level, InternalFormat internalformat, uint width, uint height, int border, uint imageSize, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<TextureTarget, Int32, InternalFormat, UInt32, UInt32, Int32, UInt32, Span, void>)Load("glCompressedTexImage2D", 1501))(target, level, internalformat, width, height, border, imageSize, data);
        }

        public unsafe partial void CompressedTexImage3D(TextureTarget target, int level, InternalFormat internalformat, uint width, uint height, uint depth, int border, uint imageSize, void *data)
        {
            ((delegate *cdecl<TextureTarget, Int32, InternalFormat, UInt32, UInt32, UInt32, Int32, UInt32,, void>)Load("glCompressedTexImage3D", 1502))(target, level, internalformat, width, height, depth, border, imageSize, data);
        }

        public partial void CompressedTexImage3D<T0>(TextureTarget target, int level, InternalFormat internalformat, uint width, uint height, uint depth, int border, uint imageSize, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<TextureTarget, Int32, InternalFormat, UInt32, UInt32, UInt32, Int32, UInt32, Span, void>)Load("glCompressedTexImage3D", 1503))(target, level, internalformat, width, height, depth, border, imageSize, data);
        }

        public unsafe partial void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, uint width, PixelFormat format, uint imageSize, void *data)
        {
            ((delegate *cdecl<TextureTarget, Int32, Int32, UInt32, PixelFormat, UInt32,, void>)Load("glCompressedTexSubImage1D", 1504))(target, level, xoffset, width, format, imageSize, data);
        }

        public partial void CompressedTexSubImage1D<T0>(TextureTarget target, int level, int xoffset, uint width, PixelFormat format, uint imageSize, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<TextureTarget, Int32, Int32, UInt32, PixelFormat, UInt32, Span, void>)Load("glCompressedTexSubImage1D", 1505))(target, level, xoffset, width, format, imageSize, data);
        }

        public unsafe partial void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, uint width, uint height, PixelFormat format, uint imageSize, void *data)
        {
            ((delegate *cdecl<TextureTarget, Int32, Int32, Int32, UInt32, UInt32, PixelFormat, UInt32,, void>)Load("glCompressedTexSubImage2D", 1506))(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }

        public partial void CompressedTexSubImage2D<T0>(TextureTarget target, int level, int xoffset, int yoffset, uint width, uint height, PixelFormat format, uint imageSize, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<TextureTarget, Int32, Int32, Int32, UInt32, UInt32, PixelFormat, UInt32, Span, void>)Load("glCompressedTexSubImage2D", 1507))(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }

        public unsafe partial void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, PixelFormat format, uint imageSize, void *data)
        {
            ((delegate *cdecl<TextureTarget, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, PixelFormat, UInt32,, void>)Load("glCompressedTexSubImage3D", 1508))(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }

        public partial void CompressedTexSubImage3D<T0>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, PixelFormat format, uint imageSize, Span<T0> data)
            where T0 : unmanaged
        {
            ((delegate *cdecl<TextureTarget, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, PixelFormat, UInt32, Span, void>)Load("glCompressedTexSubImage3D", 1509))(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }

        public unsafe partial void GetCompressedTexImage(TextureTarget target, int level, void *img)
        {
            ((delegate *cdecl<TextureTarget, Int32,, void>)Load("glGetCompressedTexImage", 1510))(target, level, img);
        }

        public partial void GetCompressedTexImage<T0>(TextureTarget target, int level, out T0 img)
            where T0 : unmanaged
        {
            ((delegate *cdecl<TextureTarget, Int32, T0, void>)Load("glGetCompressedTexImage", 1511))(target, level, img);
        }

        public partial void CopyTexSubImage3D(GLEnum target, int level, int xoffset, int yoffset, int zoffset, int x, int y, uint width, uint height)
        {
            ((delegate *cdecl<GLEnum, Int32, Int32, Int32, Int32, Int32, Int32, UInt32, UInt32, void>)Load("glCopyTexSubImage3D", 1512))(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }

        public unsafe partial void DrawRangeElements(GLEnum mode, uint start, uint end, uint count, GLEnum type, void *indices)
        {
            ((delegate *cdecl<GLEnum, UInt32, UInt32, UInt32, GLEnum,, void>)Load("glDrawRangeElements", 1513))(mode, start, end, count, type, indices);
        }

        public partial void DrawRangeElements<T0>(GLEnum mode, uint start, uint end, uint count, GLEnum type, ref T0 indices)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, UInt32, UInt32, UInt32, GLEnum, T0, void>)Load("glDrawRangeElements", 1514))(mode, start, end, count, type, indices);
        }

        public unsafe partial void TexImage3D(GLEnum target, int level, int internalformat, uint width, uint height, uint depth, int border, GLEnum format, GLEnum type, void *pixels)
        {
            ((delegate *cdecl<GLEnum, Int32, Int32, UInt32, UInt32, UInt32, Int32, GLEnum, GLEnum,, void>)Load("glTexImage3D", 1515))(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }

        public partial void TexImage3D<T0>(GLEnum target, int level, int internalformat, uint width, uint height, uint depth, int border, GLEnum format, GLEnum type, ref T0 pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, Int32, Int32, UInt32, UInt32, UInt32, Int32, GLEnum, GLEnum, T0, void>)Load("glTexImage3D", 1516))(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }

        public unsafe partial void TexSubImage3D(GLEnum target, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, GLEnum format, GLEnum type, void *pixels)
        {
            ((delegate *cdecl<GLEnum, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, GLEnum, GLEnum,, void>)Load("glTexSubImage3D", 1517))(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }

        public partial void TexSubImage3D<T0>(GLEnum target, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, GLEnum format, GLEnum type, ref T0 pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, GLEnum, GLEnum, T0, void>)Load("glTexSubImage3D", 1518))(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }

        public partial void CopyTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, uint width, uint height)
        {
            ((delegate *cdecl<TextureTarget, Int32, Int32, Int32, Int32, Int32, Int32, UInt32, UInt32, void>)Load("glCopyTexSubImage3D", 1519))(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }

        public unsafe partial void DrawRangeElements(PrimitiveType mode, uint start, uint end, uint count, DrawElementsType type, void *indices)
        {
            ((delegate *cdecl<PrimitiveType, UInt32, UInt32, UInt32, DrawElementsType,, void>)Load("glDrawRangeElements", 1520))(mode, start, end, count, type, indices);
        }

        public partial void DrawRangeElements<T0>(PrimitiveType mode, uint start, uint end, uint count, DrawElementsType type, ref T0 indices)
            where T0 : unmanaged
        {
            ((delegate *cdecl<PrimitiveType, UInt32, UInt32, UInt32, DrawElementsType, T0, void>)Load("glDrawRangeElements", 1521))(mode, start, end, count, type, indices);
        }

        public unsafe partial void TexImage3D(TextureTarget target, int level, int internalformat, uint width, uint height, uint depth, int border, PixelFormat format, PixelType type, void *pixels)
        {
            ((delegate *cdecl<TextureTarget, Int32, Int32, UInt32, UInt32, UInt32, Int32, PixelFormat, PixelType,, void>)Load("glTexImage3D", 1522))(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }

        public partial void TexImage3D<T0>(TextureTarget target, int level, int internalformat, uint width, uint height, uint depth, int border, PixelFormat format, PixelType type, ref T0 pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<TextureTarget, Int32, Int32, UInt32, UInt32, UInt32, Int32, PixelFormat, PixelType, T0, void>)Load("glTexImage3D", 1523))(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }

        public unsafe partial void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, PixelFormat format, PixelType type, void *pixels)
        {
            ((delegate *cdecl<TextureTarget, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, PixelFormat, PixelType,, void>)Load("glTexSubImage3D", 1524))(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }

        public partial void TexSubImage3D<T0>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, uint width, uint height, uint depth, PixelFormat format, PixelType type, ref T0 pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<TextureTarget, Int32, Int32, Int32, Int32, UInt32, UInt32, UInt32, PixelFormat, PixelType, T0, void>)Load("glTexSubImage3D", 1525))(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }

        public partial void BindTexture(GLEnum target, uint texture)
        {
            ((delegate *cdecl<GLEnum, UInt32, void>)Load("glBindTexture", 1526))(target, texture);
        }

        public partial void CopyTexImage1D(GLEnum target, int level, GLEnum internalformat, int x, int y, uint width, int border)
        {
            ((delegate *cdecl<GLEnum, Int32, GLEnum, Int32, Int32, UInt32, Int32, void>)Load("glCopyTexImage1D", 1527))(target, level, internalformat, x, y, width, border);
        }

        public partial void CopyTexImage2D(GLEnum target, int level, GLEnum internalformat, int x, int y, uint width, uint height, int border)
        {
            ((delegate *cdecl<GLEnum, Int32, GLEnum, Int32, Int32, UInt32, UInt32, Int32, void>)Load("glCopyTexImage2D", 1528))(target, level, internalformat, x, y, width, height, border);
        }

        public partial void CopyTexSubImage1D(GLEnum target, int level, int xoffset, int x, int y, uint width)
        {
            ((delegate *cdecl<GLEnum, Int32, Int32, Int32, Int32, UInt32, void>)Load("glCopyTexSubImage1D", 1529))(target, level, xoffset, x, y, width);
        }

        public partial void CopyTexSubImage2D(GLEnum target, int level, int xoffset, int yoffset, int x, int y, uint width, uint height)
        {
            ((delegate *cdecl<GLEnum, Int32, Int32, Int32, Int32, Int32, UInt32, UInt32, void>)Load("glCopyTexSubImage2D", 1530))(target, level, xoffset, yoffset, x, y, width, height);
        }

        public unsafe partial void DeleteTextures(uint n, uint *textures)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glDeleteTextures", 1531))(n, textures);
        }

        public partial void DeleteTextures(uint n, Span<uint> textures)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glDeleteTextures", 1532))(n, textures);
        }

        public partial void DrawArrays(GLEnum mode, int first, uint count)
        {
            ((delegate *cdecl<GLEnum, Int32, UInt32, void>)Load("glDrawArrays", 1533))(mode, first, count);
        }

        public unsafe partial void DrawElements(GLEnum mode, uint count, GLEnum type, void *indices)
        {
            ((delegate *cdecl<GLEnum, UInt32, GLEnum,, void>)Load("glDrawElements", 1534))(mode, count, type, indices);
        }

        public partial void DrawElements<T0>(GLEnum mode, uint count, GLEnum type, ref T0 indices)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, UInt32, GLEnum, T0, void>)Load("glDrawElements", 1535))(mode, count, type, indices);
        }

        public unsafe partial void GenTextures(uint n, uint *textures)
        {
            ((delegate *cdecl<UInt32,, void>)Load("glGenTextures", 1536))(n, textures);
        }

        public partial void GenTextures(uint n, Span<uint> textures)
        {
            ((delegate *cdecl<UInt32, Span, void>)Load("glGenTextures", 1537))(n, textures);
        }

        public partial bool IsTexture(uint texture)
        {
            return ((delegate *cdecl<UInt32, byte>)Load("glIsTexture", 1538))(texture) == 1;
        }

        public partial void PolygonOffset(float factor, float units)
        {
            ((delegate *cdecl<Single, Single, void>)Load("glPolygonOffset", 1539))(factor, units);
        }

        public unsafe partial void TexSubImage1D(GLEnum target, int level, int xoffset, uint width, GLEnum format, GLEnum type, void *pixels)
        {
            ((delegate *cdecl<GLEnum, Int32, Int32, UInt32, GLEnum, GLEnum,, void>)Load("glTexSubImage1D", 1540))(target, level, xoffset, width, format, type, pixels);
        }

        public partial void TexSubImage1D<T0>(GLEnum target, int level, int xoffset, uint width, GLEnum format, GLEnum type, ref T0 pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, Int32, Int32, UInt32, GLEnum, GLEnum, T0, void>)Load("glTexSubImage1D", 1541))(target, level, xoffset, width, format, type, pixels);
        }

        public unsafe partial void TexSubImage2D(GLEnum target, int level, int xoffset, int yoffset, uint width, uint height, GLEnum format, GLEnum type, void *pixels)
        {
            ((delegate *cdecl<GLEnum, Int32, Int32, Int32, UInt32, UInt32, GLEnum, GLEnum,, void>)Load("glTexSubImage2D", 1542))(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }

        public partial void TexSubImage2D<T0>(GLEnum target, int level, int xoffset, int yoffset, uint width, uint height, GLEnum format, GLEnum type, ref T0 pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, Int32, Int32, Int32, UInt32, UInt32, GLEnum, GLEnum, T0, void>)Load("glTexSubImage2D", 1543))(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }

        public partial void BindTexture(TextureTarget target, uint texture)
        {
            ((delegate *cdecl<TextureTarget, UInt32, void>)Load("glBindTexture", 1544))(target, texture);
        }

        public partial void CopyTexImage1D(TextureTarget target, int level, InternalFormat internalformat, int x, int y, uint width, int border)
        {
            ((delegate *cdecl<TextureTarget, Int32, InternalFormat, Int32, Int32, UInt32, Int32, void>)Load("glCopyTexImage1D", 1545))(target, level, internalformat, x, y, width, border);
        }

        public partial void CopyTexImage2D(TextureTarget target, int level, InternalFormat internalformat, int x, int y, uint width, uint height, int border)
        {
            ((delegate *cdecl<TextureTarget, Int32, InternalFormat, Int32, Int32, UInt32, UInt32, Int32, void>)Load("glCopyTexImage2D", 1546))(target, level, internalformat, x, y, width, height, border);
        }

        public partial void CopyTexSubImage1D(TextureTarget target, int level, int xoffset, int x, int y, uint width)
        {
            ((delegate *cdecl<TextureTarget, Int32, Int32, Int32, Int32, UInt32, void>)Load("glCopyTexSubImage1D", 1547))(target, level, xoffset, x, y, width);
        }

        public partial void CopyTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, uint width, uint height)
        {
            ((delegate *cdecl<TextureTarget, Int32, Int32, Int32, Int32, Int32, UInt32, UInt32, void>)Load("glCopyTexSubImage2D", 1548))(target, level, xoffset, yoffset, x, y, width, height);
        }

        public partial void DrawArrays(PrimitiveType mode, int first, uint count)
        {
            ((delegate *cdecl<PrimitiveType, Int32, UInt32, void>)Load("glDrawArrays", 1549))(mode, first, count);
        }

        public unsafe partial void DrawElements(PrimitiveType mode, uint count, DrawElementsType type, void *indices)
        {
            ((delegate *cdecl<PrimitiveType, UInt32, DrawElementsType,, void>)Load("glDrawElements", 1550))(mode, count, type, indices);
        }

        public partial void DrawElements<T0>(PrimitiveType mode, uint count, DrawElementsType type, ref T0 indices)
            where T0 : unmanaged
        {
            ((delegate *cdecl<PrimitiveType, UInt32, DrawElementsType, T0, void>)Load("glDrawElements", 1551))(mode, count, type, indices);
        }

        public unsafe partial void TexSubImage1D(TextureTarget target, int level, int xoffset, uint width, PixelFormat format, PixelType type, void *pixels)
        {
            ((delegate *cdecl<TextureTarget, Int32, Int32, UInt32, PixelFormat, PixelType,, void>)Load("glTexSubImage1D", 1552))(target, level, xoffset, width, format, type, pixels);
        }

        public partial void TexSubImage1D<T0>(TextureTarget target, int level, int xoffset, uint width, PixelFormat format, PixelType type, ref T0 pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<TextureTarget, Int32, Int32, UInt32, PixelFormat, PixelType, T0, void>)Load("glTexSubImage1D", 1553))(target, level, xoffset, width, format, type, pixels);
        }

        public unsafe partial void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, uint width, uint height, PixelFormat format, PixelType type, void *pixels)
        {
            ((delegate *cdecl<TextureTarget, Int32, Int32, Int32, UInt32, UInt32, PixelFormat, PixelType,, void>)Load("glTexSubImage2D", 1554))(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }

        public partial void TexSubImage2D<T0>(TextureTarget target, int level, int xoffset, int yoffset, uint width, uint height, PixelFormat format, PixelType type, ref T0 pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<TextureTarget, Int32, Int32, Int32, UInt32, UInt32, PixelFormat, PixelType, T0, void>)Load("glTexSubImage2D", 1555))(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }

        public partial void BlendFunc(GLEnum sfactor, GLEnum dfactor)
        {
            ((delegate *cdecl<GLEnum, GLEnum, void>)Load("glBlendFunc", 1556))(sfactor, dfactor);
        }

        public partial void Clear(uint mask)
        {
            ((delegate *cdecl<UInt32, void>)Load("glClear", 1557))(mask);
        }

        public partial void ClearColor(float red, float green, float blue, float alpha)
        {
            ((delegate *cdecl<Single, Single, Single, Single, void>)Load("glClearColor", 1558))(red, green, blue, alpha);
        }

        public partial void ClearDepth(double depth)
        {
            ((delegate *cdecl<Double, void>)Load("glClearDepth", 1559))(depth);
        }

        public partial void ClearStencil(int s)
        {
            ((delegate *cdecl<Int32, void>)Load("glClearStencil", 1560))(s);
        }

        public partial void ColorMask(bool red, bool green, bool blue, bool alpha)
        {
            ((delegate *cdecl<Boolean, Boolean, Boolean, Boolean, void>)Load("glColorMask", 1561))(red, green, blue, alpha);
        }

        public partial void CullFace(GLEnum mode)
        {
            ((delegate *cdecl<GLEnum, void>)Load("glCullFace", 1562))(mode);
        }

        public partial void DepthFunc(GLEnum func)
        {
            ((delegate *cdecl<GLEnum, void>)Load("glDepthFunc", 1563))(func);
        }

        public partial void DepthMask(bool flag)
        {
            ((delegate *cdecl<Boolean, void>)Load("glDepthMask", 1564))(flag);
        }

        public partial void DepthRange(double n, double f)
        {
            ((delegate *cdecl<Double, Double, void>)Load("glDepthRange", 1565))(n, f);
        }

        public partial void Disable(GLEnum cap)
        {
            ((delegate *cdecl<GLEnum, void>)Load("glDisable", 1566))(cap);
        }

        public partial void DrawBuffer(GLEnum buf)
        {
            ((delegate *cdecl<GLEnum, void>)Load("glDrawBuffer", 1567))(buf);
        }

        public partial void Enable(GLEnum cap)
        {
            ((delegate *cdecl<GLEnum, void>)Load("glEnable", 1568))(cap);
        }

        public partial void Finish()
        {
            ((delegate *cdecl<void>)Load("glFinish", 1569))();
        }

        public partial void Flush()
        {
            ((delegate *cdecl<void>)Load("glFlush", 1570))();
        }

        public partial void FrontFace(GLEnum mode)
        {
            ((delegate *cdecl<GLEnum, void>)Load("glFrontFace", 1571))(mode);
        }

        public unsafe partial void GetBoolean(GLEnum pname, bool *data)
        {
            ((delegate *cdecl<GLEnum,, void>)Load("glGetBooleanv", 1572))(pname, data);
        }

        public partial void GetBoolean(GLEnum pname, out bool data)
        {
            ((delegate *cdecl<GLEnum, Boolean, void>)Load("glGetBooleanv", 1573))(pname, data);
        }

        public unsafe partial void GetDouble(GLEnum pname, double *data)
        {
            ((delegate *cdecl<GLEnum,, void>)Load("glGetDoublev", 1574))(pname, data);
        }

        public partial void GetDouble(GLEnum pname, out double data)
        {
            ((delegate *cdecl<GLEnum, Double, void>)Load("glGetDoublev", 1575))(pname, data);
        }

        public unsafe partial void GetFloat(GLEnum pname, float *data)
        {
            ((delegate *cdecl<GLEnum,, void>)Load("glGetFloatv", 1577))(pname, data);
        }

        public partial void GetFloat(GLEnum pname, out float data)
        {
            ((delegate *cdecl<GLEnum, Single, void>)Load("glGetFloatv", 1578))(pname, data);
        }

        public unsafe partial void GetInteger(GLEnum pname, int *data)
        {
            ((delegate *cdecl<GLEnum,, void>)Load("glGetIntegerv", 1579))(pname, data);
        }

        public partial void GetInteger(GLEnum pname, out int data)
        {
            ((delegate *cdecl<GLEnum, Int32, void>)Load("glGetIntegerv", 1580))(pname, data);
        }

        public unsafe partial void GetTexImage(GLEnum target, int level, GLEnum format, GLEnum type, void *pixels)
        {
            ((delegate *cdecl<GLEnum, Int32, GLEnum, GLEnum,, void>)Load("glGetTexImage", 1582))(target, level, format, type, pixels);
        }

        public partial void GetTexImage<T0>(GLEnum target, int level, GLEnum format, GLEnum type, out T0 pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, Int32, GLEnum, GLEnum, T0, void>)Load("glGetTexImage", 1583))(target, level, format, type, pixels);
        }

        public unsafe partial void GetTexLevelParameter(GLEnum target, int level, GLEnum pname, float *@params)
        {
            ((delegate *cdecl<GLEnum, Int32, GLEnum,, void>)Load("glGetTexLevelParameterfv", 1584))(target, level, pname, params);
        }

        public partial void GetTexLevelParameter(GLEnum target, int level, GLEnum pname, out float @params)
        {
            ((delegate *cdecl<GLEnum, Int32, GLEnum, Single, void>)Load("glGetTexLevelParameterfv", 1585))(target, level, pname, params);
        }

        public unsafe partial void GetTexLevelParameter(GLEnum target, int level, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<GLEnum, Int32, GLEnum,, void>)Load("glGetTexLevelParameteriv", 1586))(target, level, pname, params);
        }

        public partial void GetTexLevelParameter(GLEnum target, int level, GLEnum pname, out int @params)
        {
            ((delegate *cdecl<GLEnum, Int32, GLEnum, Int32, void>)Load("glGetTexLevelParameteriv", 1587))(target, level, pname, params);
        }

        public unsafe partial void GetTexParameter(GLEnum target, GLEnum pname, float *@params)
        {
            ((delegate *cdecl<GLEnum, GLEnum,, void>)Load("glGetTexParameterfv", 1588))(target, pname, params);
        }

        public partial void GetTexParameter(GLEnum target, GLEnum pname, out float @params)
        {
            ((delegate *cdecl<GLEnum, GLEnum, Single, void>)Load("glGetTexParameterfv", 1589))(target, pname, params);
        }

        public unsafe partial void GetTexParameter(GLEnum target, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<GLEnum, GLEnum,, void>)Load("glGetTexParameteriv", 1590))(target, pname, params);
        }

        public partial void GetTexParameter(GLEnum target, GLEnum pname, out int @params)
        {
            ((delegate *cdecl<GLEnum, GLEnum, Int32, void>)Load("glGetTexParameteriv", 1591))(target, pname, params);
        }

        public partial void Hint(GLEnum target, GLEnum mode)
        {
            ((delegate *cdecl<GLEnum, GLEnum, void>)Load("glHint", 1592))(target, mode);
        }

        public partial bool IsEnabled(GLEnum cap)
        {
            return ((delegate *cdecl<GLEnum, byte>)Load("glIsEnabled", 1593))(cap) == 1;
        }

        public partial void LineWidth(float width)
        {
            ((delegate *cdecl<Single, void>)Load("glLineWidth", 1594))(width);
        }

        public partial void LogicOp(GLEnum opcode)
        {
            ((delegate *cdecl<GLEnum, void>)Load("glLogicOp", 1595))(opcode);
        }

        public partial void PixelStore(GLEnum pname, float param)
        {
            ((delegate *cdecl<GLEnum, Single, void>)Load("glPixelStoref", 1596))(pname, param);
        }

        public partial void PixelStore(GLEnum pname, int param)
        {
            ((delegate *cdecl<GLEnum, Int32, void>)Load("glPixelStorei", 1597))(pname, param);
        }

        public partial void PointSize(float size)
        {
            ((delegate *cdecl<Single, void>)Load("glPointSize", 1598))(size);
        }

        public partial void PolygonMode(GLEnum face, GLEnum mode)
        {
            ((delegate *cdecl<GLEnum, GLEnum, void>)Load("glPolygonMode", 1599))(face, mode);
        }

        public partial void ReadBuffer(GLEnum src)
        {
            ((delegate *cdecl<GLEnum, void>)Load("glReadBuffer", 1600))(src);
        }

        public unsafe partial void ReadPixels(int x, int y, uint width, uint height, GLEnum format, GLEnum type, void *pixels)
        {
            ((delegate *cdecl<Int32, Int32, UInt32, UInt32, GLEnum, GLEnum,, void>)Load("glReadPixels", 1601))(x, y, width, height, format, type, pixels);
        }

        public partial void ReadPixels<T0>(int x, int y, uint width, uint height, GLEnum format, GLEnum type, out T0 pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<Int32, Int32, UInt32, UInt32, GLEnum, GLEnum, T0, void>)Load("glReadPixels", 1602))(x, y, width, height, format, type, pixels);
        }

        public partial void Scissor(int x, int y, uint width, uint height)
        {
            ((delegate *cdecl<Int32, Int32, UInt32, UInt32, void>)Load("glScissor", 1603))(x, y, width, height);
        }

        public partial void StencilFunc(GLEnum func, int @ref, uint mask)
        {
            ((delegate *cdecl<GLEnum, Int32, UInt32, void>)Load("glStencilFunc", 1604))(func, ref, mask);
        }

        public partial void StencilMask(uint mask)
        {
            ((delegate *cdecl<UInt32, void>)Load("glStencilMask", 1605))(mask);
        }

        public partial void StencilOp(GLEnum fail, GLEnum zfail, GLEnum zpass)
        {
            ((delegate *cdecl<GLEnum, GLEnum, GLEnum, void>)Load("glStencilOp", 1606))(fail, zfail, zpass);
        }

        public unsafe partial void TexImage1D(GLEnum target, int level, int internalformat, uint width, int border, GLEnum format, GLEnum type, void *pixels)
        {
            ((delegate *cdecl<GLEnum, Int32, Int32, UInt32, Int32, GLEnum, GLEnum,, void>)Load("glTexImage1D", 1607))(target, level, internalformat, width, border, format, type, pixels);
        }

        public partial void TexImage1D<T0>(GLEnum target, int level, int internalformat, uint width, int border, GLEnum format, GLEnum type, ref T0 pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, Int32, Int32, UInt32, Int32, GLEnum, GLEnum, T0, void>)Load("glTexImage1D", 1608))(target, level, internalformat, width, border, format, type, pixels);
        }

        public unsafe partial void TexImage2D(GLEnum target, int level, int internalformat, uint width, uint height, int border, GLEnum format, GLEnum type, void *pixels)
        {
            ((delegate *cdecl<GLEnum, Int32, Int32, UInt32, UInt32, Int32, GLEnum, GLEnum,, void>)Load("glTexImage2D", 1609))(target, level, internalformat, width, height, border, format, type, pixels);
        }

        public partial void TexImage2D<T0>(GLEnum target, int level, int internalformat, uint width, uint height, int border, GLEnum format, GLEnum type, ref T0 pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<GLEnum, Int32, Int32, UInt32, UInt32, Int32, GLEnum, GLEnum, T0, void>)Load("glTexImage2D", 1610))(target, level, internalformat, width, height, border, format, type, pixels);
        }

        public partial void TexParameter(GLEnum target, GLEnum pname, float param)
        {
            ((delegate *cdecl<GLEnum, GLEnum, Single, void>)Load("glTexParameterf", 1611))(target, pname, param);
        }

        public unsafe partial void TexParameter(GLEnum target, GLEnum pname, float *@params)
        {
            ((delegate *cdecl<GLEnum, GLEnum,, void>)Load("glTexParameterfv", 1612))(target, pname, params);
        }

        public partial void TexParameter(GLEnum target, GLEnum pname, ref float @params)
        {
            ((delegate *cdecl<GLEnum, GLEnum, Single, void>)Load("glTexParameterfv", 1613))(target, pname, params);
        }

        public partial void TexParameter(GLEnum target, GLEnum pname, int param)
        {
            ((delegate *cdecl<GLEnum, GLEnum, Int32, void>)Load("glTexParameteri", 1614))(target, pname, param);
        }

        public unsafe partial void TexParameter(GLEnum target, GLEnum pname, int *@params)
        {
            ((delegate *cdecl<GLEnum, GLEnum,, void>)Load("glTexParameteriv", 1615))(target, pname, params);
        }

        public partial void TexParameter(GLEnum target, GLEnum pname, ref int @params)
        {
            ((delegate *cdecl<GLEnum, GLEnum, Int32, void>)Load("glTexParameteriv", 1616))(target, pname, params);
        }

        public partial void Viewport(int x, int y, uint width, uint height)
        {
            ((delegate *cdecl<Int32, Int32, UInt32, UInt32, void>)Load("glViewport", 1617))(x, y, width, height);
        }

        public partial void BlendFunc(BlendingFactor sfactor, BlendingFactor dfactor)
        {
            ((delegate *cdecl<BlendingFactor, BlendingFactor, void>)Load("glBlendFunc", 1618))(sfactor, dfactor);
        }

        public partial void CullFace(CullFaceMode mode)
        {
            ((delegate *cdecl<CullFaceMode, void>)Load("glCullFace", 1619))(mode);
        }

        public partial void DepthFunc(DepthFunction func)
        {
            ((delegate *cdecl<DepthFunction, void>)Load("glDepthFunc", 1620))(func);
        }

        public partial void Disable(EnableCap cap)
        {
            ((delegate *cdecl<EnableCap, void>)Load("glDisable", 1621))(cap);
        }

        public partial void DrawBuffer(DrawBufferMode buf)
        {
            ((delegate *cdecl<DrawBufferMode, void>)Load("glDrawBuffer", 1622))(buf);
        }

        public partial void Enable(EnableCap cap)
        {
            ((delegate *cdecl<EnableCap, void>)Load("glEnable", 1623))(cap);
        }

        public partial void FrontFace(FrontFaceDirection mode)
        {
            ((delegate *cdecl<FrontFaceDirection, void>)Load("glFrontFace", 1624))(mode);
        }

        public unsafe partial void GetBoolean(GetPName pname, bool *data)
        {
            ((delegate *cdecl<GetPName,, void>)Load("glGetBooleanv", 1625))(pname, data);
        }

        public partial void GetBoolean(GetPName pname, out bool data)
        {
            ((delegate *cdecl<GetPName, Boolean, void>)Load("glGetBooleanv", 1626))(pname, data);
        }

        public unsafe partial void GetDouble(GetPName pname, double *data)
        {
            ((delegate *cdecl<GetPName,, void>)Load("glGetDoublev", 1627))(pname, data);
        }

        public partial void GetDouble(GetPName pname, out double data)
        {
            ((delegate *cdecl<GetPName, Double, void>)Load("glGetDoublev", 1628))(pname, data);
        }

        public unsafe partial void GetFloat(GetPName pname, float *data)
        {
            ((delegate *cdecl<GetPName,, void>)Load("glGetFloatv", 1629))(pname, data);
        }

        public partial void GetFloat(GetPName pname, out float data)
        {
            ((delegate *cdecl<GetPName, Single, void>)Load("glGetFloatv", 1630))(pname, data);
        }

        public unsafe partial void GetInteger(GetPName pname, int *data)
        {
            ((delegate *cdecl<GetPName,, void>)Load("glGetIntegerv", 1631))(pname, data);
        }

        public partial void GetInteger(GetPName pname, out int data)
        {
            ((delegate *cdecl<GetPName, Int32, void>)Load("glGetIntegerv", 1632))(pname, data);
        }

        public unsafe partial void GetTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, void *pixels)
        {
            ((delegate *cdecl<TextureTarget, Int32, PixelFormat, PixelType,, void>)Load("glGetTexImage", 1634))(target, level, format, type, pixels);
        }

        public partial void GetTexImage<T0>(TextureTarget target, int level, PixelFormat format, PixelType type, out T0 pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<TextureTarget, Int32, PixelFormat, PixelType, T0, void>)Load("glGetTexImage", 1635))(target, level, format, type, pixels);
        }

        public unsafe partial void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, float *@params)
        {
            ((delegate *cdecl<TextureTarget, Int32, GetTextureParameter,, void>)Load("glGetTexLevelParameterfv", 1636))(target, level, pname, params);
        }

        public partial void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, out float @params)
        {
            ((delegate *cdecl<TextureTarget, Int32, GetTextureParameter, Single, void>)Load("glGetTexLevelParameterfv", 1637))(target, level, pname, params);
        }

        public unsafe partial void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, int *@params)
        {
            ((delegate *cdecl<TextureTarget, Int32, GetTextureParameter,, void>)Load("glGetTexLevelParameteriv", 1638))(target, level, pname, params);
        }

        public partial void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, out int @params)
        {
            ((delegate *cdecl<TextureTarget, Int32, GetTextureParameter, Int32, void>)Load("glGetTexLevelParameteriv", 1639))(target, level, pname, params);
        }

        public unsafe partial void GetTexParameter(TextureTarget target, GetTextureParameter pname, float *@params)
        {
            ((delegate *cdecl<TextureTarget, GetTextureParameter,, void>)Load("glGetTexParameterfv", 1640))(target, pname, params);
        }

        public partial void GetTexParameter(TextureTarget target, GetTextureParameter pname, out float @params)
        {
            ((delegate *cdecl<TextureTarget, GetTextureParameter, Single, void>)Load("glGetTexParameterfv", 1641))(target, pname, params);
        }

        public unsafe partial void GetTexParameter(TextureTarget target, GetTextureParameter pname, int *@params)
        {
            ((delegate *cdecl<TextureTarget, GetTextureParameter,, void>)Load("glGetTexParameteriv", 1642))(target, pname, params);
        }

        public partial void GetTexParameter(TextureTarget target, GetTextureParameter pname, out int @params)
        {
            ((delegate *cdecl<TextureTarget, GetTextureParameter, Int32, void>)Load("glGetTexParameteriv", 1643))(target, pname, params);
        }

        public partial void Hint(HintTarget target, HintMode mode)
        {
            ((delegate *cdecl<HintTarget, HintMode, void>)Load("glHint", 1644))(target, mode);
        }

        public partial bool IsEnabled(EnableCap cap)
        {
            return ((delegate *cdecl<EnableCap, byte>)Load("glIsEnabled", 1645))(cap) == 1;
        }

        public partial void LogicOp(LogicOp opcode)
        {
            ((delegate *cdecl<LogicOp, void>)Load("glLogicOp", 1646))(opcode);
        }

        public partial void PixelStore(PixelStoreParameter pname, float param)
        {
            ((delegate *cdecl<PixelStoreParameter, Single, void>)Load("glPixelStoref", 1647))(pname, param);
        }

        public partial void PixelStore(PixelStoreParameter pname, int param)
        {
            ((delegate *cdecl<PixelStoreParameter, Int32, void>)Load("glPixelStorei", 1648))(pname, param);
        }

        public partial void PolygonMode(MaterialFace face, PolygonMode mode)
        {
            ((delegate *cdecl<MaterialFace, PolygonMode, void>)Load("glPolygonMode", 1649))(face, mode);
        }

        public partial void ReadBuffer(ReadBufferMode src)
        {
            ((delegate *cdecl<ReadBufferMode, void>)Load("glReadBuffer", 1650))(src);
        }

        public unsafe partial void ReadPixels(int x, int y, uint width, uint height, PixelFormat format, PixelType type, void *pixels)
        {
            ((delegate *cdecl<Int32, Int32, UInt32, UInt32, PixelFormat, PixelType,, void>)Load("glReadPixels", 1651))(x, y, width, height, format, type, pixels);
        }

        public partial void ReadPixels<T0>(int x, int y, uint width, uint height, PixelFormat format, PixelType type, out T0 pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<Int32, Int32, UInt32, UInt32, PixelFormat, PixelType, T0, void>)Load("glReadPixels", 1652))(x, y, width, height, format, type, pixels);
        }

        public partial void StencilFunc(StencilFunction func, int @ref, uint mask)
        {
            ((delegate *cdecl<StencilFunction, Int32, UInt32, void>)Load("glStencilFunc", 1653))(func, ref, mask);
        }

        public partial void StencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass)
        {
            ((delegate *cdecl<StencilOp, StencilOp, StencilOp, void>)Load("glStencilOp", 1654))(fail, zfail, zpass);
        }

        public unsafe partial void TexImage1D(TextureTarget target, int level, int internalformat, uint width, int border, PixelFormat format, PixelType type, void *pixels)
        {
            ((delegate *cdecl<TextureTarget, Int32, Int32, UInt32, Int32, PixelFormat, PixelType,, void>)Load("glTexImage1D", 1655))(target, level, internalformat, width, border, format, type, pixels);
        }

        public partial void TexImage1D<T0>(TextureTarget target, int level, int internalformat, uint width, int border, PixelFormat format, PixelType type, ref T0 pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<TextureTarget, Int32, Int32, UInt32, Int32, PixelFormat, PixelType, T0, void>)Load("glTexImage1D", 1656))(target, level, internalformat, width, border, format, type, pixels);
        }

        public unsafe partial void TexImage2D(TextureTarget target, int level, int internalformat, uint width, uint height, int border, PixelFormat format, PixelType type, void *pixels)
        {
            ((delegate *cdecl<TextureTarget, Int32, Int32, UInt32, UInt32, Int32, PixelFormat, PixelType,, void>)Load("glTexImage2D", 1657))(target, level, internalformat, width, height, border, format, type, pixels);
        }

        public partial void TexImage2D<T0>(TextureTarget target, int level, int internalformat, uint width, uint height, int border, PixelFormat format, PixelType type, ref T0 pixels)
            where T0 : unmanaged
        {
            ((delegate *cdecl<TextureTarget, Int32, Int32, UInt32, UInt32, Int32, PixelFormat, PixelType, T0, void>)Load("glTexImage2D", 1658))(target, level, internalformat, width, height, border, format, type, pixels);
        }

        public partial void TexParameter(TextureTarget target, TextureParameterName pname, float param)
        {
            ((delegate *cdecl<TextureTarget, TextureParameterName, Single, void>)Load("glTexParameterf", 1659))(target, pname, param);
        }

        public unsafe partial void TexParameter(TextureTarget target, TextureParameterName pname, float *@params)
        {
            ((delegate *cdecl<TextureTarget, TextureParameterName,, void>)Load("glTexParameterfv", 1660))(target, pname, params);
        }

        public partial void TexParameter(TextureTarget target, TextureParameterName pname, ref float @params)
        {
            ((delegate *cdecl<TextureTarget, TextureParameterName, Single, void>)Load("glTexParameterfv", 1661))(target, pname, params);
        }

        public partial void TexParameter(TextureTarget target, TextureParameterName pname, int param)
        {
            ((delegate *cdecl<TextureTarget, TextureParameterName, Int32, void>)Load("glTexParameteri", 1662))(target, pname, param);
        }

        public unsafe partial void TexParameter(TextureTarget target, TextureParameterName pname, int *@params)
        {
            ((delegate *cdecl<TextureTarget, TextureParameterName,, void>)Load("glTexParameteriv", 1663))(target, pname, params);
        }

        public partial void TexParameter(TextureTarget target, TextureParameterName pname, ref int @params)
        {
            ((delegate *cdecl<TextureTarget, TextureParameterName, Int32, void>)Load("glTexParameteriv", 1664))(target, pname, params);
        }
    }
}