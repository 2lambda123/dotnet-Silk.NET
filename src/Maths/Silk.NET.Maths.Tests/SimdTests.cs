// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

// this file is generated by T4-template with the same name.

#if NETCOREAPP3_1_OR_GREATER
using System;
using System.Numerics;
using Xunit;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Runtime.Intrinsics;


namespace Silk.NET.Maths.Tests
{
    internal unsafe static class SimdTestsUtils
    {
        internal static void FillWithRandomData(void* ptr, int len)
        {
            var rand = new Random(10);
            for (int i = 0; i < len; i++)
                *((byte*)ptr + i) = (byte)rand.Next(4, 12);
        }
    }

    public unsafe class SimdTests_Constants
    {
        static bool AreEqual<T>(T a, T b) where T : unmanaged
        {
            if (sizeof(T) == 1)
                return Unsafe.As<T, byte>(ref a) == Unsafe.As<T, byte>(ref b);
            if (sizeof(T) == 2)
                return Unsafe.As<T, ushort>(ref a) == Unsafe.As<T, ushort>(ref b);
            if (sizeof(T) == 4)
                return Unsafe.As<T, uint>(ref a) == Unsafe.As<T, uint>(ref b);
            if (sizeof(T) == 8)
                return Unsafe.As<T, ulong>(ref a) == Unsafe.As<T, ulong>(ref b);
            throw new($"Unexpected type {typeof(T)}");
        }
        [Fact]
        public void Simd64_Epsilon_byte()
        {
            for (int i = 0; i < Vector64<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.Epsilon, Simd64<byte>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<byte>.Epsilon}\nActual: {Simd64<byte>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Epsilon_sbyte()
        {
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.Epsilon, Simd64<sbyte>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<sbyte>.Epsilon}\nActual: {Simd64<sbyte>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Epsilon_ushort()
        {
            for (int i = 0; i < Vector64<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.Epsilon, Simd64<ushort>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<ushort>.Epsilon}\nActual: {Simd64<ushort>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Epsilon_short()
        {
            for (int i = 0; i < Vector64<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.Epsilon, Simd64<short>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<short>.Epsilon}\nActual: {Simd64<short>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Epsilon_uint()
        {
            for (int i = 0; i < Vector64<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.Epsilon, Simd64<uint>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<uint>.Epsilon}\nActual: {Simd64<uint>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Epsilon_int()
        {
            for (int i = 0; i < Vector64<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.Epsilon, Simd64<int>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<int>.Epsilon}\nActual: {Simd64<int>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Epsilon_ulong()
        {
            for (int i = 0; i < Vector64<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.Epsilon, Simd64<ulong>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<ulong>.Epsilon}\nActual: {Simd64<ulong>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Epsilon_long()
        {
            for (int i = 0; i < Vector64<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.Epsilon, Simd64<long>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<long>.Epsilon}\nActual: {Simd64<long>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Epsilon_float()
        {
            for (int i = 0; i < Vector64<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.Epsilon, Simd64<float>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<float>.Epsilon}\nActual: {Simd64<float>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Epsilon_double()
        {
            for (int i = 0; i < Vector64<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.Epsilon, Simd64<double>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<double>.Epsilon}\nActual: {Simd64<double>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MaxValue_byte()
        {
            for (int i = 0; i < Vector64<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.MaxValue, Simd64<byte>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<byte>.MaxValue}\nActual: {Simd64<byte>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MaxValue_sbyte()
        {
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.MaxValue, Simd64<sbyte>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<sbyte>.MaxValue}\nActual: {Simd64<sbyte>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MaxValue_ushort()
        {
            for (int i = 0; i < Vector64<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.MaxValue, Simd64<ushort>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<ushort>.MaxValue}\nActual: {Simd64<ushort>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MaxValue_short()
        {
            for (int i = 0; i < Vector64<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.MaxValue, Simd64<short>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<short>.MaxValue}\nActual: {Simd64<short>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MaxValue_uint()
        {
            for (int i = 0; i < Vector64<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.MaxValue, Simd64<uint>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<uint>.MaxValue}\nActual: {Simd64<uint>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MaxValue_int()
        {
            for (int i = 0; i < Vector64<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.MaxValue, Simd64<int>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<int>.MaxValue}\nActual: {Simd64<int>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MaxValue_ulong()
        {
            for (int i = 0; i < Vector64<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.MaxValue, Simd64<ulong>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<ulong>.MaxValue}\nActual: {Simd64<ulong>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MaxValue_long()
        {
            for (int i = 0; i < Vector64<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.MaxValue, Simd64<long>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<long>.MaxValue}\nActual: {Simd64<long>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MaxValue_float()
        {
            for (int i = 0; i < Vector64<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.MaxValue, Simd64<float>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<float>.MaxValue}\nActual: {Simd64<float>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MaxValue_double()
        {
            for (int i = 0; i < Vector64<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.MaxValue, Simd64<double>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<double>.MaxValue}\nActual: {Simd64<double>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinValue_byte()
        {
            for (int i = 0; i < Vector64<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.MinValue, Simd64<byte>.MinValue.GetElement(i)), $"\nExpected: {Scalar<byte>.MinValue}\nActual: {Simd64<byte>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinValue_sbyte()
        {
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.MinValue, Simd64<sbyte>.MinValue.GetElement(i)), $"\nExpected: {Scalar<sbyte>.MinValue}\nActual: {Simd64<sbyte>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinValue_ushort()
        {
            for (int i = 0; i < Vector64<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.MinValue, Simd64<ushort>.MinValue.GetElement(i)), $"\nExpected: {Scalar<ushort>.MinValue}\nActual: {Simd64<ushort>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinValue_short()
        {
            for (int i = 0; i < Vector64<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.MinValue, Simd64<short>.MinValue.GetElement(i)), $"\nExpected: {Scalar<short>.MinValue}\nActual: {Simd64<short>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinValue_uint()
        {
            for (int i = 0; i < Vector64<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.MinValue, Simd64<uint>.MinValue.GetElement(i)), $"\nExpected: {Scalar<uint>.MinValue}\nActual: {Simd64<uint>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinValue_int()
        {
            for (int i = 0; i < Vector64<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.MinValue, Simd64<int>.MinValue.GetElement(i)), $"\nExpected: {Scalar<int>.MinValue}\nActual: {Simd64<int>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinValue_ulong()
        {
            for (int i = 0; i < Vector64<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.MinValue, Simd64<ulong>.MinValue.GetElement(i)), $"\nExpected: {Scalar<ulong>.MinValue}\nActual: {Simd64<ulong>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinValue_long()
        {
            for (int i = 0; i < Vector64<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.MinValue, Simd64<long>.MinValue.GetElement(i)), $"\nExpected: {Scalar<long>.MinValue}\nActual: {Simd64<long>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinValue_float()
        {
            for (int i = 0; i < Vector64<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.MinValue, Simd64<float>.MinValue.GetElement(i)), $"\nExpected: {Scalar<float>.MinValue}\nActual: {Simd64<float>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinValue_double()
        {
            for (int i = 0; i < Vector64<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.MinValue, Simd64<double>.MinValue.GetElement(i)), $"\nExpected: {Scalar<double>.MinValue}\nActual: {Simd64<double>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd64_NaN_byte()
        {
            for (int i = 0; i < Vector64<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.NaN, Simd64<byte>.NaN.GetElement(i)), $"\nExpected: {Scalar<byte>.NaN}\nActual: {Simd64<byte>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd64_NaN_sbyte()
        {
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.NaN, Simd64<sbyte>.NaN.GetElement(i)), $"\nExpected: {Scalar<sbyte>.NaN}\nActual: {Simd64<sbyte>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd64_NaN_ushort()
        {
            for (int i = 0; i < Vector64<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.NaN, Simd64<ushort>.NaN.GetElement(i)), $"\nExpected: {Scalar<ushort>.NaN}\nActual: {Simd64<ushort>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd64_NaN_short()
        {
            for (int i = 0; i < Vector64<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.NaN, Simd64<short>.NaN.GetElement(i)), $"\nExpected: {Scalar<short>.NaN}\nActual: {Simd64<short>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd64_NaN_uint()
        {
            for (int i = 0; i < Vector64<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.NaN, Simd64<uint>.NaN.GetElement(i)), $"\nExpected: {Scalar<uint>.NaN}\nActual: {Simd64<uint>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd64_NaN_int()
        {
            for (int i = 0; i < Vector64<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.NaN, Simd64<int>.NaN.GetElement(i)), $"\nExpected: {Scalar<int>.NaN}\nActual: {Simd64<int>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd64_NaN_ulong()
        {
            for (int i = 0; i < Vector64<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.NaN, Simd64<ulong>.NaN.GetElement(i)), $"\nExpected: {Scalar<ulong>.NaN}\nActual: {Simd64<ulong>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd64_NaN_long()
        {
            for (int i = 0; i < Vector64<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.NaN, Simd64<long>.NaN.GetElement(i)), $"\nExpected: {Scalar<long>.NaN}\nActual: {Simd64<long>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd64_NaN_float()
        {
            for (int i = 0; i < Vector64<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.NaN, Simd64<float>.NaN.GetElement(i)), $"\nExpected: {Scalar<float>.NaN}\nActual: {Simd64<float>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd64_NaN_double()
        {
            for (int i = 0; i < Vector64<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.NaN, Simd64<double>.NaN.GetElement(i)), $"\nExpected: {Scalar<double>.NaN}\nActual: {Simd64<double>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd64_NegativeInfinity_byte()
        {
            for (int i = 0; i < Vector64<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.NegativeInfinity, Simd64<byte>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<byte>.NegativeInfinity}\nActual: {Simd64<byte>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd64_NegativeInfinity_sbyte()
        {
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.NegativeInfinity, Simd64<sbyte>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<sbyte>.NegativeInfinity}\nActual: {Simd64<sbyte>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd64_NegativeInfinity_ushort()
        {
            for (int i = 0; i < Vector64<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.NegativeInfinity, Simd64<ushort>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<ushort>.NegativeInfinity}\nActual: {Simd64<ushort>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd64_NegativeInfinity_short()
        {
            for (int i = 0; i < Vector64<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.NegativeInfinity, Simd64<short>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<short>.NegativeInfinity}\nActual: {Simd64<short>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd64_NegativeInfinity_uint()
        {
            for (int i = 0; i < Vector64<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.NegativeInfinity, Simd64<uint>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<uint>.NegativeInfinity}\nActual: {Simd64<uint>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd64_NegativeInfinity_int()
        {
            for (int i = 0; i < Vector64<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.NegativeInfinity, Simd64<int>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<int>.NegativeInfinity}\nActual: {Simd64<int>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd64_NegativeInfinity_ulong()
        {
            for (int i = 0; i < Vector64<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.NegativeInfinity, Simd64<ulong>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<ulong>.NegativeInfinity}\nActual: {Simd64<ulong>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd64_NegativeInfinity_long()
        {
            for (int i = 0; i < Vector64<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.NegativeInfinity, Simd64<long>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<long>.NegativeInfinity}\nActual: {Simd64<long>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd64_NegativeInfinity_float()
        {
            for (int i = 0; i < Vector64<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.NegativeInfinity, Simd64<float>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<float>.NegativeInfinity}\nActual: {Simd64<float>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd64_NegativeInfinity_double()
        {
            for (int i = 0; i < Vector64<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.NegativeInfinity, Simd64<double>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<double>.NegativeInfinity}\nActual: {Simd64<double>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd64_PositiveInfinity_byte()
        {
            for (int i = 0; i < Vector64<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.PositiveInfinity, Simd64<byte>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<byte>.PositiveInfinity}\nActual: {Simd64<byte>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd64_PositiveInfinity_sbyte()
        {
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.PositiveInfinity, Simd64<sbyte>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<sbyte>.PositiveInfinity}\nActual: {Simd64<sbyte>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd64_PositiveInfinity_ushort()
        {
            for (int i = 0; i < Vector64<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.PositiveInfinity, Simd64<ushort>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<ushort>.PositiveInfinity}\nActual: {Simd64<ushort>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd64_PositiveInfinity_short()
        {
            for (int i = 0; i < Vector64<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.PositiveInfinity, Simd64<short>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<short>.PositiveInfinity}\nActual: {Simd64<short>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd64_PositiveInfinity_uint()
        {
            for (int i = 0; i < Vector64<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.PositiveInfinity, Simd64<uint>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<uint>.PositiveInfinity}\nActual: {Simd64<uint>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd64_PositiveInfinity_int()
        {
            for (int i = 0; i < Vector64<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.PositiveInfinity, Simd64<int>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<int>.PositiveInfinity}\nActual: {Simd64<int>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd64_PositiveInfinity_ulong()
        {
            for (int i = 0; i < Vector64<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.PositiveInfinity, Simd64<ulong>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<ulong>.PositiveInfinity}\nActual: {Simd64<ulong>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd64_PositiveInfinity_long()
        {
            for (int i = 0; i < Vector64<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.PositiveInfinity, Simd64<long>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<long>.PositiveInfinity}\nActual: {Simd64<long>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd64_PositiveInfinity_float()
        {
            for (int i = 0; i < Vector64<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.PositiveInfinity, Simd64<float>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<float>.PositiveInfinity}\nActual: {Simd64<float>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd64_PositiveInfinity_double()
        {
            for (int i = 0; i < Vector64<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.PositiveInfinity, Simd64<double>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<double>.PositiveInfinity}\nActual: {Simd64<double>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd64_One_byte()
        {
            for (int i = 0; i < Vector64<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.One, Simd64<byte>.One.GetElement(i)), $"\nExpected: {Scalar<byte>.One}\nActual: {Simd64<byte>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd64_One_sbyte()
        {
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.One, Simd64<sbyte>.One.GetElement(i)), $"\nExpected: {Scalar<sbyte>.One}\nActual: {Simd64<sbyte>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd64_One_ushort()
        {
            for (int i = 0; i < Vector64<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.One, Simd64<ushort>.One.GetElement(i)), $"\nExpected: {Scalar<ushort>.One}\nActual: {Simd64<ushort>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd64_One_short()
        {
            for (int i = 0; i < Vector64<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.One, Simd64<short>.One.GetElement(i)), $"\nExpected: {Scalar<short>.One}\nActual: {Simd64<short>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd64_One_uint()
        {
            for (int i = 0; i < Vector64<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.One, Simd64<uint>.One.GetElement(i)), $"\nExpected: {Scalar<uint>.One}\nActual: {Simd64<uint>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd64_One_int()
        {
            for (int i = 0; i < Vector64<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.One, Simd64<int>.One.GetElement(i)), $"\nExpected: {Scalar<int>.One}\nActual: {Simd64<int>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd64_One_ulong()
        {
            for (int i = 0; i < Vector64<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.One, Simd64<ulong>.One.GetElement(i)), $"\nExpected: {Scalar<ulong>.One}\nActual: {Simd64<ulong>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd64_One_long()
        {
            for (int i = 0; i < Vector64<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.One, Simd64<long>.One.GetElement(i)), $"\nExpected: {Scalar<long>.One}\nActual: {Simd64<long>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd64_One_float()
        {
            for (int i = 0; i < Vector64<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.One, Simd64<float>.One.GetElement(i)), $"\nExpected: {Scalar<float>.One}\nActual: {Simd64<float>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd64_One_double()
        {
            for (int i = 0; i < Vector64<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.One, Simd64<double>.One.GetElement(i)), $"\nExpected: {Scalar<double>.One}\nActual: {Simd64<double>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Two_byte()
        {
            for (int i = 0; i < Vector64<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.Two, Simd64<byte>.Two.GetElement(i)), $"\nExpected: {Scalar<byte>.Two}\nActual: {Simd64<byte>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Two_sbyte()
        {
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.Two, Simd64<sbyte>.Two.GetElement(i)), $"\nExpected: {Scalar<sbyte>.Two}\nActual: {Simd64<sbyte>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Two_ushort()
        {
            for (int i = 0; i < Vector64<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.Two, Simd64<ushort>.Two.GetElement(i)), $"\nExpected: {Scalar<ushort>.Two}\nActual: {Simd64<ushort>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Two_short()
        {
            for (int i = 0; i < Vector64<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.Two, Simd64<short>.Two.GetElement(i)), $"\nExpected: {Scalar<short>.Two}\nActual: {Simd64<short>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Two_uint()
        {
            for (int i = 0; i < Vector64<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.Two, Simd64<uint>.Two.GetElement(i)), $"\nExpected: {Scalar<uint>.Two}\nActual: {Simd64<uint>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Two_int()
        {
            for (int i = 0; i < Vector64<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.Two, Simd64<int>.Two.GetElement(i)), $"\nExpected: {Scalar<int>.Two}\nActual: {Simd64<int>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Two_ulong()
        {
            for (int i = 0; i < Vector64<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.Two, Simd64<ulong>.Two.GetElement(i)), $"\nExpected: {Scalar<ulong>.Two}\nActual: {Simd64<ulong>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Two_long()
        {
            for (int i = 0; i < Vector64<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.Two, Simd64<long>.Two.GetElement(i)), $"\nExpected: {Scalar<long>.Two}\nActual: {Simd64<long>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Two_float()
        {
            for (int i = 0; i < Vector64<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.Two, Simd64<float>.Two.GetElement(i)), $"\nExpected: {Scalar<float>.Two}\nActual: {Simd64<float>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Two_double()
        {
            for (int i = 0; i < Vector64<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.Two, Simd64<double>.Two.GetElement(i)), $"\nExpected: {Scalar<double>.Two}\nActual: {Simd64<double>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinusOne_byte()
        {
            for (int i = 0; i < Vector64<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.MinusOne, Simd64<byte>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<byte>.MinusOne}\nActual: {Simd64<byte>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinusOne_sbyte()
        {
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.MinusOne, Simd64<sbyte>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<sbyte>.MinusOne}\nActual: {Simd64<sbyte>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinusOne_ushort()
        {
            for (int i = 0; i < Vector64<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.MinusOne, Simd64<ushort>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<ushort>.MinusOne}\nActual: {Simd64<ushort>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinusOne_short()
        {
            for (int i = 0; i < Vector64<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.MinusOne, Simd64<short>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<short>.MinusOne}\nActual: {Simd64<short>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinusOne_uint()
        {
            for (int i = 0; i < Vector64<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.MinusOne, Simd64<uint>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<uint>.MinusOne}\nActual: {Simd64<uint>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinusOne_int()
        {
            for (int i = 0; i < Vector64<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.MinusOne, Simd64<int>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<int>.MinusOne}\nActual: {Simd64<int>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinusOne_ulong()
        {
            for (int i = 0; i < Vector64<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.MinusOne, Simd64<ulong>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<ulong>.MinusOne}\nActual: {Simd64<ulong>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinusOne_long()
        {
            for (int i = 0; i < Vector64<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.MinusOne, Simd64<long>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<long>.MinusOne}\nActual: {Simd64<long>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinusOne_float()
        {
            for (int i = 0; i < Vector64<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.MinusOne, Simd64<float>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<float>.MinusOne}\nActual: {Simd64<float>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinusOne_double()
        {
            for (int i = 0; i < Vector64<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.MinusOne, Simd64<double>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<double>.MinusOne}\nActual: {Simd64<double>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinusTwo_byte()
        {
            for (int i = 0; i < Vector64<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.MinusTwo, Simd64<byte>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<byte>.MinusTwo}\nActual: {Simd64<byte>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinusTwo_sbyte()
        {
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.MinusTwo, Simd64<sbyte>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<sbyte>.MinusTwo}\nActual: {Simd64<sbyte>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinusTwo_ushort()
        {
            for (int i = 0; i < Vector64<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.MinusTwo, Simd64<ushort>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<ushort>.MinusTwo}\nActual: {Simd64<ushort>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinusTwo_short()
        {
            for (int i = 0; i < Vector64<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.MinusTwo, Simd64<short>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<short>.MinusTwo}\nActual: {Simd64<short>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinusTwo_uint()
        {
            for (int i = 0; i < Vector64<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.MinusTwo, Simd64<uint>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<uint>.MinusTwo}\nActual: {Simd64<uint>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinusTwo_int()
        {
            for (int i = 0; i < Vector64<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.MinusTwo, Simd64<int>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<int>.MinusTwo}\nActual: {Simd64<int>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinusTwo_ulong()
        {
            for (int i = 0; i < Vector64<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.MinusTwo, Simd64<ulong>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<ulong>.MinusTwo}\nActual: {Simd64<ulong>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinusTwo_long()
        {
            for (int i = 0; i < Vector64<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.MinusTwo, Simd64<long>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<long>.MinusTwo}\nActual: {Simd64<long>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinusTwo_float()
        {
            for (int i = 0; i < Vector64<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.MinusTwo, Simd64<float>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<float>.MinusTwo}\nActual: {Simd64<float>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MinusTwo_double()
        {
            for (int i = 0; i < Vector64<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.MinusTwo, Simd64<double>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<double>.MinusTwo}\nActual: {Simd64<double>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd64_E_byte()
        {
            for (int i = 0; i < Vector64<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.E, Simd64<byte>.E.GetElement(i)), $"\nExpected: {Scalar<byte>.E}\nActual: {Simd64<byte>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd64_E_sbyte()
        {
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.E, Simd64<sbyte>.E.GetElement(i)), $"\nExpected: {Scalar<sbyte>.E}\nActual: {Simd64<sbyte>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd64_E_ushort()
        {
            for (int i = 0; i < Vector64<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.E, Simd64<ushort>.E.GetElement(i)), $"\nExpected: {Scalar<ushort>.E}\nActual: {Simd64<ushort>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd64_E_short()
        {
            for (int i = 0; i < Vector64<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.E, Simd64<short>.E.GetElement(i)), $"\nExpected: {Scalar<short>.E}\nActual: {Simd64<short>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd64_E_uint()
        {
            for (int i = 0; i < Vector64<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.E, Simd64<uint>.E.GetElement(i)), $"\nExpected: {Scalar<uint>.E}\nActual: {Simd64<uint>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd64_E_int()
        {
            for (int i = 0; i < Vector64<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.E, Simd64<int>.E.GetElement(i)), $"\nExpected: {Scalar<int>.E}\nActual: {Simd64<int>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd64_E_ulong()
        {
            for (int i = 0; i < Vector64<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.E, Simd64<ulong>.E.GetElement(i)), $"\nExpected: {Scalar<ulong>.E}\nActual: {Simd64<ulong>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd64_E_long()
        {
            for (int i = 0; i < Vector64<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.E, Simd64<long>.E.GetElement(i)), $"\nExpected: {Scalar<long>.E}\nActual: {Simd64<long>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd64_E_float()
        {
            for (int i = 0; i < Vector64<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.E, Simd64<float>.E.GetElement(i)), $"\nExpected: {Scalar<float>.E}\nActual: {Simd64<float>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd64_E_double()
        {
            for (int i = 0; i < Vector64<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.E, Simd64<double>.E.GetElement(i)), $"\nExpected: {Scalar<double>.E}\nActual: {Simd64<double>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Pi_byte()
        {
            for (int i = 0; i < Vector64<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.Pi, Simd64<byte>.Pi.GetElement(i)), $"\nExpected: {Scalar<byte>.Pi}\nActual: {Simd64<byte>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Pi_sbyte()
        {
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.Pi, Simd64<sbyte>.Pi.GetElement(i)), $"\nExpected: {Scalar<sbyte>.Pi}\nActual: {Simd64<sbyte>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Pi_ushort()
        {
            for (int i = 0; i < Vector64<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.Pi, Simd64<ushort>.Pi.GetElement(i)), $"\nExpected: {Scalar<ushort>.Pi}\nActual: {Simd64<ushort>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Pi_short()
        {
            for (int i = 0; i < Vector64<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.Pi, Simd64<short>.Pi.GetElement(i)), $"\nExpected: {Scalar<short>.Pi}\nActual: {Simd64<short>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Pi_uint()
        {
            for (int i = 0; i < Vector64<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.Pi, Simd64<uint>.Pi.GetElement(i)), $"\nExpected: {Scalar<uint>.Pi}\nActual: {Simd64<uint>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Pi_int()
        {
            for (int i = 0; i < Vector64<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.Pi, Simd64<int>.Pi.GetElement(i)), $"\nExpected: {Scalar<int>.Pi}\nActual: {Simd64<int>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Pi_ulong()
        {
            for (int i = 0; i < Vector64<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.Pi, Simd64<ulong>.Pi.GetElement(i)), $"\nExpected: {Scalar<ulong>.Pi}\nActual: {Simd64<ulong>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Pi_long()
        {
            for (int i = 0; i < Vector64<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.Pi, Simd64<long>.Pi.GetElement(i)), $"\nExpected: {Scalar<long>.Pi}\nActual: {Simd64<long>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Pi_float()
        {
            for (int i = 0; i < Vector64<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.Pi, Simd64<float>.Pi.GetElement(i)), $"\nExpected: {Scalar<float>.Pi}\nActual: {Simd64<float>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Pi_double()
        {
            for (int i = 0; i < Vector64<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.Pi, Simd64<double>.Pi.GetElement(i)), $"\nExpected: {Scalar<double>.Pi}\nActual: {Simd64<double>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd64_PiOver2_byte()
        {
            for (int i = 0; i < Vector64<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.PiOver2, Simd64<byte>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<byte>.PiOver2}\nActual: {Simd64<byte>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd64_PiOver2_sbyte()
        {
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.PiOver2, Simd64<sbyte>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<sbyte>.PiOver2}\nActual: {Simd64<sbyte>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd64_PiOver2_ushort()
        {
            for (int i = 0; i < Vector64<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.PiOver2, Simd64<ushort>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<ushort>.PiOver2}\nActual: {Simd64<ushort>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd64_PiOver2_short()
        {
            for (int i = 0; i < Vector64<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.PiOver2, Simd64<short>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<short>.PiOver2}\nActual: {Simd64<short>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd64_PiOver2_uint()
        {
            for (int i = 0; i < Vector64<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.PiOver2, Simd64<uint>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<uint>.PiOver2}\nActual: {Simd64<uint>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd64_PiOver2_int()
        {
            for (int i = 0; i < Vector64<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.PiOver2, Simd64<int>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<int>.PiOver2}\nActual: {Simd64<int>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd64_PiOver2_ulong()
        {
            for (int i = 0; i < Vector64<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.PiOver2, Simd64<ulong>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<ulong>.PiOver2}\nActual: {Simd64<ulong>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd64_PiOver2_long()
        {
            for (int i = 0; i < Vector64<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.PiOver2, Simd64<long>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<long>.PiOver2}\nActual: {Simd64<long>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd64_PiOver2_float()
        {
            for (int i = 0; i < Vector64<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.PiOver2, Simd64<float>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<float>.PiOver2}\nActual: {Simd64<float>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd64_PiOver2_double()
        {
            for (int i = 0; i < Vector64<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.PiOver2, Simd64<double>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<double>.PiOver2}\nActual: {Simd64<double>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Tau_byte()
        {
            for (int i = 0; i < Vector64<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.Tau, Simd64<byte>.Tau.GetElement(i)), $"\nExpected: {Scalar<byte>.Tau}\nActual: {Simd64<byte>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Tau_sbyte()
        {
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.Tau, Simd64<sbyte>.Tau.GetElement(i)), $"\nExpected: {Scalar<sbyte>.Tau}\nActual: {Simd64<sbyte>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Tau_ushort()
        {
            for (int i = 0; i < Vector64<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.Tau, Simd64<ushort>.Tau.GetElement(i)), $"\nExpected: {Scalar<ushort>.Tau}\nActual: {Simd64<ushort>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Tau_short()
        {
            for (int i = 0; i < Vector64<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.Tau, Simd64<short>.Tau.GetElement(i)), $"\nExpected: {Scalar<short>.Tau}\nActual: {Simd64<short>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Tau_uint()
        {
            for (int i = 0; i < Vector64<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.Tau, Simd64<uint>.Tau.GetElement(i)), $"\nExpected: {Scalar<uint>.Tau}\nActual: {Simd64<uint>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Tau_int()
        {
            for (int i = 0; i < Vector64<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.Tau, Simd64<int>.Tau.GetElement(i)), $"\nExpected: {Scalar<int>.Tau}\nActual: {Simd64<int>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Tau_ulong()
        {
            for (int i = 0; i < Vector64<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.Tau, Simd64<ulong>.Tau.GetElement(i)), $"\nExpected: {Scalar<ulong>.Tau}\nActual: {Simd64<ulong>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Tau_long()
        {
            for (int i = 0; i < Vector64<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.Tau, Simd64<long>.Tau.GetElement(i)), $"\nExpected: {Scalar<long>.Tau}\nActual: {Simd64<long>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Tau_float()
        {
            for (int i = 0; i < Vector64<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.Tau, Simd64<float>.Tau.GetElement(i)), $"\nExpected: {Scalar<float>.Tau}\nActual: {Simd64<float>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd64_Tau_double()
        {
            for (int i = 0; i < Vector64<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.Tau, Simd64<double>.Tau.GetElement(i)), $"\nExpected: {Scalar<double>.Tau}\nActual: {Simd64<double>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MaxValueOver2_byte()
        {
            for (int i = 0; i < Vector64<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.MaxValueOver2, Simd64<byte>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<byte>.MaxValueOver2}\nActual: {Simd64<byte>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MaxValueOver2_sbyte()
        {
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.MaxValueOver2, Simd64<sbyte>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<sbyte>.MaxValueOver2}\nActual: {Simd64<sbyte>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MaxValueOver2_ushort()
        {
            for (int i = 0; i < Vector64<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.MaxValueOver2, Simd64<ushort>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<ushort>.MaxValueOver2}\nActual: {Simd64<ushort>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MaxValueOver2_short()
        {
            for (int i = 0; i < Vector64<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.MaxValueOver2, Simd64<short>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<short>.MaxValueOver2}\nActual: {Simd64<short>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MaxValueOver2_uint()
        {
            for (int i = 0; i < Vector64<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.MaxValueOver2, Simd64<uint>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<uint>.MaxValueOver2}\nActual: {Simd64<uint>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MaxValueOver2_int()
        {
            for (int i = 0; i < Vector64<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.MaxValueOver2, Simd64<int>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<int>.MaxValueOver2}\nActual: {Simd64<int>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MaxValueOver2_ulong()
        {
            for (int i = 0; i < Vector64<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.MaxValueOver2, Simd64<ulong>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<ulong>.MaxValueOver2}\nActual: {Simd64<ulong>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MaxValueOver2_long()
        {
            for (int i = 0; i < Vector64<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.MaxValueOver2, Simd64<long>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<long>.MaxValueOver2}\nActual: {Simd64<long>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MaxValueOver2_float()
        {
            for (int i = 0; i < Vector64<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.MaxValueOver2, Simd64<float>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<float>.MaxValueOver2}\nActual: {Simd64<float>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd64_MaxValueOver2_double()
        {
            for (int i = 0; i < Vector64<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.MaxValueOver2, Simd64<double>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<double>.MaxValueOver2}\nActual: {Simd64<double>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd64_AllBitsSet_byte()
        {
            for (int i = 0; i < Vector64<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.AllBitsSet, Simd64<byte>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<byte>.AllBitsSet}\nActual: {Simd64<byte>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd64_AllBitsSet_sbyte()
        {
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.AllBitsSet, Simd64<sbyte>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<sbyte>.AllBitsSet}\nActual: {Simd64<sbyte>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd64_AllBitsSet_ushort()
        {
            for (int i = 0; i < Vector64<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.AllBitsSet, Simd64<ushort>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<ushort>.AllBitsSet}\nActual: {Simd64<ushort>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd64_AllBitsSet_short()
        {
            for (int i = 0; i < Vector64<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.AllBitsSet, Simd64<short>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<short>.AllBitsSet}\nActual: {Simd64<short>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd64_AllBitsSet_uint()
        {
            for (int i = 0; i < Vector64<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.AllBitsSet, Simd64<uint>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<uint>.AllBitsSet}\nActual: {Simd64<uint>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd64_AllBitsSet_int()
        {
            for (int i = 0; i < Vector64<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.AllBitsSet, Simd64<int>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<int>.AllBitsSet}\nActual: {Simd64<int>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd64_AllBitsSet_ulong()
        {
            for (int i = 0; i < Vector64<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.AllBitsSet, Simd64<ulong>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<ulong>.AllBitsSet}\nActual: {Simd64<ulong>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd64_AllBitsSet_long()
        {
            for (int i = 0; i < Vector64<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.AllBitsSet, Simd64<long>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<long>.AllBitsSet}\nActual: {Simd64<long>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd64_AllBitsSet_float()
        {
            for (int i = 0; i < Vector64<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.AllBitsSet, Simd64<float>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<float>.AllBitsSet}\nActual: {Simd64<float>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd64_AllBitsSet_double()
        {
            for (int i = 0; i < Vector64<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.AllBitsSet, Simd64<double>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<double>.AllBitsSet}\nActual: {Simd64<double>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Epsilon_byte()
        {
            for (int i = 0; i < Vector128<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.Epsilon, Simd128<byte>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<byte>.Epsilon}\nActual: {Simd128<byte>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Epsilon_sbyte()
        {
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.Epsilon, Simd128<sbyte>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<sbyte>.Epsilon}\nActual: {Simd128<sbyte>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Epsilon_ushort()
        {
            for (int i = 0; i < Vector128<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.Epsilon, Simd128<ushort>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<ushort>.Epsilon}\nActual: {Simd128<ushort>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Epsilon_short()
        {
            for (int i = 0; i < Vector128<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.Epsilon, Simd128<short>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<short>.Epsilon}\nActual: {Simd128<short>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Epsilon_uint()
        {
            for (int i = 0; i < Vector128<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.Epsilon, Simd128<uint>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<uint>.Epsilon}\nActual: {Simd128<uint>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Epsilon_int()
        {
            for (int i = 0; i < Vector128<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.Epsilon, Simd128<int>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<int>.Epsilon}\nActual: {Simd128<int>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Epsilon_ulong()
        {
            for (int i = 0; i < Vector128<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.Epsilon, Simd128<ulong>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<ulong>.Epsilon}\nActual: {Simd128<ulong>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Epsilon_long()
        {
            for (int i = 0; i < Vector128<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.Epsilon, Simd128<long>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<long>.Epsilon}\nActual: {Simd128<long>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Epsilon_float()
        {
            for (int i = 0; i < Vector128<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.Epsilon, Simd128<float>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<float>.Epsilon}\nActual: {Simd128<float>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Epsilon_double()
        {
            for (int i = 0; i < Vector128<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.Epsilon, Simd128<double>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<double>.Epsilon}\nActual: {Simd128<double>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MaxValue_byte()
        {
            for (int i = 0; i < Vector128<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.MaxValue, Simd128<byte>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<byte>.MaxValue}\nActual: {Simd128<byte>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MaxValue_sbyte()
        {
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.MaxValue, Simd128<sbyte>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<sbyte>.MaxValue}\nActual: {Simd128<sbyte>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MaxValue_ushort()
        {
            for (int i = 0; i < Vector128<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.MaxValue, Simd128<ushort>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<ushort>.MaxValue}\nActual: {Simd128<ushort>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MaxValue_short()
        {
            for (int i = 0; i < Vector128<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.MaxValue, Simd128<short>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<short>.MaxValue}\nActual: {Simd128<short>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MaxValue_uint()
        {
            for (int i = 0; i < Vector128<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.MaxValue, Simd128<uint>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<uint>.MaxValue}\nActual: {Simd128<uint>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MaxValue_int()
        {
            for (int i = 0; i < Vector128<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.MaxValue, Simd128<int>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<int>.MaxValue}\nActual: {Simd128<int>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MaxValue_ulong()
        {
            for (int i = 0; i < Vector128<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.MaxValue, Simd128<ulong>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<ulong>.MaxValue}\nActual: {Simd128<ulong>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MaxValue_long()
        {
            for (int i = 0; i < Vector128<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.MaxValue, Simd128<long>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<long>.MaxValue}\nActual: {Simd128<long>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MaxValue_float()
        {
            for (int i = 0; i < Vector128<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.MaxValue, Simd128<float>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<float>.MaxValue}\nActual: {Simd128<float>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MaxValue_double()
        {
            for (int i = 0; i < Vector128<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.MaxValue, Simd128<double>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<double>.MaxValue}\nActual: {Simd128<double>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinValue_byte()
        {
            for (int i = 0; i < Vector128<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.MinValue, Simd128<byte>.MinValue.GetElement(i)), $"\nExpected: {Scalar<byte>.MinValue}\nActual: {Simd128<byte>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinValue_sbyte()
        {
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.MinValue, Simd128<sbyte>.MinValue.GetElement(i)), $"\nExpected: {Scalar<sbyte>.MinValue}\nActual: {Simd128<sbyte>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinValue_ushort()
        {
            for (int i = 0; i < Vector128<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.MinValue, Simd128<ushort>.MinValue.GetElement(i)), $"\nExpected: {Scalar<ushort>.MinValue}\nActual: {Simd128<ushort>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinValue_short()
        {
            for (int i = 0; i < Vector128<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.MinValue, Simd128<short>.MinValue.GetElement(i)), $"\nExpected: {Scalar<short>.MinValue}\nActual: {Simd128<short>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinValue_uint()
        {
            for (int i = 0; i < Vector128<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.MinValue, Simd128<uint>.MinValue.GetElement(i)), $"\nExpected: {Scalar<uint>.MinValue}\nActual: {Simd128<uint>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinValue_int()
        {
            for (int i = 0; i < Vector128<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.MinValue, Simd128<int>.MinValue.GetElement(i)), $"\nExpected: {Scalar<int>.MinValue}\nActual: {Simd128<int>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinValue_ulong()
        {
            for (int i = 0; i < Vector128<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.MinValue, Simd128<ulong>.MinValue.GetElement(i)), $"\nExpected: {Scalar<ulong>.MinValue}\nActual: {Simd128<ulong>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinValue_long()
        {
            for (int i = 0; i < Vector128<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.MinValue, Simd128<long>.MinValue.GetElement(i)), $"\nExpected: {Scalar<long>.MinValue}\nActual: {Simd128<long>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinValue_float()
        {
            for (int i = 0; i < Vector128<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.MinValue, Simd128<float>.MinValue.GetElement(i)), $"\nExpected: {Scalar<float>.MinValue}\nActual: {Simd128<float>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinValue_double()
        {
            for (int i = 0; i < Vector128<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.MinValue, Simd128<double>.MinValue.GetElement(i)), $"\nExpected: {Scalar<double>.MinValue}\nActual: {Simd128<double>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd128_NaN_byte()
        {
            for (int i = 0; i < Vector128<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.NaN, Simd128<byte>.NaN.GetElement(i)), $"\nExpected: {Scalar<byte>.NaN}\nActual: {Simd128<byte>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd128_NaN_sbyte()
        {
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.NaN, Simd128<sbyte>.NaN.GetElement(i)), $"\nExpected: {Scalar<sbyte>.NaN}\nActual: {Simd128<sbyte>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd128_NaN_ushort()
        {
            for (int i = 0; i < Vector128<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.NaN, Simd128<ushort>.NaN.GetElement(i)), $"\nExpected: {Scalar<ushort>.NaN}\nActual: {Simd128<ushort>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd128_NaN_short()
        {
            for (int i = 0; i < Vector128<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.NaN, Simd128<short>.NaN.GetElement(i)), $"\nExpected: {Scalar<short>.NaN}\nActual: {Simd128<short>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd128_NaN_uint()
        {
            for (int i = 0; i < Vector128<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.NaN, Simd128<uint>.NaN.GetElement(i)), $"\nExpected: {Scalar<uint>.NaN}\nActual: {Simd128<uint>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd128_NaN_int()
        {
            for (int i = 0; i < Vector128<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.NaN, Simd128<int>.NaN.GetElement(i)), $"\nExpected: {Scalar<int>.NaN}\nActual: {Simd128<int>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd128_NaN_ulong()
        {
            for (int i = 0; i < Vector128<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.NaN, Simd128<ulong>.NaN.GetElement(i)), $"\nExpected: {Scalar<ulong>.NaN}\nActual: {Simd128<ulong>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd128_NaN_long()
        {
            for (int i = 0; i < Vector128<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.NaN, Simd128<long>.NaN.GetElement(i)), $"\nExpected: {Scalar<long>.NaN}\nActual: {Simd128<long>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd128_NaN_float()
        {
            for (int i = 0; i < Vector128<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.NaN, Simd128<float>.NaN.GetElement(i)), $"\nExpected: {Scalar<float>.NaN}\nActual: {Simd128<float>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd128_NaN_double()
        {
            for (int i = 0; i < Vector128<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.NaN, Simd128<double>.NaN.GetElement(i)), $"\nExpected: {Scalar<double>.NaN}\nActual: {Simd128<double>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd128_NegativeInfinity_byte()
        {
            for (int i = 0; i < Vector128<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.NegativeInfinity, Simd128<byte>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<byte>.NegativeInfinity}\nActual: {Simd128<byte>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd128_NegativeInfinity_sbyte()
        {
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.NegativeInfinity, Simd128<sbyte>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<sbyte>.NegativeInfinity}\nActual: {Simd128<sbyte>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd128_NegativeInfinity_ushort()
        {
            for (int i = 0; i < Vector128<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.NegativeInfinity, Simd128<ushort>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<ushort>.NegativeInfinity}\nActual: {Simd128<ushort>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd128_NegativeInfinity_short()
        {
            for (int i = 0; i < Vector128<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.NegativeInfinity, Simd128<short>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<short>.NegativeInfinity}\nActual: {Simd128<short>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd128_NegativeInfinity_uint()
        {
            for (int i = 0; i < Vector128<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.NegativeInfinity, Simd128<uint>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<uint>.NegativeInfinity}\nActual: {Simd128<uint>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd128_NegativeInfinity_int()
        {
            for (int i = 0; i < Vector128<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.NegativeInfinity, Simd128<int>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<int>.NegativeInfinity}\nActual: {Simd128<int>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd128_NegativeInfinity_ulong()
        {
            for (int i = 0; i < Vector128<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.NegativeInfinity, Simd128<ulong>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<ulong>.NegativeInfinity}\nActual: {Simd128<ulong>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd128_NegativeInfinity_long()
        {
            for (int i = 0; i < Vector128<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.NegativeInfinity, Simd128<long>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<long>.NegativeInfinity}\nActual: {Simd128<long>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd128_NegativeInfinity_float()
        {
            for (int i = 0; i < Vector128<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.NegativeInfinity, Simd128<float>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<float>.NegativeInfinity}\nActual: {Simd128<float>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd128_NegativeInfinity_double()
        {
            for (int i = 0; i < Vector128<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.NegativeInfinity, Simd128<double>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<double>.NegativeInfinity}\nActual: {Simd128<double>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd128_PositiveInfinity_byte()
        {
            for (int i = 0; i < Vector128<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.PositiveInfinity, Simd128<byte>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<byte>.PositiveInfinity}\nActual: {Simd128<byte>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd128_PositiveInfinity_sbyte()
        {
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.PositiveInfinity, Simd128<sbyte>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<sbyte>.PositiveInfinity}\nActual: {Simd128<sbyte>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd128_PositiveInfinity_ushort()
        {
            for (int i = 0; i < Vector128<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.PositiveInfinity, Simd128<ushort>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<ushort>.PositiveInfinity}\nActual: {Simd128<ushort>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd128_PositiveInfinity_short()
        {
            for (int i = 0; i < Vector128<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.PositiveInfinity, Simd128<short>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<short>.PositiveInfinity}\nActual: {Simd128<short>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd128_PositiveInfinity_uint()
        {
            for (int i = 0; i < Vector128<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.PositiveInfinity, Simd128<uint>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<uint>.PositiveInfinity}\nActual: {Simd128<uint>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd128_PositiveInfinity_int()
        {
            for (int i = 0; i < Vector128<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.PositiveInfinity, Simd128<int>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<int>.PositiveInfinity}\nActual: {Simd128<int>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd128_PositiveInfinity_ulong()
        {
            for (int i = 0; i < Vector128<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.PositiveInfinity, Simd128<ulong>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<ulong>.PositiveInfinity}\nActual: {Simd128<ulong>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd128_PositiveInfinity_long()
        {
            for (int i = 0; i < Vector128<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.PositiveInfinity, Simd128<long>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<long>.PositiveInfinity}\nActual: {Simd128<long>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd128_PositiveInfinity_float()
        {
            for (int i = 0; i < Vector128<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.PositiveInfinity, Simd128<float>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<float>.PositiveInfinity}\nActual: {Simd128<float>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd128_PositiveInfinity_double()
        {
            for (int i = 0; i < Vector128<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.PositiveInfinity, Simd128<double>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<double>.PositiveInfinity}\nActual: {Simd128<double>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd128_One_byte()
        {
            for (int i = 0; i < Vector128<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.One, Simd128<byte>.One.GetElement(i)), $"\nExpected: {Scalar<byte>.One}\nActual: {Simd128<byte>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd128_One_sbyte()
        {
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.One, Simd128<sbyte>.One.GetElement(i)), $"\nExpected: {Scalar<sbyte>.One}\nActual: {Simd128<sbyte>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd128_One_ushort()
        {
            for (int i = 0; i < Vector128<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.One, Simd128<ushort>.One.GetElement(i)), $"\nExpected: {Scalar<ushort>.One}\nActual: {Simd128<ushort>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd128_One_short()
        {
            for (int i = 0; i < Vector128<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.One, Simd128<short>.One.GetElement(i)), $"\nExpected: {Scalar<short>.One}\nActual: {Simd128<short>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd128_One_uint()
        {
            for (int i = 0; i < Vector128<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.One, Simd128<uint>.One.GetElement(i)), $"\nExpected: {Scalar<uint>.One}\nActual: {Simd128<uint>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd128_One_int()
        {
            for (int i = 0; i < Vector128<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.One, Simd128<int>.One.GetElement(i)), $"\nExpected: {Scalar<int>.One}\nActual: {Simd128<int>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd128_One_ulong()
        {
            for (int i = 0; i < Vector128<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.One, Simd128<ulong>.One.GetElement(i)), $"\nExpected: {Scalar<ulong>.One}\nActual: {Simd128<ulong>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd128_One_long()
        {
            for (int i = 0; i < Vector128<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.One, Simd128<long>.One.GetElement(i)), $"\nExpected: {Scalar<long>.One}\nActual: {Simd128<long>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd128_One_float()
        {
            for (int i = 0; i < Vector128<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.One, Simd128<float>.One.GetElement(i)), $"\nExpected: {Scalar<float>.One}\nActual: {Simd128<float>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd128_One_double()
        {
            for (int i = 0; i < Vector128<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.One, Simd128<double>.One.GetElement(i)), $"\nExpected: {Scalar<double>.One}\nActual: {Simd128<double>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Two_byte()
        {
            for (int i = 0; i < Vector128<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.Two, Simd128<byte>.Two.GetElement(i)), $"\nExpected: {Scalar<byte>.Two}\nActual: {Simd128<byte>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Two_sbyte()
        {
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.Two, Simd128<sbyte>.Two.GetElement(i)), $"\nExpected: {Scalar<sbyte>.Two}\nActual: {Simd128<sbyte>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Two_ushort()
        {
            for (int i = 0; i < Vector128<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.Two, Simd128<ushort>.Two.GetElement(i)), $"\nExpected: {Scalar<ushort>.Two}\nActual: {Simd128<ushort>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Two_short()
        {
            for (int i = 0; i < Vector128<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.Two, Simd128<short>.Two.GetElement(i)), $"\nExpected: {Scalar<short>.Two}\nActual: {Simd128<short>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Two_uint()
        {
            for (int i = 0; i < Vector128<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.Two, Simd128<uint>.Two.GetElement(i)), $"\nExpected: {Scalar<uint>.Two}\nActual: {Simd128<uint>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Two_int()
        {
            for (int i = 0; i < Vector128<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.Two, Simd128<int>.Two.GetElement(i)), $"\nExpected: {Scalar<int>.Two}\nActual: {Simd128<int>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Two_ulong()
        {
            for (int i = 0; i < Vector128<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.Two, Simd128<ulong>.Two.GetElement(i)), $"\nExpected: {Scalar<ulong>.Two}\nActual: {Simd128<ulong>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Two_long()
        {
            for (int i = 0; i < Vector128<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.Two, Simd128<long>.Two.GetElement(i)), $"\nExpected: {Scalar<long>.Two}\nActual: {Simd128<long>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Two_float()
        {
            for (int i = 0; i < Vector128<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.Two, Simd128<float>.Two.GetElement(i)), $"\nExpected: {Scalar<float>.Two}\nActual: {Simd128<float>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Two_double()
        {
            for (int i = 0; i < Vector128<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.Two, Simd128<double>.Two.GetElement(i)), $"\nExpected: {Scalar<double>.Two}\nActual: {Simd128<double>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinusOne_byte()
        {
            for (int i = 0; i < Vector128<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.MinusOne, Simd128<byte>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<byte>.MinusOne}\nActual: {Simd128<byte>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinusOne_sbyte()
        {
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.MinusOne, Simd128<sbyte>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<sbyte>.MinusOne}\nActual: {Simd128<sbyte>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinusOne_ushort()
        {
            for (int i = 0; i < Vector128<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.MinusOne, Simd128<ushort>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<ushort>.MinusOne}\nActual: {Simd128<ushort>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinusOne_short()
        {
            for (int i = 0; i < Vector128<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.MinusOne, Simd128<short>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<short>.MinusOne}\nActual: {Simd128<short>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinusOne_uint()
        {
            for (int i = 0; i < Vector128<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.MinusOne, Simd128<uint>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<uint>.MinusOne}\nActual: {Simd128<uint>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinusOne_int()
        {
            for (int i = 0; i < Vector128<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.MinusOne, Simd128<int>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<int>.MinusOne}\nActual: {Simd128<int>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinusOne_ulong()
        {
            for (int i = 0; i < Vector128<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.MinusOne, Simd128<ulong>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<ulong>.MinusOne}\nActual: {Simd128<ulong>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinusOne_long()
        {
            for (int i = 0; i < Vector128<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.MinusOne, Simd128<long>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<long>.MinusOne}\nActual: {Simd128<long>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinusOne_float()
        {
            for (int i = 0; i < Vector128<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.MinusOne, Simd128<float>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<float>.MinusOne}\nActual: {Simd128<float>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinusOne_double()
        {
            for (int i = 0; i < Vector128<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.MinusOne, Simd128<double>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<double>.MinusOne}\nActual: {Simd128<double>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinusTwo_byte()
        {
            for (int i = 0; i < Vector128<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.MinusTwo, Simd128<byte>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<byte>.MinusTwo}\nActual: {Simd128<byte>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinusTwo_sbyte()
        {
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.MinusTwo, Simd128<sbyte>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<sbyte>.MinusTwo}\nActual: {Simd128<sbyte>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinusTwo_ushort()
        {
            for (int i = 0; i < Vector128<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.MinusTwo, Simd128<ushort>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<ushort>.MinusTwo}\nActual: {Simd128<ushort>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinusTwo_short()
        {
            for (int i = 0; i < Vector128<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.MinusTwo, Simd128<short>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<short>.MinusTwo}\nActual: {Simd128<short>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinusTwo_uint()
        {
            for (int i = 0; i < Vector128<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.MinusTwo, Simd128<uint>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<uint>.MinusTwo}\nActual: {Simd128<uint>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinusTwo_int()
        {
            for (int i = 0; i < Vector128<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.MinusTwo, Simd128<int>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<int>.MinusTwo}\nActual: {Simd128<int>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinusTwo_ulong()
        {
            for (int i = 0; i < Vector128<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.MinusTwo, Simd128<ulong>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<ulong>.MinusTwo}\nActual: {Simd128<ulong>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinusTwo_long()
        {
            for (int i = 0; i < Vector128<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.MinusTwo, Simd128<long>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<long>.MinusTwo}\nActual: {Simd128<long>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinusTwo_float()
        {
            for (int i = 0; i < Vector128<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.MinusTwo, Simd128<float>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<float>.MinusTwo}\nActual: {Simd128<float>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MinusTwo_double()
        {
            for (int i = 0; i < Vector128<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.MinusTwo, Simd128<double>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<double>.MinusTwo}\nActual: {Simd128<double>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd128_E_byte()
        {
            for (int i = 0; i < Vector128<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.E, Simd128<byte>.E.GetElement(i)), $"\nExpected: {Scalar<byte>.E}\nActual: {Simd128<byte>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd128_E_sbyte()
        {
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.E, Simd128<sbyte>.E.GetElement(i)), $"\nExpected: {Scalar<sbyte>.E}\nActual: {Simd128<sbyte>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd128_E_ushort()
        {
            for (int i = 0; i < Vector128<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.E, Simd128<ushort>.E.GetElement(i)), $"\nExpected: {Scalar<ushort>.E}\nActual: {Simd128<ushort>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd128_E_short()
        {
            for (int i = 0; i < Vector128<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.E, Simd128<short>.E.GetElement(i)), $"\nExpected: {Scalar<short>.E}\nActual: {Simd128<short>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd128_E_uint()
        {
            for (int i = 0; i < Vector128<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.E, Simd128<uint>.E.GetElement(i)), $"\nExpected: {Scalar<uint>.E}\nActual: {Simd128<uint>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd128_E_int()
        {
            for (int i = 0; i < Vector128<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.E, Simd128<int>.E.GetElement(i)), $"\nExpected: {Scalar<int>.E}\nActual: {Simd128<int>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd128_E_ulong()
        {
            for (int i = 0; i < Vector128<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.E, Simd128<ulong>.E.GetElement(i)), $"\nExpected: {Scalar<ulong>.E}\nActual: {Simd128<ulong>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd128_E_long()
        {
            for (int i = 0; i < Vector128<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.E, Simd128<long>.E.GetElement(i)), $"\nExpected: {Scalar<long>.E}\nActual: {Simd128<long>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd128_E_float()
        {
            for (int i = 0; i < Vector128<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.E, Simd128<float>.E.GetElement(i)), $"\nExpected: {Scalar<float>.E}\nActual: {Simd128<float>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd128_E_double()
        {
            for (int i = 0; i < Vector128<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.E, Simd128<double>.E.GetElement(i)), $"\nExpected: {Scalar<double>.E}\nActual: {Simd128<double>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Pi_byte()
        {
            for (int i = 0; i < Vector128<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.Pi, Simd128<byte>.Pi.GetElement(i)), $"\nExpected: {Scalar<byte>.Pi}\nActual: {Simd128<byte>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Pi_sbyte()
        {
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.Pi, Simd128<sbyte>.Pi.GetElement(i)), $"\nExpected: {Scalar<sbyte>.Pi}\nActual: {Simd128<sbyte>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Pi_ushort()
        {
            for (int i = 0; i < Vector128<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.Pi, Simd128<ushort>.Pi.GetElement(i)), $"\nExpected: {Scalar<ushort>.Pi}\nActual: {Simd128<ushort>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Pi_short()
        {
            for (int i = 0; i < Vector128<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.Pi, Simd128<short>.Pi.GetElement(i)), $"\nExpected: {Scalar<short>.Pi}\nActual: {Simd128<short>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Pi_uint()
        {
            for (int i = 0; i < Vector128<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.Pi, Simd128<uint>.Pi.GetElement(i)), $"\nExpected: {Scalar<uint>.Pi}\nActual: {Simd128<uint>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Pi_int()
        {
            for (int i = 0; i < Vector128<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.Pi, Simd128<int>.Pi.GetElement(i)), $"\nExpected: {Scalar<int>.Pi}\nActual: {Simd128<int>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Pi_ulong()
        {
            for (int i = 0; i < Vector128<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.Pi, Simd128<ulong>.Pi.GetElement(i)), $"\nExpected: {Scalar<ulong>.Pi}\nActual: {Simd128<ulong>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Pi_long()
        {
            for (int i = 0; i < Vector128<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.Pi, Simd128<long>.Pi.GetElement(i)), $"\nExpected: {Scalar<long>.Pi}\nActual: {Simd128<long>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Pi_float()
        {
            for (int i = 0; i < Vector128<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.Pi, Simd128<float>.Pi.GetElement(i)), $"\nExpected: {Scalar<float>.Pi}\nActual: {Simd128<float>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Pi_double()
        {
            for (int i = 0; i < Vector128<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.Pi, Simd128<double>.Pi.GetElement(i)), $"\nExpected: {Scalar<double>.Pi}\nActual: {Simd128<double>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd128_PiOver2_byte()
        {
            for (int i = 0; i < Vector128<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.PiOver2, Simd128<byte>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<byte>.PiOver2}\nActual: {Simd128<byte>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd128_PiOver2_sbyte()
        {
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.PiOver2, Simd128<sbyte>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<sbyte>.PiOver2}\nActual: {Simd128<sbyte>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd128_PiOver2_ushort()
        {
            for (int i = 0; i < Vector128<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.PiOver2, Simd128<ushort>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<ushort>.PiOver2}\nActual: {Simd128<ushort>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd128_PiOver2_short()
        {
            for (int i = 0; i < Vector128<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.PiOver2, Simd128<short>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<short>.PiOver2}\nActual: {Simd128<short>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd128_PiOver2_uint()
        {
            for (int i = 0; i < Vector128<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.PiOver2, Simd128<uint>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<uint>.PiOver2}\nActual: {Simd128<uint>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd128_PiOver2_int()
        {
            for (int i = 0; i < Vector128<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.PiOver2, Simd128<int>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<int>.PiOver2}\nActual: {Simd128<int>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd128_PiOver2_ulong()
        {
            for (int i = 0; i < Vector128<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.PiOver2, Simd128<ulong>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<ulong>.PiOver2}\nActual: {Simd128<ulong>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd128_PiOver2_long()
        {
            for (int i = 0; i < Vector128<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.PiOver2, Simd128<long>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<long>.PiOver2}\nActual: {Simd128<long>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd128_PiOver2_float()
        {
            for (int i = 0; i < Vector128<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.PiOver2, Simd128<float>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<float>.PiOver2}\nActual: {Simd128<float>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd128_PiOver2_double()
        {
            for (int i = 0; i < Vector128<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.PiOver2, Simd128<double>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<double>.PiOver2}\nActual: {Simd128<double>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Tau_byte()
        {
            for (int i = 0; i < Vector128<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.Tau, Simd128<byte>.Tau.GetElement(i)), $"\nExpected: {Scalar<byte>.Tau}\nActual: {Simd128<byte>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Tau_sbyte()
        {
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.Tau, Simd128<sbyte>.Tau.GetElement(i)), $"\nExpected: {Scalar<sbyte>.Tau}\nActual: {Simd128<sbyte>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Tau_ushort()
        {
            for (int i = 0; i < Vector128<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.Tau, Simd128<ushort>.Tau.GetElement(i)), $"\nExpected: {Scalar<ushort>.Tau}\nActual: {Simd128<ushort>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Tau_short()
        {
            for (int i = 0; i < Vector128<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.Tau, Simd128<short>.Tau.GetElement(i)), $"\nExpected: {Scalar<short>.Tau}\nActual: {Simd128<short>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Tau_uint()
        {
            for (int i = 0; i < Vector128<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.Tau, Simd128<uint>.Tau.GetElement(i)), $"\nExpected: {Scalar<uint>.Tau}\nActual: {Simd128<uint>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Tau_int()
        {
            for (int i = 0; i < Vector128<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.Tau, Simd128<int>.Tau.GetElement(i)), $"\nExpected: {Scalar<int>.Tau}\nActual: {Simd128<int>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Tau_ulong()
        {
            for (int i = 0; i < Vector128<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.Tau, Simd128<ulong>.Tau.GetElement(i)), $"\nExpected: {Scalar<ulong>.Tau}\nActual: {Simd128<ulong>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Tau_long()
        {
            for (int i = 0; i < Vector128<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.Tau, Simd128<long>.Tau.GetElement(i)), $"\nExpected: {Scalar<long>.Tau}\nActual: {Simd128<long>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Tau_float()
        {
            for (int i = 0; i < Vector128<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.Tau, Simd128<float>.Tau.GetElement(i)), $"\nExpected: {Scalar<float>.Tau}\nActual: {Simd128<float>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd128_Tau_double()
        {
            for (int i = 0; i < Vector128<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.Tau, Simd128<double>.Tau.GetElement(i)), $"\nExpected: {Scalar<double>.Tau}\nActual: {Simd128<double>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MaxValueOver2_byte()
        {
            for (int i = 0; i < Vector128<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.MaxValueOver2, Simd128<byte>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<byte>.MaxValueOver2}\nActual: {Simd128<byte>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MaxValueOver2_sbyte()
        {
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.MaxValueOver2, Simd128<sbyte>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<sbyte>.MaxValueOver2}\nActual: {Simd128<sbyte>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MaxValueOver2_ushort()
        {
            for (int i = 0; i < Vector128<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.MaxValueOver2, Simd128<ushort>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<ushort>.MaxValueOver2}\nActual: {Simd128<ushort>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MaxValueOver2_short()
        {
            for (int i = 0; i < Vector128<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.MaxValueOver2, Simd128<short>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<short>.MaxValueOver2}\nActual: {Simd128<short>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MaxValueOver2_uint()
        {
            for (int i = 0; i < Vector128<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.MaxValueOver2, Simd128<uint>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<uint>.MaxValueOver2}\nActual: {Simd128<uint>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MaxValueOver2_int()
        {
            for (int i = 0; i < Vector128<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.MaxValueOver2, Simd128<int>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<int>.MaxValueOver2}\nActual: {Simd128<int>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MaxValueOver2_ulong()
        {
            for (int i = 0; i < Vector128<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.MaxValueOver2, Simd128<ulong>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<ulong>.MaxValueOver2}\nActual: {Simd128<ulong>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MaxValueOver2_long()
        {
            for (int i = 0; i < Vector128<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.MaxValueOver2, Simd128<long>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<long>.MaxValueOver2}\nActual: {Simd128<long>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MaxValueOver2_float()
        {
            for (int i = 0; i < Vector128<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.MaxValueOver2, Simd128<float>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<float>.MaxValueOver2}\nActual: {Simd128<float>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd128_MaxValueOver2_double()
        {
            for (int i = 0; i < Vector128<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.MaxValueOver2, Simd128<double>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<double>.MaxValueOver2}\nActual: {Simd128<double>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd128_AllBitsSet_byte()
        {
            for (int i = 0; i < Vector128<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.AllBitsSet, Simd128<byte>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<byte>.AllBitsSet}\nActual: {Simd128<byte>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd128_AllBitsSet_sbyte()
        {
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.AllBitsSet, Simd128<sbyte>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<sbyte>.AllBitsSet}\nActual: {Simd128<sbyte>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd128_AllBitsSet_ushort()
        {
            for (int i = 0; i < Vector128<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.AllBitsSet, Simd128<ushort>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<ushort>.AllBitsSet}\nActual: {Simd128<ushort>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd128_AllBitsSet_short()
        {
            for (int i = 0; i < Vector128<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.AllBitsSet, Simd128<short>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<short>.AllBitsSet}\nActual: {Simd128<short>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd128_AllBitsSet_uint()
        {
            for (int i = 0; i < Vector128<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.AllBitsSet, Simd128<uint>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<uint>.AllBitsSet}\nActual: {Simd128<uint>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd128_AllBitsSet_int()
        {
            for (int i = 0; i < Vector128<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.AllBitsSet, Simd128<int>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<int>.AllBitsSet}\nActual: {Simd128<int>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd128_AllBitsSet_ulong()
        {
            for (int i = 0; i < Vector128<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.AllBitsSet, Simd128<ulong>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<ulong>.AllBitsSet}\nActual: {Simd128<ulong>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd128_AllBitsSet_long()
        {
            for (int i = 0; i < Vector128<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.AllBitsSet, Simd128<long>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<long>.AllBitsSet}\nActual: {Simd128<long>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd128_AllBitsSet_float()
        {
            for (int i = 0; i < Vector128<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.AllBitsSet, Simd128<float>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<float>.AllBitsSet}\nActual: {Simd128<float>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd128_AllBitsSet_double()
        {
            for (int i = 0; i < Vector128<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.AllBitsSet, Simd128<double>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<double>.AllBitsSet}\nActual: {Simd128<double>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Epsilon_byte()
        {
            for (int i = 0; i < Vector256<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.Epsilon, Simd256<byte>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<byte>.Epsilon}\nActual: {Simd256<byte>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Epsilon_sbyte()
        {
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.Epsilon, Simd256<sbyte>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<sbyte>.Epsilon}\nActual: {Simd256<sbyte>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Epsilon_ushort()
        {
            for (int i = 0; i < Vector256<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.Epsilon, Simd256<ushort>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<ushort>.Epsilon}\nActual: {Simd256<ushort>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Epsilon_short()
        {
            for (int i = 0; i < Vector256<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.Epsilon, Simd256<short>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<short>.Epsilon}\nActual: {Simd256<short>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Epsilon_uint()
        {
            for (int i = 0; i < Vector256<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.Epsilon, Simd256<uint>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<uint>.Epsilon}\nActual: {Simd256<uint>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Epsilon_int()
        {
            for (int i = 0; i < Vector256<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.Epsilon, Simd256<int>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<int>.Epsilon}\nActual: {Simd256<int>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Epsilon_ulong()
        {
            for (int i = 0; i < Vector256<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.Epsilon, Simd256<ulong>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<ulong>.Epsilon}\nActual: {Simd256<ulong>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Epsilon_long()
        {
            for (int i = 0; i < Vector256<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.Epsilon, Simd256<long>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<long>.Epsilon}\nActual: {Simd256<long>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Epsilon_float()
        {
            for (int i = 0; i < Vector256<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.Epsilon, Simd256<float>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<float>.Epsilon}\nActual: {Simd256<float>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Epsilon_double()
        {
            for (int i = 0; i < Vector256<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.Epsilon, Simd256<double>.Epsilon.GetElement(i)), $"\nExpected: {Scalar<double>.Epsilon}\nActual: {Simd256<double>.Epsilon.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MaxValue_byte()
        {
            for (int i = 0; i < Vector256<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.MaxValue, Simd256<byte>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<byte>.MaxValue}\nActual: {Simd256<byte>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MaxValue_sbyte()
        {
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.MaxValue, Simd256<sbyte>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<sbyte>.MaxValue}\nActual: {Simd256<sbyte>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MaxValue_ushort()
        {
            for (int i = 0; i < Vector256<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.MaxValue, Simd256<ushort>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<ushort>.MaxValue}\nActual: {Simd256<ushort>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MaxValue_short()
        {
            for (int i = 0; i < Vector256<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.MaxValue, Simd256<short>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<short>.MaxValue}\nActual: {Simd256<short>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MaxValue_uint()
        {
            for (int i = 0; i < Vector256<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.MaxValue, Simd256<uint>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<uint>.MaxValue}\nActual: {Simd256<uint>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MaxValue_int()
        {
            for (int i = 0; i < Vector256<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.MaxValue, Simd256<int>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<int>.MaxValue}\nActual: {Simd256<int>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MaxValue_ulong()
        {
            for (int i = 0; i < Vector256<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.MaxValue, Simd256<ulong>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<ulong>.MaxValue}\nActual: {Simd256<ulong>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MaxValue_long()
        {
            for (int i = 0; i < Vector256<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.MaxValue, Simd256<long>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<long>.MaxValue}\nActual: {Simd256<long>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MaxValue_float()
        {
            for (int i = 0; i < Vector256<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.MaxValue, Simd256<float>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<float>.MaxValue}\nActual: {Simd256<float>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MaxValue_double()
        {
            for (int i = 0; i < Vector256<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.MaxValue, Simd256<double>.MaxValue.GetElement(i)), $"\nExpected: {Scalar<double>.MaxValue}\nActual: {Simd256<double>.MaxValue.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinValue_byte()
        {
            for (int i = 0; i < Vector256<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.MinValue, Simd256<byte>.MinValue.GetElement(i)), $"\nExpected: {Scalar<byte>.MinValue}\nActual: {Simd256<byte>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinValue_sbyte()
        {
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.MinValue, Simd256<sbyte>.MinValue.GetElement(i)), $"\nExpected: {Scalar<sbyte>.MinValue}\nActual: {Simd256<sbyte>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinValue_ushort()
        {
            for (int i = 0; i < Vector256<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.MinValue, Simd256<ushort>.MinValue.GetElement(i)), $"\nExpected: {Scalar<ushort>.MinValue}\nActual: {Simd256<ushort>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinValue_short()
        {
            for (int i = 0; i < Vector256<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.MinValue, Simd256<short>.MinValue.GetElement(i)), $"\nExpected: {Scalar<short>.MinValue}\nActual: {Simd256<short>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinValue_uint()
        {
            for (int i = 0; i < Vector256<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.MinValue, Simd256<uint>.MinValue.GetElement(i)), $"\nExpected: {Scalar<uint>.MinValue}\nActual: {Simd256<uint>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinValue_int()
        {
            for (int i = 0; i < Vector256<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.MinValue, Simd256<int>.MinValue.GetElement(i)), $"\nExpected: {Scalar<int>.MinValue}\nActual: {Simd256<int>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinValue_ulong()
        {
            for (int i = 0; i < Vector256<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.MinValue, Simd256<ulong>.MinValue.GetElement(i)), $"\nExpected: {Scalar<ulong>.MinValue}\nActual: {Simd256<ulong>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinValue_long()
        {
            for (int i = 0; i < Vector256<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.MinValue, Simd256<long>.MinValue.GetElement(i)), $"\nExpected: {Scalar<long>.MinValue}\nActual: {Simd256<long>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinValue_float()
        {
            for (int i = 0; i < Vector256<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.MinValue, Simd256<float>.MinValue.GetElement(i)), $"\nExpected: {Scalar<float>.MinValue}\nActual: {Simd256<float>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinValue_double()
        {
            for (int i = 0; i < Vector256<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.MinValue, Simd256<double>.MinValue.GetElement(i)), $"\nExpected: {Scalar<double>.MinValue}\nActual: {Simd256<double>.MinValue.GetElement(i)}");
        }
        [Fact]
        public void Simd256_NaN_byte()
        {
            for (int i = 0; i < Vector256<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.NaN, Simd256<byte>.NaN.GetElement(i)), $"\nExpected: {Scalar<byte>.NaN}\nActual: {Simd256<byte>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd256_NaN_sbyte()
        {
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.NaN, Simd256<sbyte>.NaN.GetElement(i)), $"\nExpected: {Scalar<sbyte>.NaN}\nActual: {Simd256<sbyte>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd256_NaN_ushort()
        {
            for (int i = 0; i < Vector256<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.NaN, Simd256<ushort>.NaN.GetElement(i)), $"\nExpected: {Scalar<ushort>.NaN}\nActual: {Simd256<ushort>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd256_NaN_short()
        {
            for (int i = 0; i < Vector256<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.NaN, Simd256<short>.NaN.GetElement(i)), $"\nExpected: {Scalar<short>.NaN}\nActual: {Simd256<short>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd256_NaN_uint()
        {
            for (int i = 0; i < Vector256<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.NaN, Simd256<uint>.NaN.GetElement(i)), $"\nExpected: {Scalar<uint>.NaN}\nActual: {Simd256<uint>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd256_NaN_int()
        {
            for (int i = 0; i < Vector256<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.NaN, Simd256<int>.NaN.GetElement(i)), $"\nExpected: {Scalar<int>.NaN}\nActual: {Simd256<int>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd256_NaN_ulong()
        {
            for (int i = 0; i < Vector256<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.NaN, Simd256<ulong>.NaN.GetElement(i)), $"\nExpected: {Scalar<ulong>.NaN}\nActual: {Simd256<ulong>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd256_NaN_long()
        {
            for (int i = 0; i < Vector256<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.NaN, Simd256<long>.NaN.GetElement(i)), $"\nExpected: {Scalar<long>.NaN}\nActual: {Simd256<long>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd256_NaN_float()
        {
            for (int i = 0; i < Vector256<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.NaN, Simd256<float>.NaN.GetElement(i)), $"\nExpected: {Scalar<float>.NaN}\nActual: {Simd256<float>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd256_NaN_double()
        {
            for (int i = 0; i < Vector256<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.NaN, Simd256<double>.NaN.GetElement(i)), $"\nExpected: {Scalar<double>.NaN}\nActual: {Simd256<double>.NaN.GetElement(i)}");
        }
        [Fact]
        public void Simd256_NegativeInfinity_byte()
        {
            for (int i = 0; i < Vector256<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.NegativeInfinity, Simd256<byte>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<byte>.NegativeInfinity}\nActual: {Simd256<byte>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd256_NegativeInfinity_sbyte()
        {
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.NegativeInfinity, Simd256<sbyte>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<sbyte>.NegativeInfinity}\nActual: {Simd256<sbyte>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd256_NegativeInfinity_ushort()
        {
            for (int i = 0; i < Vector256<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.NegativeInfinity, Simd256<ushort>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<ushort>.NegativeInfinity}\nActual: {Simd256<ushort>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd256_NegativeInfinity_short()
        {
            for (int i = 0; i < Vector256<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.NegativeInfinity, Simd256<short>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<short>.NegativeInfinity}\nActual: {Simd256<short>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd256_NegativeInfinity_uint()
        {
            for (int i = 0; i < Vector256<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.NegativeInfinity, Simd256<uint>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<uint>.NegativeInfinity}\nActual: {Simd256<uint>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd256_NegativeInfinity_int()
        {
            for (int i = 0; i < Vector256<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.NegativeInfinity, Simd256<int>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<int>.NegativeInfinity}\nActual: {Simd256<int>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd256_NegativeInfinity_ulong()
        {
            for (int i = 0; i < Vector256<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.NegativeInfinity, Simd256<ulong>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<ulong>.NegativeInfinity}\nActual: {Simd256<ulong>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd256_NegativeInfinity_long()
        {
            for (int i = 0; i < Vector256<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.NegativeInfinity, Simd256<long>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<long>.NegativeInfinity}\nActual: {Simd256<long>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd256_NegativeInfinity_float()
        {
            for (int i = 0; i < Vector256<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.NegativeInfinity, Simd256<float>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<float>.NegativeInfinity}\nActual: {Simd256<float>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd256_NegativeInfinity_double()
        {
            for (int i = 0; i < Vector256<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.NegativeInfinity, Simd256<double>.NegativeInfinity.GetElement(i)), $"\nExpected: {Scalar<double>.NegativeInfinity}\nActual: {Simd256<double>.NegativeInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd256_PositiveInfinity_byte()
        {
            for (int i = 0; i < Vector256<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.PositiveInfinity, Simd256<byte>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<byte>.PositiveInfinity}\nActual: {Simd256<byte>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd256_PositiveInfinity_sbyte()
        {
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.PositiveInfinity, Simd256<sbyte>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<sbyte>.PositiveInfinity}\nActual: {Simd256<sbyte>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd256_PositiveInfinity_ushort()
        {
            for (int i = 0; i < Vector256<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.PositiveInfinity, Simd256<ushort>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<ushort>.PositiveInfinity}\nActual: {Simd256<ushort>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd256_PositiveInfinity_short()
        {
            for (int i = 0; i < Vector256<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.PositiveInfinity, Simd256<short>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<short>.PositiveInfinity}\nActual: {Simd256<short>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd256_PositiveInfinity_uint()
        {
            for (int i = 0; i < Vector256<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.PositiveInfinity, Simd256<uint>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<uint>.PositiveInfinity}\nActual: {Simd256<uint>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd256_PositiveInfinity_int()
        {
            for (int i = 0; i < Vector256<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.PositiveInfinity, Simd256<int>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<int>.PositiveInfinity}\nActual: {Simd256<int>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd256_PositiveInfinity_ulong()
        {
            for (int i = 0; i < Vector256<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.PositiveInfinity, Simd256<ulong>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<ulong>.PositiveInfinity}\nActual: {Simd256<ulong>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd256_PositiveInfinity_long()
        {
            for (int i = 0; i < Vector256<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.PositiveInfinity, Simd256<long>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<long>.PositiveInfinity}\nActual: {Simd256<long>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd256_PositiveInfinity_float()
        {
            for (int i = 0; i < Vector256<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.PositiveInfinity, Simd256<float>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<float>.PositiveInfinity}\nActual: {Simd256<float>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd256_PositiveInfinity_double()
        {
            for (int i = 0; i < Vector256<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.PositiveInfinity, Simd256<double>.PositiveInfinity.GetElement(i)), $"\nExpected: {Scalar<double>.PositiveInfinity}\nActual: {Simd256<double>.PositiveInfinity.GetElement(i)}");
        }
        [Fact]
        public void Simd256_One_byte()
        {
            for (int i = 0; i < Vector256<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.One, Simd256<byte>.One.GetElement(i)), $"\nExpected: {Scalar<byte>.One}\nActual: {Simd256<byte>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd256_One_sbyte()
        {
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.One, Simd256<sbyte>.One.GetElement(i)), $"\nExpected: {Scalar<sbyte>.One}\nActual: {Simd256<sbyte>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd256_One_ushort()
        {
            for (int i = 0; i < Vector256<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.One, Simd256<ushort>.One.GetElement(i)), $"\nExpected: {Scalar<ushort>.One}\nActual: {Simd256<ushort>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd256_One_short()
        {
            for (int i = 0; i < Vector256<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.One, Simd256<short>.One.GetElement(i)), $"\nExpected: {Scalar<short>.One}\nActual: {Simd256<short>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd256_One_uint()
        {
            for (int i = 0; i < Vector256<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.One, Simd256<uint>.One.GetElement(i)), $"\nExpected: {Scalar<uint>.One}\nActual: {Simd256<uint>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd256_One_int()
        {
            for (int i = 0; i < Vector256<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.One, Simd256<int>.One.GetElement(i)), $"\nExpected: {Scalar<int>.One}\nActual: {Simd256<int>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd256_One_ulong()
        {
            for (int i = 0; i < Vector256<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.One, Simd256<ulong>.One.GetElement(i)), $"\nExpected: {Scalar<ulong>.One}\nActual: {Simd256<ulong>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd256_One_long()
        {
            for (int i = 0; i < Vector256<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.One, Simd256<long>.One.GetElement(i)), $"\nExpected: {Scalar<long>.One}\nActual: {Simd256<long>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd256_One_float()
        {
            for (int i = 0; i < Vector256<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.One, Simd256<float>.One.GetElement(i)), $"\nExpected: {Scalar<float>.One}\nActual: {Simd256<float>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd256_One_double()
        {
            for (int i = 0; i < Vector256<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.One, Simd256<double>.One.GetElement(i)), $"\nExpected: {Scalar<double>.One}\nActual: {Simd256<double>.One.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Two_byte()
        {
            for (int i = 0; i < Vector256<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.Two, Simd256<byte>.Two.GetElement(i)), $"\nExpected: {Scalar<byte>.Two}\nActual: {Simd256<byte>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Two_sbyte()
        {
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.Two, Simd256<sbyte>.Two.GetElement(i)), $"\nExpected: {Scalar<sbyte>.Two}\nActual: {Simd256<sbyte>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Two_ushort()
        {
            for (int i = 0; i < Vector256<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.Two, Simd256<ushort>.Two.GetElement(i)), $"\nExpected: {Scalar<ushort>.Two}\nActual: {Simd256<ushort>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Two_short()
        {
            for (int i = 0; i < Vector256<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.Two, Simd256<short>.Two.GetElement(i)), $"\nExpected: {Scalar<short>.Two}\nActual: {Simd256<short>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Two_uint()
        {
            for (int i = 0; i < Vector256<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.Two, Simd256<uint>.Two.GetElement(i)), $"\nExpected: {Scalar<uint>.Two}\nActual: {Simd256<uint>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Two_int()
        {
            for (int i = 0; i < Vector256<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.Two, Simd256<int>.Two.GetElement(i)), $"\nExpected: {Scalar<int>.Two}\nActual: {Simd256<int>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Two_ulong()
        {
            for (int i = 0; i < Vector256<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.Two, Simd256<ulong>.Two.GetElement(i)), $"\nExpected: {Scalar<ulong>.Two}\nActual: {Simd256<ulong>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Two_long()
        {
            for (int i = 0; i < Vector256<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.Two, Simd256<long>.Two.GetElement(i)), $"\nExpected: {Scalar<long>.Two}\nActual: {Simd256<long>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Two_float()
        {
            for (int i = 0; i < Vector256<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.Two, Simd256<float>.Two.GetElement(i)), $"\nExpected: {Scalar<float>.Two}\nActual: {Simd256<float>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Two_double()
        {
            for (int i = 0; i < Vector256<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.Two, Simd256<double>.Two.GetElement(i)), $"\nExpected: {Scalar<double>.Two}\nActual: {Simd256<double>.Two.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinusOne_byte()
        {
            for (int i = 0; i < Vector256<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.MinusOne, Simd256<byte>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<byte>.MinusOne}\nActual: {Simd256<byte>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinusOne_sbyte()
        {
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.MinusOne, Simd256<sbyte>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<sbyte>.MinusOne}\nActual: {Simd256<sbyte>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinusOne_ushort()
        {
            for (int i = 0; i < Vector256<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.MinusOne, Simd256<ushort>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<ushort>.MinusOne}\nActual: {Simd256<ushort>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinusOne_short()
        {
            for (int i = 0; i < Vector256<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.MinusOne, Simd256<short>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<short>.MinusOne}\nActual: {Simd256<short>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinusOne_uint()
        {
            for (int i = 0; i < Vector256<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.MinusOne, Simd256<uint>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<uint>.MinusOne}\nActual: {Simd256<uint>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinusOne_int()
        {
            for (int i = 0; i < Vector256<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.MinusOne, Simd256<int>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<int>.MinusOne}\nActual: {Simd256<int>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinusOne_ulong()
        {
            for (int i = 0; i < Vector256<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.MinusOne, Simd256<ulong>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<ulong>.MinusOne}\nActual: {Simd256<ulong>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinusOne_long()
        {
            for (int i = 0; i < Vector256<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.MinusOne, Simd256<long>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<long>.MinusOne}\nActual: {Simd256<long>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinusOne_float()
        {
            for (int i = 0; i < Vector256<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.MinusOne, Simd256<float>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<float>.MinusOne}\nActual: {Simd256<float>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinusOne_double()
        {
            for (int i = 0; i < Vector256<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.MinusOne, Simd256<double>.MinusOne.GetElement(i)), $"\nExpected: {Scalar<double>.MinusOne}\nActual: {Simd256<double>.MinusOne.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinusTwo_byte()
        {
            for (int i = 0; i < Vector256<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.MinusTwo, Simd256<byte>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<byte>.MinusTwo}\nActual: {Simd256<byte>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinusTwo_sbyte()
        {
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.MinusTwo, Simd256<sbyte>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<sbyte>.MinusTwo}\nActual: {Simd256<sbyte>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinusTwo_ushort()
        {
            for (int i = 0; i < Vector256<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.MinusTwo, Simd256<ushort>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<ushort>.MinusTwo}\nActual: {Simd256<ushort>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinusTwo_short()
        {
            for (int i = 0; i < Vector256<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.MinusTwo, Simd256<short>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<short>.MinusTwo}\nActual: {Simd256<short>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinusTwo_uint()
        {
            for (int i = 0; i < Vector256<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.MinusTwo, Simd256<uint>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<uint>.MinusTwo}\nActual: {Simd256<uint>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinusTwo_int()
        {
            for (int i = 0; i < Vector256<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.MinusTwo, Simd256<int>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<int>.MinusTwo}\nActual: {Simd256<int>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinusTwo_ulong()
        {
            for (int i = 0; i < Vector256<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.MinusTwo, Simd256<ulong>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<ulong>.MinusTwo}\nActual: {Simd256<ulong>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinusTwo_long()
        {
            for (int i = 0; i < Vector256<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.MinusTwo, Simd256<long>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<long>.MinusTwo}\nActual: {Simd256<long>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinusTwo_float()
        {
            for (int i = 0; i < Vector256<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.MinusTwo, Simd256<float>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<float>.MinusTwo}\nActual: {Simd256<float>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MinusTwo_double()
        {
            for (int i = 0; i < Vector256<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.MinusTwo, Simd256<double>.MinusTwo.GetElement(i)), $"\nExpected: {Scalar<double>.MinusTwo}\nActual: {Simd256<double>.MinusTwo.GetElement(i)}");
        }
        [Fact]
        public void Simd256_E_byte()
        {
            for (int i = 0; i < Vector256<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.E, Simd256<byte>.E.GetElement(i)), $"\nExpected: {Scalar<byte>.E}\nActual: {Simd256<byte>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd256_E_sbyte()
        {
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.E, Simd256<sbyte>.E.GetElement(i)), $"\nExpected: {Scalar<sbyte>.E}\nActual: {Simd256<sbyte>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd256_E_ushort()
        {
            for (int i = 0; i < Vector256<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.E, Simd256<ushort>.E.GetElement(i)), $"\nExpected: {Scalar<ushort>.E}\nActual: {Simd256<ushort>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd256_E_short()
        {
            for (int i = 0; i < Vector256<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.E, Simd256<short>.E.GetElement(i)), $"\nExpected: {Scalar<short>.E}\nActual: {Simd256<short>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd256_E_uint()
        {
            for (int i = 0; i < Vector256<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.E, Simd256<uint>.E.GetElement(i)), $"\nExpected: {Scalar<uint>.E}\nActual: {Simd256<uint>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd256_E_int()
        {
            for (int i = 0; i < Vector256<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.E, Simd256<int>.E.GetElement(i)), $"\nExpected: {Scalar<int>.E}\nActual: {Simd256<int>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd256_E_ulong()
        {
            for (int i = 0; i < Vector256<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.E, Simd256<ulong>.E.GetElement(i)), $"\nExpected: {Scalar<ulong>.E}\nActual: {Simd256<ulong>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd256_E_long()
        {
            for (int i = 0; i < Vector256<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.E, Simd256<long>.E.GetElement(i)), $"\nExpected: {Scalar<long>.E}\nActual: {Simd256<long>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd256_E_float()
        {
            for (int i = 0; i < Vector256<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.E, Simd256<float>.E.GetElement(i)), $"\nExpected: {Scalar<float>.E}\nActual: {Simd256<float>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd256_E_double()
        {
            for (int i = 0; i < Vector256<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.E, Simd256<double>.E.GetElement(i)), $"\nExpected: {Scalar<double>.E}\nActual: {Simd256<double>.E.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Pi_byte()
        {
            for (int i = 0; i < Vector256<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.Pi, Simd256<byte>.Pi.GetElement(i)), $"\nExpected: {Scalar<byte>.Pi}\nActual: {Simd256<byte>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Pi_sbyte()
        {
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.Pi, Simd256<sbyte>.Pi.GetElement(i)), $"\nExpected: {Scalar<sbyte>.Pi}\nActual: {Simd256<sbyte>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Pi_ushort()
        {
            for (int i = 0; i < Vector256<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.Pi, Simd256<ushort>.Pi.GetElement(i)), $"\nExpected: {Scalar<ushort>.Pi}\nActual: {Simd256<ushort>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Pi_short()
        {
            for (int i = 0; i < Vector256<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.Pi, Simd256<short>.Pi.GetElement(i)), $"\nExpected: {Scalar<short>.Pi}\nActual: {Simd256<short>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Pi_uint()
        {
            for (int i = 0; i < Vector256<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.Pi, Simd256<uint>.Pi.GetElement(i)), $"\nExpected: {Scalar<uint>.Pi}\nActual: {Simd256<uint>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Pi_int()
        {
            for (int i = 0; i < Vector256<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.Pi, Simd256<int>.Pi.GetElement(i)), $"\nExpected: {Scalar<int>.Pi}\nActual: {Simd256<int>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Pi_ulong()
        {
            for (int i = 0; i < Vector256<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.Pi, Simd256<ulong>.Pi.GetElement(i)), $"\nExpected: {Scalar<ulong>.Pi}\nActual: {Simd256<ulong>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Pi_long()
        {
            for (int i = 0; i < Vector256<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.Pi, Simd256<long>.Pi.GetElement(i)), $"\nExpected: {Scalar<long>.Pi}\nActual: {Simd256<long>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Pi_float()
        {
            for (int i = 0; i < Vector256<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.Pi, Simd256<float>.Pi.GetElement(i)), $"\nExpected: {Scalar<float>.Pi}\nActual: {Simd256<float>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Pi_double()
        {
            for (int i = 0; i < Vector256<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.Pi, Simd256<double>.Pi.GetElement(i)), $"\nExpected: {Scalar<double>.Pi}\nActual: {Simd256<double>.Pi.GetElement(i)}");
        }
        [Fact]
        public void Simd256_PiOver2_byte()
        {
            for (int i = 0; i < Vector256<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.PiOver2, Simd256<byte>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<byte>.PiOver2}\nActual: {Simd256<byte>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd256_PiOver2_sbyte()
        {
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.PiOver2, Simd256<sbyte>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<sbyte>.PiOver2}\nActual: {Simd256<sbyte>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd256_PiOver2_ushort()
        {
            for (int i = 0; i < Vector256<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.PiOver2, Simd256<ushort>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<ushort>.PiOver2}\nActual: {Simd256<ushort>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd256_PiOver2_short()
        {
            for (int i = 0; i < Vector256<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.PiOver2, Simd256<short>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<short>.PiOver2}\nActual: {Simd256<short>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd256_PiOver2_uint()
        {
            for (int i = 0; i < Vector256<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.PiOver2, Simd256<uint>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<uint>.PiOver2}\nActual: {Simd256<uint>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd256_PiOver2_int()
        {
            for (int i = 0; i < Vector256<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.PiOver2, Simd256<int>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<int>.PiOver2}\nActual: {Simd256<int>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd256_PiOver2_ulong()
        {
            for (int i = 0; i < Vector256<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.PiOver2, Simd256<ulong>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<ulong>.PiOver2}\nActual: {Simd256<ulong>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd256_PiOver2_long()
        {
            for (int i = 0; i < Vector256<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.PiOver2, Simd256<long>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<long>.PiOver2}\nActual: {Simd256<long>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd256_PiOver2_float()
        {
            for (int i = 0; i < Vector256<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.PiOver2, Simd256<float>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<float>.PiOver2}\nActual: {Simd256<float>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd256_PiOver2_double()
        {
            for (int i = 0; i < Vector256<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.PiOver2, Simd256<double>.PiOver2.GetElement(i)), $"\nExpected: {Scalar<double>.PiOver2}\nActual: {Simd256<double>.PiOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Tau_byte()
        {
            for (int i = 0; i < Vector256<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.Tau, Simd256<byte>.Tau.GetElement(i)), $"\nExpected: {Scalar<byte>.Tau}\nActual: {Simd256<byte>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Tau_sbyte()
        {
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.Tau, Simd256<sbyte>.Tau.GetElement(i)), $"\nExpected: {Scalar<sbyte>.Tau}\nActual: {Simd256<sbyte>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Tau_ushort()
        {
            for (int i = 0; i < Vector256<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.Tau, Simd256<ushort>.Tau.GetElement(i)), $"\nExpected: {Scalar<ushort>.Tau}\nActual: {Simd256<ushort>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Tau_short()
        {
            for (int i = 0; i < Vector256<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.Tau, Simd256<short>.Tau.GetElement(i)), $"\nExpected: {Scalar<short>.Tau}\nActual: {Simd256<short>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Tau_uint()
        {
            for (int i = 0; i < Vector256<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.Tau, Simd256<uint>.Tau.GetElement(i)), $"\nExpected: {Scalar<uint>.Tau}\nActual: {Simd256<uint>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Tau_int()
        {
            for (int i = 0; i < Vector256<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.Tau, Simd256<int>.Tau.GetElement(i)), $"\nExpected: {Scalar<int>.Tau}\nActual: {Simd256<int>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Tau_ulong()
        {
            for (int i = 0; i < Vector256<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.Tau, Simd256<ulong>.Tau.GetElement(i)), $"\nExpected: {Scalar<ulong>.Tau}\nActual: {Simd256<ulong>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Tau_long()
        {
            for (int i = 0; i < Vector256<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.Tau, Simd256<long>.Tau.GetElement(i)), $"\nExpected: {Scalar<long>.Tau}\nActual: {Simd256<long>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Tau_float()
        {
            for (int i = 0; i < Vector256<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.Tau, Simd256<float>.Tau.GetElement(i)), $"\nExpected: {Scalar<float>.Tau}\nActual: {Simd256<float>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd256_Tau_double()
        {
            for (int i = 0; i < Vector256<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.Tau, Simd256<double>.Tau.GetElement(i)), $"\nExpected: {Scalar<double>.Tau}\nActual: {Simd256<double>.Tau.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MaxValueOver2_byte()
        {
            for (int i = 0; i < Vector256<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.MaxValueOver2, Simd256<byte>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<byte>.MaxValueOver2}\nActual: {Simd256<byte>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MaxValueOver2_sbyte()
        {
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.MaxValueOver2, Simd256<sbyte>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<sbyte>.MaxValueOver2}\nActual: {Simd256<sbyte>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MaxValueOver2_ushort()
        {
            for (int i = 0; i < Vector256<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.MaxValueOver2, Simd256<ushort>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<ushort>.MaxValueOver2}\nActual: {Simd256<ushort>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MaxValueOver2_short()
        {
            for (int i = 0; i < Vector256<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.MaxValueOver2, Simd256<short>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<short>.MaxValueOver2}\nActual: {Simd256<short>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MaxValueOver2_uint()
        {
            for (int i = 0; i < Vector256<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.MaxValueOver2, Simd256<uint>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<uint>.MaxValueOver2}\nActual: {Simd256<uint>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MaxValueOver2_int()
        {
            for (int i = 0; i < Vector256<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.MaxValueOver2, Simd256<int>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<int>.MaxValueOver2}\nActual: {Simd256<int>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MaxValueOver2_ulong()
        {
            for (int i = 0; i < Vector256<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.MaxValueOver2, Simd256<ulong>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<ulong>.MaxValueOver2}\nActual: {Simd256<ulong>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MaxValueOver2_long()
        {
            for (int i = 0; i < Vector256<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.MaxValueOver2, Simd256<long>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<long>.MaxValueOver2}\nActual: {Simd256<long>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MaxValueOver2_float()
        {
            for (int i = 0; i < Vector256<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.MaxValueOver2, Simd256<float>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<float>.MaxValueOver2}\nActual: {Simd256<float>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd256_MaxValueOver2_double()
        {
            for (int i = 0; i < Vector256<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.MaxValueOver2, Simd256<double>.MaxValueOver2.GetElement(i)), $"\nExpected: {Scalar<double>.MaxValueOver2}\nActual: {Simd256<double>.MaxValueOver2.GetElement(i)}");
        }
        [Fact]
        public void Simd256_AllBitsSet_byte()
        {
            for (int i = 0; i < Vector256<byte>.Count; i++)
                Assert.True(AreEqual(Scalar<byte>.AllBitsSet, Simd256<byte>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<byte>.AllBitsSet}\nActual: {Simd256<byte>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd256_AllBitsSet_sbyte()
        {
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
                Assert.True(AreEqual(Scalar<sbyte>.AllBitsSet, Simd256<sbyte>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<sbyte>.AllBitsSet}\nActual: {Simd256<sbyte>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd256_AllBitsSet_ushort()
        {
            for (int i = 0; i < Vector256<ushort>.Count; i++)
                Assert.True(AreEqual(Scalar<ushort>.AllBitsSet, Simd256<ushort>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<ushort>.AllBitsSet}\nActual: {Simd256<ushort>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd256_AllBitsSet_short()
        {
            for (int i = 0; i < Vector256<short>.Count; i++)
                Assert.True(AreEqual(Scalar<short>.AllBitsSet, Simd256<short>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<short>.AllBitsSet}\nActual: {Simd256<short>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd256_AllBitsSet_uint()
        {
            for (int i = 0; i < Vector256<uint>.Count; i++)
                Assert.True(AreEqual(Scalar<uint>.AllBitsSet, Simd256<uint>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<uint>.AllBitsSet}\nActual: {Simd256<uint>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd256_AllBitsSet_int()
        {
            for (int i = 0; i < Vector256<int>.Count; i++)
                Assert.True(AreEqual(Scalar<int>.AllBitsSet, Simd256<int>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<int>.AllBitsSet}\nActual: {Simd256<int>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd256_AllBitsSet_ulong()
        {
            for (int i = 0; i < Vector256<ulong>.Count; i++)
                Assert.True(AreEqual(Scalar<ulong>.AllBitsSet, Simd256<ulong>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<ulong>.AllBitsSet}\nActual: {Simd256<ulong>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd256_AllBitsSet_long()
        {
            for (int i = 0; i < Vector256<long>.Count; i++)
                Assert.True(AreEqual(Scalar<long>.AllBitsSet, Simd256<long>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<long>.AllBitsSet}\nActual: {Simd256<long>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd256_AllBitsSet_float()
        {
            for (int i = 0; i < Vector256<float>.Count; i++)
                Assert.True(AreEqual(Scalar<float>.AllBitsSet, Simd256<float>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<float>.AllBitsSet}\nActual: {Simd256<float>.AllBitsSet.GetElement(i)}");
        }
        [Fact]
        public void Simd256_AllBitsSet_double()
        {
            for (int i = 0; i < Vector256<double>.Count; i++)
                Assert.True(AreEqual(Scalar<double>.AllBitsSet, Simd256<double>.AllBitsSet.GetElement(i)), $"\nExpected: {Scalar<double>.AllBitsSet}\nActual: {Simd256<double>.AllBitsSet.GetElement(i)}");
        }
    }

    // Vector x Vector -> Vector
    public unsafe class SimdTests_Vector_Vector_Vector
    {
        [Fact]
        public void Simd64_GreaterThan_byte()
        {
            Vector64<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.GreaterThan(a, b);
            for (int i = 0; i < Vector64<byte>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_GreaterThan_sbyte()
        {
            Vector64<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.GreaterThan(a, b);
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_GreaterThan_ushort()
        {
            Vector64<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.GreaterThan(a, b);
            for (int i = 0; i < Vector64<ushort>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_GreaterThan_short()
        {
            Vector64<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.GreaterThan(a, b);
            for (int i = 0; i < Vector64<short>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_GreaterThan_uint()
        {
            Vector64<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.GreaterThan(a, b);
            for (int i = 0; i < Vector64<uint>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_GreaterThan_int()
        {
            Vector64<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.GreaterThan(a, b);
            for (int i = 0; i < Vector64<int>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_GreaterThan_ulong()
        {
            Vector64<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.GreaterThan(a, b);
            for (int i = 0; i < Vector64<ulong>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_GreaterThan_long()
        {
            Vector64<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.GreaterThan(a, b);
            for (int i = 0; i < Vector64<long>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_GreaterThan_float()
        {
            Vector64<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.GreaterThan(a, b);
            for (int i = 0; i < Vector64<float>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_GreaterThan_double()
        {
            Vector64<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.GreaterThan(a, b);
            for (int i = 0; i < Vector64<double>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_LessThan_byte()
        {
            Vector64<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.LessThan(a, b);
            for (int i = 0; i < Vector64<byte>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_LessThan_sbyte()
        {
            Vector64<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.LessThan(a, b);
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_LessThan_ushort()
        {
            Vector64<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.LessThan(a, b);
            for (int i = 0; i < Vector64<ushort>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_LessThan_short()
        {
            Vector64<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.LessThan(a, b);
            for (int i = 0; i < Vector64<short>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_LessThan_uint()
        {
            Vector64<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.LessThan(a, b);
            for (int i = 0; i < Vector64<uint>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_LessThan_int()
        {
            Vector64<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.LessThan(a, b);
            for (int i = 0; i < Vector64<int>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_LessThan_ulong()
        {
            Vector64<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.LessThan(a, b);
            for (int i = 0; i < Vector64<ulong>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_LessThan_long()
        {
            Vector64<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.LessThan(a, b);
            for (int i = 0; i < Vector64<long>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_LessThan_float()
        {
            Vector64<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.LessThan(a, b);
            for (int i = 0; i < Vector64<float>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_LessThan_double()
        {
            Vector64<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.LessThan(a, b);
            for (int i = 0; i < Vector64<double>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_GreaterThanOrEqual_byte()
        {
            Vector64<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector64<byte>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_GreaterThanOrEqual_sbyte()
        {
            Vector64<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_GreaterThanOrEqual_ushort()
        {
            Vector64<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector64<ushort>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_GreaterThanOrEqual_short()
        {
            Vector64<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector64<short>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_GreaterThanOrEqual_uint()
        {
            Vector64<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector64<uint>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_GreaterThanOrEqual_int()
        {
            Vector64<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector64<int>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_GreaterThanOrEqual_ulong()
        {
            Vector64<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector64<ulong>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_GreaterThanOrEqual_long()
        {
            Vector64<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector64<long>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_GreaterThanOrEqual_float()
        {
            Vector64<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector64<float>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_GreaterThanOrEqual_double()
        {
            Vector64<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector64<double>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_LessThanOrEqual_byte()
        {
            Vector64<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector64<byte>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_LessThanOrEqual_sbyte()
        {
            Vector64<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_LessThanOrEqual_ushort()
        {
            Vector64<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector64<ushort>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_LessThanOrEqual_short()
        {
            Vector64<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector64<short>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_LessThanOrEqual_uint()
        {
            Vector64<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector64<uint>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_LessThanOrEqual_int()
        {
            Vector64<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector64<int>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_LessThanOrEqual_ulong()
        {
            Vector64<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector64<ulong>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_LessThanOrEqual_long()
        {
            Vector64<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector64<long>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_LessThanOrEqual_float()
        {
            Vector64<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector64<float>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_LessThanOrEqual_double()
        {
            Vector64<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector64<double>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Add_byte()
        {
            Vector64<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Add(a, b);
            for (int i = 0; i < Vector64<byte>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Add_sbyte()
        {
            Vector64<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Add(a, b);
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Add_ushort()
        {
            Vector64<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Add(a, b);
            for (int i = 0; i < Vector64<ushort>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Add_short()
        {
            Vector64<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Add(a, b);
            for (int i = 0; i < Vector64<short>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Add_uint()
        {
            Vector64<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Add(a, b);
            for (int i = 0; i < Vector64<uint>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Add_int()
        {
            Vector64<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Add(a, b);
            for (int i = 0; i < Vector64<int>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Add_ulong()
        {
            Vector64<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Add(a, b);
            for (int i = 0; i < Vector64<ulong>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Add_long()
        {
            Vector64<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Add(a, b);
            for (int i = 0; i < Vector64<long>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Add_float()
        {
            Vector64<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Add(a, b);
            for (int i = 0; i < Vector64<float>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Add_double()
        {
            Vector64<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Add(a, b);
            for (int i = 0; i < Vector64<double>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Subtract_byte()
        {
            Vector64<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Subtract(a, b);
            for (int i = 0; i < Vector64<byte>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Subtract_sbyte()
        {
            Vector64<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Subtract(a, b);
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Subtract_ushort()
        {
            Vector64<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Subtract(a, b);
            for (int i = 0; i < Vector64<ushort>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Subtract_short()
        {
            Vector64<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Subtract(a, b);
            for (int i = 0; i < Vector64<short>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Subtract_uint()
        {
            Vector64<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Subtract(a, b);
            for (int i = 0; i < Vector64<uint>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Subtract_int()
        {
            Vector64<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Subtract(a, b);
            for (int i = 0; i < Vector64<int>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Subtract_ulong()
        {
            Vector64<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Subtract(a, b);
            for (int i = 0; i < Vector64<ulong>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Subtract_long()
        {
            Vector64<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Subtract(a, b);
            for (int i = 0; i < Vector64<long>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Subtract_float()
        {
            Vector64<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Subtract(a, b);
            for (int i = 0; i < Vector64<float>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Subtract_double()
        {
            Vector64<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Subtract(a, b);
            for (int i = 0; i < Vector64<double>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Multiply_byte()
        {
            Vector64<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Multiply(a, b);
            for (int i = 0; i < Vector64<byte>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Multiply_sbyte()
        {
            Vector64<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Multiply(a, b);
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Multiply_ushort()
        {
            Vector64<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Multiply(a, b);
            for (int i = 0; i < Vector64<ushort>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Multiply_short()
        {
            Vector64<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Multiply(a, b);
            for (int i = 0; i < Vector64<short>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Multiply_uint()
        {
            Vector64<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Multiply(a, b);
            for (int i = 0; i < Vector64<uint>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Multiply_int()
        {
            Vector64<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Multiply(a, b);
            for (int i = 0; i < Vector64<int>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Multiply_ulong()
        {
            Vector64<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Multiply(a, b);
            for (int i = 0; i < Vector64<ulong>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Multiply_long()
        {
            Vector64<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Multiply(a, b);
            for (int i = 0; i < Vector64<long>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Multiply_float()
        {
            Vector64<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Multiply(a, b);
            for (int i = 0; i < Vector64<float>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Multiply_double()
        {
            Vector64<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Multiply(a, b);
            for (int i = 0; i < Vector64<double>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Divide_byte()
        {
            Vector64<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Divide(a, b);
            for (int i = 0; i < Vector64<byte>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Divide_sbyte()
        {
            Vector64<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Divide(a, b);
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Divide_ushort()
        {
            Vector64<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Divide(a, b);
            for (int i = 0; i < Vector64<ushort>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Divide_short()
        {
            Vector64<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Divide(a, b);
            for (int i = 0; i < Vector64<short>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Divide_uint()
        {
            Vector64<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Divide(a, b);
            for (int i = 0; i < Vector64<uint>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Divide_int()
        {
            Vector64<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Divide(a, b);
            for (int i = 0; i < Vector64<int>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Divide_ulong()
        {
            Vector64<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Divide(a, b);
            for (int i = 0; i < Vector64<ulong>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Divide_long()
        {
            Vector64<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Divide(a, b);
            for (int i = 0; i < Vector64<long>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Divide_float()
        {
            Vector64<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Divide(a, b);
            for (int i = 0; i < Vector64<float>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Divide_double()
        {
            Vector64<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Divide(a, b);
            for (int i = 0; i < Vector64<double>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_And_byte()
        {
            Vector64<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.And(a, b);
            for (int i = 0; i < Vector64<byte>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_And_sbyte()
        {
            Vector64<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.And(a, b);
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_And_ushort()
        {
            Vector64<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.And(a, b);
            for (int i = 0; i < Vector64<ushort>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_And_short()
        {
            Vector64<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.And(a, b);
            for (int i = 0; i < Vector64<short>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_And_uint()
        {
            Vector64<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.And(a, b);
            for (int i = 0; i < Vector64<uint>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_And_int()
        {
            Vector64<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.And(a, b);
            for (int i = 0; i < Vector64<int>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_And_ulong()
        {
            Vector64<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.And(a, b);
            for (int i = 0; i < Vector64<ulong>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_And_long()
        {
            Vector64<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.And(a, b);
            for (int i = 0; i < Vector64<long>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_And_float()
        {
            Vector64<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.And(a, b);
            for (int i = 0; i < Vector64<float>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_And_double()
        {
            Vector64<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.And(a, b);
            for (int i = 0; i < Vector64<double>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Xor_byte()
        {
            Vector64<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Xor(a, b);
            for (int i = 0; i < Vector64<byte>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Xor_sbyte()
        {
            Vector64<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Xor(a, b);
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Xor_ushort()
        {
            Vector64<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Xor(a, b);
            for (int i = 0; i < Vector64<ushort>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Xor_short()
        {
            Vector64<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Xor(a, b);
            for (int i = 0; i < Vector64<short>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Xor_uint()
        {
            Vector64<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Xor(a, b);
            for (int i = 0; i < Vector64<uint>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Xor_int()
        {
            Vector64<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Xor(a, b);
            for (int i = 0; i < Vector64<int>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Xor_ulong()
        {
            Vector64<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Xor(a, b);
            for (int i = 0; i < Vector64<ulong>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Xor_long()
        {
            Vector64<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Xor(a, b);
            for (int i = 0; i < Vector64<long>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Xor_float()
        {
            Vector64<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Xor(a, b);
            for (int i = 0; i < Vector64<float>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Xor_double()
        {
            Vector64<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Xor(a, b);
            for (int i = 0; i < Vector64<double>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Or_byte()
        {
            Vector64<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Or(a, b);
            for (int i = 0; i < Vector64<byte>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Or_sbyte()
        {
            Vector64<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Or(a, b);
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Or_ushort()
        {
            Vector64<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Or(a, b);
            for (int i = 0; i < Vector64<ushort>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Or_short()
        {
            Vector64<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Or(a, b);
            for (int i = 0; i < Vector64<short>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Or_uint()
        {
            Vector64<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Or(a, b);
            for (int i = 0; i < Vector64<uint>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Or_int()
        {
            Vector64<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Or(a, b);
            for (int i = 0; i < Vector64<int>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Or_ulong()
        {
            Vector64<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Or(a, b);
            for (int i = 0; i < Vector64<ulong>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Or_long()
        {
            Vector64<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Or(a, b);
            for (int i = 0; i < Vector64<long>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Or_float()
        {
            Vector64<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Or(a, b);
            for (int i = 0; i < Vector64<float>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Or_double()
        {
            Vector64<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Or(a, b);
            for (int i = 0; i < Vector64<double>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Min_byte()
        {
            Vector64<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Min(a, b);
            for (int i = 0; i < Vector64<byte>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Min_sbyte()
        {
            Vector64<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Min(a, b);
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Min_ushort()
        {
            Vector64<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Min(a, b);
            for (int i = 0; i < Vector64<ushort>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Min_short()
        {
            Vector64<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Min(a, b);
            for (int i = 0; i < Vector64<short>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Min_uint()
        {
            Vector64<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Min(a, b);
            for (int i = 0; i < Vector64<uint>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Min_int()
        {
            Vector64<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Min(a, b);
            for (int i = 0; i < Vector64<int>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Min_ulong()
        {
            Vector64<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Min(a, b);
            for (int i = 0; i < Vector64<ulong>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Min_long()
        {
            Vector64<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Min(a, b);
            for (int i = 0; i < Vector64<long>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Min_float()
        {
            Vector64<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Min(a, b);
            for (int i = 0; i < Vector64<float>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Min_double()
        {
            Vector64<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Min(a, b);
            for (int i = 0; i < Vector64<double>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Max_byte()
        {
            Vector64<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Max(a, b);
            for (int i = 0; i < Vector64<byte>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Max_sbyte()
        {
            Vector64<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Max(a, b);
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Max_ushort()
        {
            Vector64<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Max(a, b);
            for (int i = 0; i < Vector64<ushort>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Max_short()
        {
            Vector64<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Max(a, b);
            for (int i = 0; i < Vector64<short>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Max_uint()
        {
            Vector64<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Max(a, b);
            for (int i = 0; i < Vector64<uint>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Max_int()
        {
            Vector64<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Max(a, b);
            for (int i = 0; i < Vector64<int>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Max_ulong()
        {
            Vector64<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Max(a, b);
            for (int i = 0; i < Vector64<ulong>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Max_long()
        {
            Vector64<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Max(a, b);
            for (int i = 0; i < Vector64<long>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Max_float()
        {
            Vector64<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Max(a, b);
            for (int i = 0; i < Vector64<float>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Max_double()
        {
            Vector64<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Max(a, b);
            for (int i = 0; i < Vector64<double>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Equal_byte()
        {
            Vector64<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Equal(a, b);
            for (int i = 0; i < Vector64<byte>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Equal_sbyte()
        {
            Vector64<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Equal(a, b);
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Equal_ushort()
        {
            Vector64<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Equal(a, b);
            for (int i = 0; i < Vector64<ushort>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Equal_short()
        {
            Vector64<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Equal(a, b);
            for (int i = 0; i < Vector64<short>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Equal_uint()
        {
            Vector64<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Equal(a, b);
            for (int i = 0; i < Vector64<uint>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Equal_int()
        {
            Vector64<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Equal(a, b);
            for (int i = 0; i < Vector64<int>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Equal_ulong()
        {
            Vector64<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Equal(a, b);
            for (int i = 0; i < Vector64<ulong>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Equal_long()
        {
            Vector64<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Equal(a, b);
            for (int i = 0; i < Vector64<long>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Equal_float()
        {
            Vector64<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Equal(a, b);
            for (int i = 0; i < Vector64<float>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Equal_double()
        {
            Vector64<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.Equal(a, b);
            for (int i = 0; i < Vector64<double>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_NotEqual_byte()
        {
            Vector64<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.NotEqual(a, b);
            for (int i = 0; i < Vector64<byte>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_NotEqual_sbyte()
        {
            Vector64<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.NotEqual(a, b);
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_NotEqual_ushort()
        {
            Vector64<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.NotEqual(a, b);
            for (int i = 0; i < Vector64<ushort>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_NotEqual_short()
        {
            Vector64<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.NotEqual(a, b);
            for (int i = 0; i < Vector64<short>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_NotEqual_uint()
        {
            Vector64<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.NotEqual(a, b);
            for (int i = 0; i < Vector64<uint>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_NotEqual_int()
        {
            Vector64<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.NotEqual(a, b);
            for (int i = 0; i < Vector64<int>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_NotEqual_ulong()
        {
            Vector64<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.NotEqual(a, b);
            for (int i = 0; i < Vector64<ulong>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_NotEqual_long()
        {
            Vector64<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.NotEqual(a, b);
            for (int i = 0; i < Vector64<long>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_NotEqual_float()
        {
            Vector64<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.NotEqual(a, b);
            for (int i = 0; i < Vector64<float>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_NotEqual_double()
        {
            Vector64<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            SimdTestsUtils.FillWithRandomData(&b, 8);
            var actual = Simd64.NotEqual(a, b);
            for (int i = 0; i < Vector64<double>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_GreaterThan_byte()
        {
            Vector128<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.GreaterThan(a, b);
            for (int i = 0; i < Vector128<byte>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_GreaterThan_sbyte()
        {
            Vector128<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.GreaterThan(a, b);
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_GreaterThan_ushort()
        {
            Vector128<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.GreaterThan(a, b);
            for (int i = 0; i < Vector128<ushort>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_GreaterThan_short()
        {
            Vector128<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.GreaterThan(a, b);
            for (int i = 0; i < Vector128<short>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_GreaterThan_uint()
        {
            Vector128<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.GreaterThan(a, b);
            for (int i = 0; i < Vector128<uint>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_GreaterThan_int()
        {
            Vector128<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.GreaterThan(a, b);
            for (int i = 0; i < Vector128<int>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_GreaterThan_ulong()
        {
            Vector128<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.GreaterThan(a, b);
            for (int i = 0; i < Vector128<ulong>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_GreaterThan_long()
        {
            Vector128<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.GreaterThan(a, b);
            for (int i = 0; i < Vector128<long>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_GreaterThan_float()
        {
            Vector128<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.GreaterThan(a, b);
            for (int i = 0; i < Vector128<float>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_GreaterThan_double()
        {
            Vector128<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.GreaterThan(a, b);
            for (int i = 0; i < Vector128<double>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_LessThan_byte()
        {
            Vector128<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.LessThan(a, b);
            for (int i = 0; i < Vector128<byte>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_LessThan_sbyte()
        {
            Vector128<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.LessThan(a, b);
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_LessThan_ushort()
        {
            Vector128<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.LessThan(a, b);
            for (int i = 0; i < Vector128<ushort>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_LessThan_short()
        {
            Vector128<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.LessThan(a, b);
            for (int i = 0; i < Vector128<short>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_LessThan_uint()
        {
            Vector128<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.LessThan(a, b);
            for (int i = 0; i < Vector128<uint>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_LessThan_int()
        {
            Vector128<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.LessThan(a, b);
            for (int i = 0; i < Vector128<int>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_LessThan_ulong()
        {
            Vector128<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.LessThan(a, b);
            for (int i = 0; i < Vector128<ulong>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_LessThan_long()
        {
            Vector128<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.LessThan(a, b);
            for (int i = 0; i < Vector128<long>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_LessThan_float()
        {
            Vector128<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.LessThan(a, b);
            for (int i = 0; i < Vector128<float>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_LessThan_double()
        {
            Vector128<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.LessThan(a, b);
            for (int i = 0; i < Vector128<double>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_GreaterThanOrEqual_byte()
        {
            Vector128<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector128<byte>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_GreaterThanOrEqual_sbyte()
        {
            Vector128<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_GreaterThanOrEqual_ushort()
        {
            Vector128<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector128<ushort>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_GreaterThanOrEqual_short()
        {
            Vector128<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector128<short>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_GreaterThanOrEqual_uint()
        {
            Vector128<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector128<uint>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_GreaterThanOrEqual_int()
        {
            Vector128<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector128<int>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_GreaterThanOrEqual_ulong()
        {
            Vector128<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector128<ulong>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_GreaterThanOrEqual_long()
        {
            Vector128<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector128<long>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_GreaterThanOrEqual_float()
        {
            Vector128<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector128<float>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_GreaterThanOrEqual_double()
        {
            Vector128<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector128<double>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_LessThanOrEqual_byte()
        {
            Vector128<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector128<byte>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_LessThanOrEqual_sbyte()
        {
            Vector128<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_LessThanOrEqual_ushort()
        {
            Vector128<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector128<ushort>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_LessThanOrEqual_short()
        {
            Vector128<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector128<short>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_LessThanOrEqual_uint()
        {
            Vector128<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector128<uint>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_LessThanOrEqual_int()
        {
            Vector128<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector128<int>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_LessThanOrEqual_ulong()
        {
            Vector128<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector128<ulong>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_LessThanOrEqual_long()
        {
            Vector128<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector128<long>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_LessThanOrEqual_float()
        {
            Vector128<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector128<float>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_LessThanOrEqual_double()
        {
            Vector128<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector128<double>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Add_byte()
        {
            Vector128<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Add(a, b);
            for (int i = 0; i < Vector128<byte>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Add_sbyte()
        {
            Vector128<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Add(a, b);
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Add_ushort()
        {
            Vector128<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Add(a, b);
            for (int i = 0; i < Vector128<ushort>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Add_short()
        {
            Vector128<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Add(a, b);
            for (int i = 0; i < Vector128<short>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Add_uint()
        {
            Vector128<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Add(a, b);
            for (int i = 0; i < Vector128<uint>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Add_int()
        {
            Vector128<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Add(a, b);
            for (int i = 0; i < Vector128<int>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Add_ulong()
        {
            Vector128<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Add(a, b);
            for (int i = 0; i < Vector128<ulong>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Add_long()
        {
            Vector128<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Add(a, b);
            for (int i = 0; i < Vector128<long>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Add_float()
        {
            Vector128<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Add(a, b);
            for (int i = 0; i < Vector128<float>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Add_double()
        {
            Vector128<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Add(a, b);
            for (int i = 0; i < Vector128<double>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Subtract_byte()
        {
            Vector128<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Subtract(a, b);
            for (int i = 0; i < Vector128<byte>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Subtract_sbyte()
        {
            Vector128<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Subtract(a, b);
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Subtract_ushort()
        {
            Vector128<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Subtract(a, b);
            for (int i = 0; i < Vector128<ushort>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Subtract_short()
        {
            Vector128<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Subtract(a, b);
            for (int i = 0; i < Vector128<short>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Subtract_uint()
        {
            Vector128<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Subtract(a, b);
            for (int i = 0; i < Vector128<uint>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Subtract_int()
        {
            Vector128<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Subtract(a, b);
            for (int i = 0; i < Vector128<int>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Subtract_ulong()
        {
            Vector128<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Subtract(a, b);
            for (int i = 0; i < Vector128<ulong>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Subtract_long()
        {
            Vector128<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Subtract(a, b);
            for (int i = 0; i < Vector128<long>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Subtract_float()
        {
            Vector128<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Subtract(a, b);
            for (int i = 0; i < Vector128<float>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Subtract_double()
        {
            Vector128<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Subtract(a, b);
            for (int i = 0; i < Vector128<double>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Multiply_byte()
        {
            Vector128<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Multiply(a, b);
            for (int i = 0; i < Vector128<byte>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Multiply_sbyte()
        {
            Vector128<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Multiply(a, b);
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Multiply_ushort()
        {
            Vector128<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Multiply(a, b);
            for (int i = 0; i < Vector128<ushort>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Multiply_short()
        {
            Vector128<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Multiply(a, b);
            for (int i = 0; i < Vector128<short>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Multiply_uint()
        {
            Vector128<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Multiply(a, b);
            for (int i = 0; i < Vector128<uint>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Multiply_int()
        {
            Vector128<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Multiply(a, b);
            for (int i = 0; i < Vector128<int>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Multiply_ulong()
        {
            Vector128<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Multiply(a, b);
            for (int i = 0; i < Vector128<ulong>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Multiply_long()
        {
            Vector128<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Multiply(a, b);
            for (int i = 0; i < Vector128<long>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Multiply_float()
        {
            Vector128<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Multiply(a, b);
            for (int i = 0; i < Vector128<float>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Multiply_double()
        {
            Vector128<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Multiply(a, b);
            for (int i = 0; i < Vector128<double>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Divide_byte()
        {
            Vector128<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Divide(a, b);
            for (int i = 0; i < Vector128<byte>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Divide_sbyte()
        {
            Vector128<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Divide(a, b);
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Divide_ushort()
        {
            Vector128<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Divide(a, b);
            for (int i = 0; i < Vector128<ushort>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Divide_short()
        {
            Vector128<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Divide(a, b);
            for (int i = 0; i < Vector128<short>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Divide_uint()
        {
            Vector128<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Divide(a, b);
            for (int i = 0; i < Vector128<uint>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Divide_int()
        {
            Vector128<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Divide(a, b);
            for (int i = 0; i < Vector128<int>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Divide_ulong()
        {
            Vector128<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Divide(a, b);
            for (int i = 0; i < Vector128<ulong>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Divide_long()
        {
            Vector128<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Divide(a, b);
            for (int i = 0; i < Vector128<long>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Divide_float()
        {
            Vector128<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Divide(a, b);
            for (int i = 0; i < Vector128<float>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Divide_double()
        {
            Vector128<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Divide(a, b);
            for (int i = 0; i < Vector128<double>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_And_byte()
        {
            Vector128<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.And(a, b);
            for (int i = 0; i < Vector128<byte>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_And_sbyte()
        {
            Vector128<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.And(a, b);
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_And_ushort()
        {
            Vector128<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.And(a, b);
            for (int i = 0; i < Vector128<ushort>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_And_short()
        {
            Vector128<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.And(a, b);
            for (int i = 0; i < Vector128<short>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_And_uint()
        {
            Vector128<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.And(a, b);
            for (int i = 0; i < Vector128<uint>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_And_int()
        {
            Vector128<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.And(a, b);
            for (int i = 0; i < Vector128<int>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_And_ulong()
        {
            Vector128<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.And(a, b);
            for (int i = 0; i < Vector128<ulong>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_And_long()
        {
            Vector128<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.And(a, b);
            for (int i = 0; i < Vector128<long>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_And_float()
        {
            Vector128<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.And(a, b);
            for (int i = 0; i < Vector128<float>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_And_double()
        {
            Vector128<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.And(a, b);
            for (int i = 0; i < Vector128<double>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Xor_byte()
        {
            Vector128<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Xor(a, b);
            for (int i = 0; i < Vector128<byte>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Xor_sbyte()
        {
            Vector128<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Xor(a, b);
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Xor_ushort()
        {
            Vector128<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Xor(a, b);
            for (int i = 0; i < Vector128<ushort>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Xor_short()
        {
            Vector128<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Xor(a, b);
            for (int i = 0; i < Vector128<short>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Xor_uint()
        {
            Vector128<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Xor(a, b);
            for (int i = 0; i < Vector128<uint>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Xor_int()
        {
            Vector128<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Xor(a, b);
            for (int i = 0; i < Vector128<int>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Xor_ulong()
        {
            Vector128<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Xor(a, b);
            for (int i = 0; i < Vector128<ulong>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Xor_long()
        {
            Vector128<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Xor(a, b);
            for (int i = 0; i < Vector128<long>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Xor_float()
        {
            Vector128<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Xor(a, b);
            for (int i = 0; i < Vector128<float>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Xor_double()
        {
            Vector128<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Xor(a, b);
            for (int i = 0; i < Vector128<double>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Or_byte()
        {
            Vector128<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Or(a, b);
            for (int i = 0; i < Vector128<byte>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Or_sbyte()
        {
            Vector128<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Or(a, b);
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Or_ushort()
        {
            Vector128<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Or(a, b);
            for (int i = 0; i < Vector128<ushort>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Or_short()
        {
            Vector128<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Or(a, b);
            for (int i = 0; i < Vector128<short>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Or_uint()
        {
            Vector128<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Or(a, b);
            for (int i = 0; i < Vector128<uint>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Or_int()
        {
            Vector128<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Or(a, b);
            for (int i = 0; i < Vector128<int>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Or_ulong()
        {
            Vector128<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Or(a, b);
            for (int i = 0; i < Vector128<ulong>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Or_long()
        {
            Vector128<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Or(a, b);
            for (int i = 0; i < Vector128<long>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Or_float()
        {
            Vector128<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Or(a, b);
            for (int i = 0; i < Vector128<float>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Or_double()
        {
            Vector128<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Or(a, b);
            for (int i = 0; i < Vector128<double>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Min_byte()
        {
            Vector128<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Min(a, b);
            for (int i = 0; i < Vector128<byte>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Min_sbyte()
        {
            Vector128<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Min(a, b);
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Min_ushort()
        {
            Vector128<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Min(a, b);
            for (int i = 0; i < Vector128<ushort>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Min_short()
        {
            Vector128<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Min(a, b);
            for (int i = 0; i < Vector128<short>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Min_uint()
        {
            Vector128<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Min(a, b);
            for (int i = 0; i < Vector128<uint>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Min_int()
        {
            Vector128<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Min(a, b);
            for (int i = 0; i < Vector128<int>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Min_ulong()
        {
            Vector128<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Min(a, b);
            for (int i = 0; i < Vector128<ulong>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Min_long()
        {
            Vector128<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Min(a, b);
            for (int i = 0; i < Vector128<long>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Min_float()
        {
            Vector128<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Min(a, b);
            for (int i = 0; i < Vector128<float>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Min_double()
        {
            Vector128<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Min(a, b);
            for (int i = 0; i < Vector128<double>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Max_byte()
        {
            Vector128<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Max(a, b);
            for (int i = 0; i < Vector128<byte>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Max_sbyte()
        {
            Vector128<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Max(a, b);
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Max_ushort()
        {
            Vector128<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Max(a, b);
            for (int i = 0; i < Vector128<ushort>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Max_short()
        {
            Vector128<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Max(a, b);
            for (int i = 0; i < Vector128<short>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Max_uint()
        {
            Vector128<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Max(a, b);
            for (int i = 0; i < Vector128<uint>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Max_int()
        {
            Vector128<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Max(a, b);
            for (int i = 0; i < Vector128<int>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Max_ulong()
        {
            Vector128<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Max(a, b);
            for (int i = 0; i < Vector128<ulong>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Max_long()
        {
            Vector128<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Max(a, b);
            for (int i = 0; i < Vector128<long>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Max_float()
        {
            Vector128<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Max(a, b);
            for (int i = 0; i < Vector128<float>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Max_double()
        {
            Vector128<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Max(a, b);
            for (int i = 0; i < Vector128<double>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Equal_byte()
        {
            Vector128<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Equal(a, b);
            for (int i = 0; i < Vector128<byte>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Equal_sbyte()
        {
            Vector128<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Equal(a, b);
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Equal_ushort()
        {
            Vector128<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Equal(a, b);
            for (int i = 0; i < Vector128<ushort>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Equal_short()
        {
            Vector128<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Equal(a, b);
            for (int i = 0; i < Vector128<short>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Equal_uint()
        {
            Vector128<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Equal(a, b);
            for (int i = 0; i < Vector128<uint>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Equal_int()
        {
            Vector128<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Equal(a, b);
            for (int i = 0; i < Vector128<int>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Equal_ulong()
        {
            Vector128<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Equal(a, b);
            for (int i = 0; i < Vector128<ulong>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Equal_long()
        {
            Vector128<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Equal(a, b);
            for (int i = 0; i < Vector128<long>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Equal_float()
        {
            Vector128<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Equal(a, b);
            for (int i = 0; i < Vector128<float>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Equal_double()
        {
            Vector128<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.Equal(a, b);
            for (int i = 0; i < Vector128<double>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_NotEqual_byte()
        {
            Vector128<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.NotEqual(a, b);
            for (int i = 0; i < Vector128<byte>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_NotEqual_sbyte()
        {
            Vector128<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.NotEqual(a, b);
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_NotEqual_ushort()
        {
            Vector128<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.NotEqual(a, b);
            for (int i = 0; i < Vector128<ushort>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_NotEqual_short()
        {
            Vector128<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.NotEqual(a, b);
            for (int i = 0; i < Vector128<short>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_NotEqual_uint()
        {
            Vector128<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.NotEqual(a, b);
            for (int i = 0; i < Vector128<uint>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_NotEqual_int()
        {
            Vector128<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.NotEqual(a, b);
            for (int i = 0; i < Vector128<int>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_NotEqual_ulong()
        {
            Vector128<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.NotEqual(a, b);
            for (int i = 0; i < Vector128<ulong>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_NotEqual_long()
        {
            Vector128<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.NotEqual(a, b);
            for (int i = 0; i < Vector128<long>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_NotEqual_float()
        {
            Vector128<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.NotEqual(a, b);
            for (int i = 0; i < Vector128<float>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_NotEqual_double()
        {
            Vector128<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            SimdTestsUtils.FillWithRandomData(&b, 16);
            var actual = Simd128.NotEqual(a, b);
            for (int i = 0; i < Vector128<double>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_GreaterThan_byte()
        {
            Vector256<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.GreaterThan(a, b);
            for (int i = 0; i < Vector256<byte>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_GreaterThan_sbyte()
        {
            Vector256<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.GreaterThan(a, b);
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_GreaterThan_ushort()
        {
            Vector256<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.GreaterThan(a, b);
            for (int i = 0; i < Vector256<ushort>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_GreaterThan_short()
        {
            Vector256<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.GreaterThan(a, b);
            for (int i = 0; i < Vector256<short>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_GreaterThan_uint()
        {
            Vector256<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.GreaterThan(a, b);
            for (int i = 0; i < Vector256<uint>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_GreaterThan_int()
        {
            Vector256<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.GreaterThan(a, b);
            for (int i = 0; i < Vector256<int>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_GreaterThan_ulong()
        {
            Vector256<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.GreaterThan(a, b);
            for (int i = 0; i < Vector256<ulong>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_GreaterThan_long()
        {
            Vector256<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.GreaterThan(a, b);
            for (int i = 0; i < Vector256<long>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_GreaterThan_float()
        {
            Vector256<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.GreaterThan(a, b);
            for (int i = 0; i < Vector256<float>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_GreaterThan_double()
        {
            Vector256<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.GreaterThan(a, b);
            for (int i = 0; i < Vector256<double>.Count; i++)
            {
                var expected = Scalar.GreaterThan(a.GetElement(i), b.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_LessThan_byte()
        {
            Vector256<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.LessThan(a, b);
            for (int i = 0; i < Vector256<byte>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_LessThan_sbyte()
        {
            Vector256<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.LessThan(a, b);
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_LessThan_ushort()
        {
            Vector256<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.LessThan(a, b);
            for (int i = 0; i < Vector256<ushort>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_LessThan_short()
        {
            Vector256<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.LessThan(a, b);
            for (int i = 0; i < Vector256<short>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_LessThan_uint()
        {
            Vector256<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.LessThan(a, b);
            for (int i = 0; i < Vector256<uint>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_LessThan_int()
        {
            Vector256<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.LessThan(a, b);
            for (int i = 0; i < Vector256<int>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_LessThan_ulong()
        {
            Vector256<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.LessThan(a, b);
            for (int i = 0; i < Vector256<ulong>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_LessThan_long()
        {
            Vector256<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.LessThan(a, b);
            for (int i = 0; i < Vector256<long>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_LessThan_float()
        {
            Vector256<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.LessThan(a, b);
            for (int i = 0; i < Vector256<float>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_LessThan_double()
        {
            Vector256<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.LessThan(a, b);
            for (int i = 0; i < Vector256<double>.Count; i++)
            {
                var expected = Scalar.LessThan(a.GetElement(i), b.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_GreaterThanOrEqual_byte()
        {
            Vector256<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector256<byte>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_GreaterThanOrEqual_sbyte()
        {
            Vector256<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_GreaterThanOrEqual_ushort()
        {
            Vector256<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector256<ushort>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_GreaterThanOrEqual_short()
        {
            Vector256<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector256<short>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_GreaterThanOrEqual_uint()
        {
            Vector256<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector256<uint>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_GreaterThanOrEqual_int()
        {
            Vector256<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector256<int>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_GreaterThanOrEqual_ulong()
        {
            Vector256<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector256<ulong>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_GreaterThanOrEqual_long()
        {
            Vector256<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector256<long>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_GreaterThanOrEqual_float()
        {
            Vector256<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector256<float>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_GreaterThanOrEqual_double()
        {
            Vector256<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.GreaterThanOrEqual(a, b);
            for (int i = 0; i < Vector256<double>.Count; i++)
            {
                var expected = Scalar.GreaterThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_LessThanOrEqual_byte()
        {
            Vector256<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector256<byte>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_LessThanOrEqual_sbyte()
        {
            Vector256<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_LessThanOrEqual_ushort()
        {
            Vector256<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector256<ushort>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_LessThanOrEqual_short()
        {
            Vector256<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector256<short>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_LessThanOrEqual_uint()
        {
            Vector256<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector256<uint>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_LessThanOrEqual_int()
        {
            Vector256<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector256<int>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_LessThanOrEqual_ulong()
        {
            Vector256<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector256<ulong>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_LessThanOrEqual_long()
        {
            Vector256<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector256<long>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_LessThanOrEqual_float()
        {
            Vector256<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector256<float>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_LessThanOrEqual_double()
        {
            Vector256<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.LessThanOrEqual(a, b);
            for (int i = 0; i < Vector256<double>.Count; i++)
            {
                var expected = Scalar.LessThanOrEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Add_byte()
        {
            Vector256<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Add(a, b);
            for (int i = 0; i < Vector256<byte>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Add_sbyte()
        {
            Vector256<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Add(a, b);
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Add_ushort()
        {
            Vector256<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Add(a, b);
            for (int i = 0; i < Vector256<ushort>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Add_short()
        {
            Vector256<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Add(a, b);
            for (int i = 0; i < Vector256<short>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Add_uint()
        {
            Vector256<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Add(a, b);
            for (int i = 0; i < Vector256<uint>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Add_int()
        {
            Vector256<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Add(a, b);
            for (int i = 0; i < Vector256<int>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Add_ulong()
        {
            Vector256<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Add(a, b);
            for (int i = 0; i < Vector256<ulong>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Add_long()
        {
            Vector256<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Add(a, b);
            for (int i = 0; i < Vector256<long>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Add_float()
        {
            Vector256<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Add(a, b);
            for (int i = 0; i < Vector256<float>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Add_double()
        {
            Vector256<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Add(a, b);
            for (int i = 0; i < Vector256<double>.Count; i++)
            {
                var expected = Scalar.Add(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Subtract_byte()
        {
            Vector256<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Subtract(a, b);
            for (int i = 0; i < Vector256<byte>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Subtract_sbyte()
        {
            Vector256<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Subtract(a, b);
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Subtract_ushort()
        {
            Vector256<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Subtract(a, b);
            for (int i = 0; i < Vector256<ushort>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Subtract_short()
        {
            Vector256<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Subtract(a, b);
            for (int i = 0; i < Vector256<short>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Subtract_uint()
        {
            Vector256<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Subtract(a, b);
            for (int i = 0; i < Vector256<uint>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Subtract_int()
        {
            Vector256<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Subtract(a, b);
            for (int i = 0; i < Vector256<int>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Subtract_ulong()
        {
            Vector256<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Subtract(a, b);
            for (int i = 0; i < Vector256<ulong>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Subtract_long()
        {
            Vector256<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Subtract(a, b);
            for (int i = 0; i < Vector256<long>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Subtract_float()
        {
            Vector256<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Subtract(a, b);
            for (int i = 0; i < Vector256<float>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Subtract_double()
        {
            Vector256<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Subtract(a, b);
            for (int i = 0; i < Vector256<double>.Count; i++)
            {
                var expected = Scalar.Subtract(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Multiply_byte()
        {
            Vector256<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Multiply(a, b);
            for (int i = 0; i < Vector256<byte>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Multiply_sbyte()
        {
            Vector256<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Multiply(a, b);
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Multiply_ushort()
        {
            Vector256<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Multiply(a, b);
            for (int i = 0; i < Vector256<ushort>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Multiply_short()
        {
            Vector256<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Multiply(a, b);
            for (int i = 0; i < Vector256<short>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Multiply_uint()
        {
            Vector256<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Multiply(a, b);
            for (int i = 0; i < Vector256<uint>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Multiply_int()
        {
            Vector256<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Multiply(a, b);
            for (int i = 0; i < Vector256<int>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Multiply_ulong()
        {
            Vector256<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Multiply(a, b);
            for (int i = 0; i < Vector256<ulong>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Multiply_long()
        {
            Vector256<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Multiply(a, b);
            for (int i = 0; i < Vector256<long>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Multiply_float()
        {
            Vector256<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Multiply(a, b);
            for (int i = 0; i < Vector256<float>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Multiply_double()
        {
            Vector256<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Multiply(a, b);
            for (int i = 0; i < Vector256<double>.Count; i++)
            {
                var expected = Scalar.Multiply(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Divide_byte()
        {
            Vector256<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Divide(a, b);
            for (int i = 0; i < Vector256<byte>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Divide_sbyte()
        {
            Vector256<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Divide(a, b);
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Divide_ushort()
        {
            Vector256<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Divide(a, b);
            for (int i = 0; i < Vector256<ushort>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Divide_short()
        {
            Vector256<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Divide(a, b);
            for (int i = 0; i < Vector256<short>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Divide_uint()
        {
            Vector256<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Divide(a, b);
            for (int i = 0; i < Vector256<uint>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Divide_int()
        {
            Vector256<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Divide(a, b);
            for (int i = 0; i < Vector256<int>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Divide_ulong()
        {
            Vector256<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Divide(a, b);
            for (int i = 0; i < Vector256<ulong>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Divide_long()
        {
            Vector256<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Divide(a, b);
            for (int i = 0; i < Vector256<long>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Divide_float()
        {
            Vector256<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Divide(a, b);
            for (int i = 0; i < Vector256<float>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Divide_double()
        {
            Vector256<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Divide(a, b);
            for (int i = 0; i < Vector256<double>.Count; i++)
            {
                var expected = Scalar.Divide(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_And_byte()
        {
            Vector256<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.And(a, b);
            for (int i = 0; i < Vector256<byte>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_And_sbyte()
        {
            Vector256<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.And(a, b);
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_And_ushort()
        {
            Vector256<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.And(a, b);
            for (int i = 0; i < Vector256<ushort>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_And_short()
        {
            Vector256<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.And(a, b);
            for (int i = 0; i < Vector256<short>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_And_uint()
        {
            Vector256<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.And(a, b);
            for (int i = 0; i < Vector256<uint>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_And_int()
        {
            Vector256<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.And(a, b);
            for (int i = 0; i < Vector256<int>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_And_ulong()
        {
            Vector256<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.And(a, b);
            for (int i = 0; i < Vector256<ulong>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_And_long()
        {
            Vector256<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.And(a, b);
            for (int i = 0; i < Vector256<long>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_And_float()
        {
            Vector256<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.And(a, b);
            for (int i = 0; i < Vector256<float>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_And_double()
        {
            Vector256<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.And(a, b);
            for (int i = 0; i < Vector256<double>.Count; i++)
            {
                var expected = Scalar.And(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Xor_byte()
        {
            Vector256<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Xor(a, b);
            for (int i = 0; i < Vector256<byte>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Xor_sbyte()
        {
            Vector256<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Xor(a, b);
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Xor_ushort()
        {
            Vector256<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Xor(a, b);
            for (int i = 0; i < Vector256<ushort>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Xor_short()
        {
            Vector256<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Xor(a, b);
            for (int i = 0; i < Vector256<short>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Xor_uint()
        {
            Vector256<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Xor(a, b);
            for (int i = 0; i < Vector256<uint>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Xor_int()
        {
            Vector256<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Xor(a, b);
            for (int i = 0; i < Vector256<int>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Xor_ulong()
        {
            Vector256<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Xor(a, b);
            for (int i = 0; i < Vector256<ulong>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Xor_long()
        {
            Vector256<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Xor(a, b);
            for (int i = 0; i < Vector256<long>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Xor_float()
        {
            Vector256<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Xor(a, b);
            for (int i = 0; i < Vector256<float>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Xor_double()
        {
            Vector256<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Xor(a, b);
            for (int i = 0; i < Vector256<double>.Count; i++)
            {
                var expected = Scalar.Xor(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Or_byte()
        {
            Vector256<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Or(a, b);
            for (int i = 0; i < Vector256<byte>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Or_sbyte()
        {
            Vector256<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Or(a, b);
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Or_ushort()
        {
            Vector256<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Or(a, b);
            for (int i = 0; i < Vector256<ushort>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Or_short()
        {
            Vector256<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Or(a, b);
            for (int i = 0; i < Vector256<short>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Or_uint()
        {
            Vector256<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Or(a, b);
            for (int i = 0; i < Vector256<uint>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Or_int()
        {
            Vector256<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Or(a, b);
            for (int i = 0; i < Vector256<int>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Or_ulong()
        {
            Vector256<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Or(a, b);
            for (int i = 0; i < Vector256<ulong>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Or_long()
        {
            Vector256<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Or(a, b);
            for (int i = 0; i < Vector256<long>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Or_float()
        {
            Vector256<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Or(a, b);
            for (int i = 0; i < Vector256<float>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Or_double()
        {
            Vector256<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Or(a, b);
            for (int i = 0; i < Vector256<double>.Count; i++)
            {
                var expected = Scalar.Or(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Min_byte()
        {
            Vector256<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Min(a, b);
            for (int i = 0; i < Vector256<byte>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Min_sbyte()
        {
            Vector256<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Min(a, b);
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Min_ushort()
        {
            Vector256<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Min(a, b);
            for (int i = 0; i < Vector256<ushort>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Min_short()
        {
            Vector256<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Min(a, b);
            for (int i = 0; i < Vector256<short>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Min_uint()
        {
            Vector256<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Min(a, b);
            for (int i = 0; i < Vector256<uint>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Min_int()
        {
            Vector256<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Min(a, b);
            for (int i = 0; i < Vector256<int>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Min_ulong()
        {
            Vector256<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Min(a, b);
            for (int i = 0; i < Vector256<ulong>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Min_long()
        {
            Vector256<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Min(a, b);
            for (int i = 0; i < Vector256<long>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Min_float()
        {
            Vector256<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Min(a, b);
            for (int i = 0; i < Vector256<float>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Min_double()
        {
            Vector256<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Min(a, b);
            for (int i = 0; i < Vector256<double>.Count; i++)
            {
                var expected = Scalar.Min(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Max_byte()
        {
            Vector256<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Max(a, b);
            for (int i = 0; i < Vector256<byte>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Max_sbyte()
        {
            Vector256<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Max(a, b);
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Max_ushort()
        {
            Vector256<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Max(a, b);
            for (int i = 0; i < Vector256<ushort>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Max_short()
        {
            Vector256<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Max(a, b);
            for (int i = 0; i < Vector256<short>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Max_uint()
        {
            Vector256<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Max(a, b);
            for (int i = 0; i < Vector256<uint>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Max_int()
        {
            Vector256<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Max(a, b);
            for (int i = 0; i < Vector256<int>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Max_ulong()
        {
            Vector256<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Max(a, b);
            for (int i = 0; i < Vector256<ulong>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Max_long()
        {
            Vector256<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Max(a, b);
            for (int i = 0; i < Vector256<long>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Max_float()
        {
            Vector256<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Max(a, b);
            for (int i = 0; i < Vector256<float>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Max_double()
        {
            Vector256<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Max(a, b);
            for (int i = 0; i < Vector256<double>.Count; i++)
            {
                var expected = Scalar.Max(a.GetElement(i), b.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Equal_byte()
        {
            Vector256<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Equal(a, b);
            for (int i = 0; i < Vector256<byte>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Equal_sbyte()
        {
            Vector256<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Equal(a, b);
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Equal_ushort()
        {
            Vector256<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Equal(a, b);
            for (int i = 0; i < Vector256<ushort>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Equal_short()
        {
            Vector256<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Equal(a, b);
            for (int i = 0; i < Vector256<short>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Equal_uint()
        {
            Vector256<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Equal(a, b);
            for (int i = 0; i < Vector256<uint>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Equal_int()
        {
            Vector256<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Equal(a, b);
            for (int i = 0; i < Vector256<int>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Equal_ulong()
        {
            Vector256<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Equal(a, b);
            for (int i = 0; i < Vector256<ulong>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Equal_long()
        {
            Vector256<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Equal(a, b);
            for (int i = 0; i < Vector256<long>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Equal_float()
        {
            Vector256<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Equal(a, b);
            for (int i = 0; i < Vector256<float>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Equal_double()
        {
            Vector256<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.Equal(a, b);
            for (int i = 0; i < Vector256<double>.Count; i++)
            {
                var expected = Scalar.Equal(a.GetElement(i), b.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_NotEqual_byte()
        {
            Vector256<byte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.NotEqual(a, b);
            for (int i = 0; i < Vector256<byte>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_NotEqual_sbyte()
        {
            Vector256<sbyte> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.NotEqual(a, b);
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_NotEqual_ushort()
        {
            Vector256<ushort> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.NotEqual(a, b);
            for (int i = 0; i < Vector256<ushort>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_NotEqual_short()
        {
            Vector256<short> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.NotEqual(a, b);
            for (int i = 0; i < Vector256<short>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_NotEqual_uint()
        {
            Vector256<uint> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.NotEqual(a, b);
            for (int i = 0; i < Vector256<uint>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_NotEqual_int()
        {
            Vector256<int> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.NotEqual(a, b);
            for (int i = 0; i < Vector256<int>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_NotEqual_ulong()
        {
            Vector256<ulong> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.NotEqual(a, b);
            for (int i = 0; i < Vector256<ulong>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_NotEqual_long()
        {
            Vector256<long> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.NotEqual(a, b);
            for (int i = 0; i < Vector256<long>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_NotEqual_float()
        {
            Vector256<float> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.NotEqual(a, b);
            for (int i = 0; i < Vector256<float>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_NotEqual_double()
        {
            Vector256<double> a, b;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            SimdTestsUtils.FillWithRandomData(&b, 32);
            var actual = Simd256.NotEqual(a, b);
            for (int i = 0; i < Vector256<double>.Count; i++)
            {
                var expected = Scalar.NotEqual(a.GetElement(i), b.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nb[i]: {b.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
    }


    // Vector -> Vector
    public unsafe class SimdTests_Vector_Vector
    {
        [Fact]
        public void Simd64_Not_byte()
        {
            Vector64<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.Not(a);
            for (int i = 0; i < Vector64<byte>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Not_sbyte()
        {
            Vector64<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.Not(a);
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Not_ushort()
        {
            Vector64<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.Not(a);
            for (int i = 0; i < Vector64<ushort>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Not_short()
        {
            Vector64<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.Not(a);
            for (int i = 0; i < Vector64<short>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Not_uint()
        {
            Vector64<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.Not(a);
            for (int i = 0; i < Vector64<uint>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Not_int()
        {
            Vector64<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.Not(a);
            for (int i = 0; i < Vector64<int>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Not_ulong()
        {
            Vector64<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.Not(a);
            for (int i = 0; i < Vector64<ulong>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Not_long()
        {
            Vector64<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.Not(a);
            for (int i = 0; i < Vector64<long>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Not_float()
        {
            Vector64<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.Not(a);
            for (int i = 0; i < Vector64<float>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Not_double()
        {
            Vector64<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.Not(a);
            for (int i = 0; i < Vector64<double>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Abs_byte()
        {
            Vector64<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.Abs(a);
            for (int i = 0; i < Vector64<byte>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Abs_sbyte()
        {
            Vector64<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.Abs(a);
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Abs_ushort()
        {
            Vector64<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.Abs(a);
            for (int i = 0; i < Vector64<ushort>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Abs_short()
        {
            Vector64<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.Abs(a);
            for (int i = 0; i < Vector64<short>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Abs_uint()
        {
            Vector64<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.Abs(a);
            for (int i = 0; i < Vector64<uint>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Abs_int()
        {
            Vector64<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.Abs(a);
            for (int i = 0; i < Vector64<int>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Abs_ulong()
        {
            Vector64<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.Abs(a);
            for (int i = 0; i < Vector64<ulong>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Abs_long()
        {
            Vector64<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.Abs(a);
            for (int i = 0; i < Vector64<long>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Abs_float()
        {
            Vector64<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.Abs(a);
            for (int i = 0; i < Vector64<float>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_Abs_double()
        {
            Vector64<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.Abs(a);
            for (int i = 0; i < Vector64<double>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsFinite_byte()
        {
            Vector64<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsFinite(a);
            for (int i = 0; i < Vector64<byte>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsFinite_sbyte()
        {
            Vector64<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsFinite(a);
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsFinite_ushort()
        {
            Vector64<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsFinite(a);
            for (int i = 0; i < Vector64<ushort>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsFinite_short()
        {
            Vector64<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsFinite(a);
            for (int i = 0; i < Vector64<short>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsFinite_uint()
        {
            Vector64<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsFinite(a);
            for (int i = 0; i < Vector64<uint>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsFinite_int()
        {
            Vector64<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsFinite(a);
            for (int i = 0; i < Vector64<int>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsFinite_ulong()
        {
            Vector64<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsFinite(a);
            for (int i = 0; i < Vector64<ulong>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsFinite_long()
        {
            Vector64<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsFinite(a);
            for (int i = 0; i < Vector64<long>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsFinite_float()
        {
            Vector64<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsFinite(a);
            for (int i = 0; i < Vector64<float>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsFinite_double()
        {
            Vector64<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsFinite(a);
            for (int i = 0; i < Vector64<double>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsInfinity_byte()
        {
            Vector64<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsInfinity(a);
            for (int i = 0; i < Vector64<byte>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsInfinity_sbyte()
        {
            Vector64<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsInfinity(a);
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsInfinity_ushort()
        {
            Vector64<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsInfinity(a);
            for (int i = 0; i < Vector64<ushort>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsInfinity_short()
        {
            Vector64<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsInfinity(a);
            for (int i = 0; i < Vector64<short>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsInfinity_uint()
        {
            Vector64<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsInfinity(a);
            for (int i = 0; i < Vector64<uint>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsInfinity_int()
        {
            Vector64<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsInfinity(a);
            for (int i = 0; i < Vector64<int>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsInfinity_ulong()
        {
            Vector64<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsInfinity(a);
            for (int i = 0; i < Vector64<ulong>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsInfinity_long()
        {
            Vector64<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsInfinity(a);
            for (int i = 0; i < Vector64<long>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsInfinity_float()
        {
            Vector64<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsInfinity(a);
            for (int i = 0; i < Vector64<float>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsInfinity_double()
        {
            Vector64<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsInfinity(a);
            for (int i = 0; i < Vector64<double>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNaN_byte()
        {
            Vector64<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNaN(a);
            for (int i = 0; i < Vector64<byte>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNaN_sbyte()
        {
            Vector64<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNaN(a);
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNaN_ushort()
        {
            Vector64<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNaN(a);
            for (int i = 0; i < Vector64<ushort>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNaN_short()
        {
            Vector64<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNaN(a);
            for (int i = 0; i < Vector64<short>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNaN_uint()
        {
            Vector64<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNaN(a);
            for (int i = 0; i < Vector64<uint>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNaN_int()
        {
            Vector64<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNaN(a);
            for (int i = 0; i < Vector64<int>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNaN_ulong()
        {
            Vector64<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNaN(a);
            for (int i = 0; i < Vector64<ulong>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNaN_long()
        {
            Vector64<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNaN(a);
            for (int i = 0; i < Vector64<long>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNaN_float()
        {
            Vector64<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNaN(a);
            for (int i = 0; i < Vector64<float>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNaN_double()
        {
            Vector64<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNaN(a);
            for (int i = 0; i < Vector64<double>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNegative_byte()
        {
            Vector64<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNegative(a);
            for (int i = 0; i < Vector64<byte>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNegative_sbyte()
        {
            Vector64<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNegative(a);
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNegative_ushort()
        {
            Vector64<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNegative(a);
            for (int i = 0; i < Vector64<ushort>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNegative_short()
        {
            Vector64<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNegative(a);
            for (int i = 0; i < Vector64<short>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNegative_uint()
        {
            Vector64<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNegative(a);
            for (int i = 0; i < Vector64<uint>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNegative_int()
        {
            Vector64<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNegative(a);
            for (int i = 0; i < Vector64<int>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNegative_ulong()
        {
            Vector64<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNegative(a);
            for (int i = 0; i < Vector64<ulong>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNegative_long()
        {
            Vector64<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNegative(a);
            for (int i = 0; i < Vector64<long>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNegative_float()
        {
            Vector64<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNegative(a);
            for (int i = 0; i < Vector64<float>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNegative_double()
        {
            Vector64<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNegative(a);
            for (int i = 0; i < Vector64<double>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNegativeInfinity_byte()
        {
            Vector64<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNegativeInfinity(a);
            for (int i = 0; i < Vector64<byte>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNegativeInfinity_sbyte()
        {
            Vector64<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNegativeInfinity(a);
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNegativeInfinity_ushort()
        {
            Vector64<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNegativeInfinity(a);
            for (int i = 0; i < Vector64<ushort>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNegativeInfinity_short()
        {
            Vector64<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNegativeInfinity(a);
            for (int i = 0; i < Vector64<short>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNegativeInfinity_uint()
        {
            Vector64<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNegativeInfinity(a);
            for (int i = 0; i < Vector64<uint>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNegativeInfinity_int()
        {
            Vector64<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNegativeInfinity(a);
            for (int i = 0; i < Vector64<int>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNegativeInfinity_ulong()
        {
            Vector64<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNegativeInfinity(a);
            for (int i = 0; i < Vector64<ulong>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNegativeInfinity_long()
        {
            Vector64<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNegativeInfinity(a);
            for (int i = 0; i < Vector64<long>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNegativeInfinity_float()
        {
            Vector64<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNegativeInfinity(a);
            for (int i = 0; i < Vector64<float>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNegativeInfinity_double()
        {
            Vector64<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNegativeInfinity(a);
            for (int i = 0; i < Vector64<double>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNormal_byte()
        {
            Vector64<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNormal(a);
            for (int i = 0; i < Vector64<byte>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNormal_sbyte()
        {
            Vector64<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNormal(a);
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNormal_ushort()
        {
            Vector64<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNormal(a);
            for (int i = 0; i < Vector64<ushort>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNormal_short()
        {
            Vector64<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNormal(a);
            for (int i = 0; i < Vector64<short>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNormal_uint()
        {
            Vector64<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNormal(a);
            for (int i = 0; i < Vector64<uint>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNormal_int()
        {
            Vector64<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNormal(a);
            for (int i = 0; i < Vector64<int>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNormal_ulong()
        {
            Vector64<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNormal(a);
            for (int i = 0; i < Vector64<ulong>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNormal_long()
        {
            Vector64<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNormal(a);
            for (int i = 0; i < Vector64<long>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNormal_float()
        {
            Vector64<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNormal(a);
            for (int i = 0; i < Vector64<float>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsNormal_double()
        {
            Vector64<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsNormal(a);
            for (int i = 0; i < Vector64<double>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsPositiveInfinity_byte()
        {
            Vector64<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsPositiveInfinity(a);
            for (int i = 0; i < Vector64<byte>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsPositiveInfinity_sbyte()
        {
            Vector64<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsPositiveInfinity(a);
            for (int i = 0; i < Vector64<sbyte>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsPositiveInfinity_ushort()
        {
            Vector64<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsPositiveInfinity(a);
            for (int i = 0; i < Vector64<ushort>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsPositiveInfinity_short()
        {
            Vector64<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsPositiveInfinity(a);
            for (int i = 0; i < Vector64<short>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsPositiveInfinity_uint()
        {
            Vector64<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsPositiveInfinity(a);
            for (int i = 0; i < Vector64<uint>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsPositiveInfinity_int()
        {
            Vector64<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsPositiveInfinity(a);
            for (int i = 0; i < Vector64<int>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsPositiveInfinity_ulong()
        {
            Vector64<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsPositiveInfinity(a);
            for (int i = 0; i < Vector64<ulong>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsPositiveInfinity_long()
        {
            Vector64<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsPositiveInfinity(a);
            for (int i = 0; i < Vector64<long>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsPositiveInfinity_float()
        {
            Vector64<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsPositiveInfinity(a);
            for (int i = 0; i < Vector64<float>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd64_IsPositiveInfinity_double()
        {
            Vector64<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 8); 
            var actual = Simd64.IsPositiveInfinity(a);
            for (int i = 0; i < Vector64<double>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Not_byte()
        {
            Vector128<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.Not(a);
            for (int i = 0; i < Vector128<byte>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Not_sbyte()
        {
            Vector128<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.Not(a);
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Not_ushort()
        {
            Vector128<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.Not(a);
            for (int i = 0; i < Vector128<ushort>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Not_short()
        {
            Vector128<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.Not(a);
            for (int i = 0; i < Vector128<short>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Not_uint()
        {
            Vector128<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.Not(a);
            for (int i = 0; i < Vector128<uint>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Not_int()
        {
            Vector128<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.Not(a);
            for (int i = 0; i < Vector128<int>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Not_ulong()
        {
            Vector128<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.Not(a);
            for (int i = 0; i < Vector128<ulong>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Not_long()
        {
            Vector128<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.Not(a);
            for (int i = 0; i < Vector128<long>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Not_float()
        {
            Vector128<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.Not(a);
            for (int i = 0; i < Vector128<float>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Not_double()
        {
            Vector128<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.Not(a);
            for (int i = 0; i < Vector128<double>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Abs_byte()
        {
            Vector128<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.Abs(a);
            for (int i = 0; i < Vector128<byte>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Abs_sbyte()
        {
            Vector128<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.Abs(a);
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Abs_ushort()
        {
            Vector128<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.Abs(a);
            for (int i = 0; i < Vector128<ushort>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Abs_short()
        {
            Vector128<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.Abs(a);
            for (int i = 0; i < Vector128<short>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Abs_uint()
        {
            Vector128<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.Abs(a);
            for (int i = 0; i < Vector128<uint>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Abs_int()
        {
            Vector128<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.Abs(a);
            for (int i = 0; i < Vector128<int>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Abs_ulong()
        {
            Vector128<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.Abs(a);
            for (int i = 0; i < Vector128<ulong>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Abs_long()
        {
            Vector128<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.Abs(a);
            for (int i = 0; i < Vector128<long>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Abs_float()
        {
            Vector128<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.Abs(a);
            for (int i = 0; i < Vector128<float>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_Abs_double()
        {
            Vector128<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.Abs(a);
            for (int i = 0; i < Vector128<double>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsFinite_byte()
        {
            Vector128<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsFinite(a);
            for (int i = 0; i < Vector128<byte>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsFinite_sbyte()
        {
            Vector128<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsFinite(a);
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsFinite_ushort()
        {
            Vector128<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsFinite(a);
            for (int i = 0; i < Vector128<ushort>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsFinite_short()
        {
            Vector128<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsFinite(a);
            for (int i = 0; i < Vector128<short>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsFinite_uint()
        {
            Vector128<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsFinite(a);
            for (int i = 0; i < Vector128<uint>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsFinite_int()
        {
            Vector128<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsFinite(a);
            for (int i = 0; i < Vector128<int>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsFinite_ulong()
        {
            Vector128<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsFinite(a);
            for (int i = 0; i < Vector128<ulong>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsFinite_long()
        {
            Vector128<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsFinite(a);
            for (int i = 0; i < Vector128<long>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsFinite_float()
        {
            Vector128<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsFinite(a);
            for (int i = 0; i < Vector128<float>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsFinite_double()
        {
            Vector128<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsFinite(a);
            for (int i = 0; i < Vector128<double>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsInfinity_byte()
        {
            Vector128<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsInfinity(a);
            for (int i = 0; i < Vector128<byte>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsInfinity_sbyte()
        {
            Vector128<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsInfinity(a);
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsInfinity_ushort()
        {
            Vector128<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsInfinity(a);
            for (int i = 0; i < Vector128<ushort>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsInfinity_short()
        {
            Vector128<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsInfinity(a);
            for (int i = 0; i < Vector128<short>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsInfinity_uint()
        {
            Vector128<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsInfinity(a);
            for (int i = 0; i < Vector128<uint>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsInfinity_int()
        {
            Vector128<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsInfinity(a);
            for (int i = 0; i < Vector128<int>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsInfinity_ulong()
        {
            Vector128<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsInfinity(a);
            for (int i = 0; i < Vector128<ulong>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsInfinity_long()
        {
            Vector128<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsInfinity(a);
            for (int i = 0; i < Vector128<long>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsInfinity_float()
        {
            Vector128<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsInfinity(a);
            for (int i = 0; i < Vector128<float>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsInfinity_double()
        {
            Vector128<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsInfinity(a);
            for (int i = 0; i < Vector128<double>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNaN_byte()
        {
            Vector128<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNaN(a);
            for (int i = 0; i < Vector128<byte>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNaN_sbyte()
        {
            Vector128<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNaN(a);
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNaN_ushort()
        {
            Vector128<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNaN(a);
            for (int i = 0; i < Vector128<ushort>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNaN_short()
        {
            Vector128<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNaN(a);
            for (int i = 0; i < Vector128<short>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNaN_uint()
        {
            Vector128<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNaN(a);
            for (int i = 0; i < Vector128<uint>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNaN_int()
        {
            Vector128<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNaN(a);
            for (int i = 0; i < Vector128<int>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNaN_ulong()
        {
            Vector128<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNaN(a);
            for (int i = 0; i < Vector128<ulong>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNaN_long()
        {
            Vector128<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNaN(a);
            for (int i = 0; i < Vector128<long>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNaN_float()
        {
            Vector128<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNaN(a);
            for (int i = 0; i < Vector128<float>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNaN_double()
        {
            Vector128<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNaN(a);
            for (int i = 0; i < Vector128<double>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNegative_byte()
        {
            Vector128<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNegative(a);
            for (int i = 0; i < Vector128<byte>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNegative_sbyte()
        {
            Vector128<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNegative(a);
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNegative_ushort()
        {
            Vector128<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNegative(a);
            for (int i = 0; i < Vector128<ushort>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNegative_short()
        {
            Vector128<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNegative(a);
            for (int i = 0; i < Vector128<short>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNegative_uint()
        {
            Vector128<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNegative(a);
            for (int i = 0; i < Vector128<uint>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNegative_int()
        {
            Vector128<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNegative(a);
            for (int i = 0; i < Vector128<int>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNegative_ulong()
        {
            Vector128<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNegative(a);
            for (int i = 0; i < Vector128<ulong>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNegative_long()
        {
            Vector128<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNegative(a);
            for (int i = 0; i < Vector128<long>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNegative_float()
        {
            Vector128<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNegative(a);
            for (int i = 0; i < Vector128<float>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNegative_double()
        {
            Vector128<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNegative(a);
            for (int i = 0; i < Vector128<double>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNegativeInfinity_byte()
        {
            Vector128<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNegativeInfinity(a);
            for (int i = 0; i < Vector128<byte>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNegativeInfinity_sbyte()
        {
            Vector128<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNegativeInfinity(a);
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNegativeInfinity_ushort()
        {
            Vector128<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNegativeInfinity(a);
            for (int i = 0; i < Vector128<ushort>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNegativeInfinity_short()
        {
            Vector128<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNegativeInfinity(a);
            for (int i = 0; i < Vector128<short>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNegativeInfinity_uint()
        {
            Vector128<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNegativeInfinity(a);
            for (int i = 0; i < Vector128<uint>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNegativeInfinity_int()
        {
            Vector128<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNegativeInfinity(a);
            for (int i = 0; i < Vector128<int>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNegativeInfinity_ulong()
        {
            Vector128<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNegativeInfinity(a);
            for (int i = 0; i < Vector128<ulong>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNegativeInfinity_long()
        {
            Vector128<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNegativeInfinity(a);
            for (int i = 0; i < Vector128<long>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNegativeInfinity_float()
        {
            Vector128<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNegativeInfinity(a);
            for (int i = 0; i < Vector128<float>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNegativeInfinity_double()
        {
            Vector128<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNegativeInfinity(a);
            for (int i = 0; i < Vector128<double>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNormal_byte()
        {
            Vector128<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNormal(a);
            for (int i = 0; i < Vector128<byte>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNormal_sbyte()
        {
            Vector128<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNormal(a);
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNormal_ushort()
        {
            Vector128<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNormal(a);
            for (int i = 0; i < Vector128<ushort>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNormal_short()
        {
            Vector128<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNormal(a);
            for (int i = 0; i < Vector128<short>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNormal_uint()
        {
            Vector128<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNormal(a);
            for (int i = 0; i < Vector128<uint>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNormal_int()
        {
            Vector128<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNormal(a);
            for (int i = 0; i < Vector128<int>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNormal_ulong()
        {
            Vector128<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNormal(a);
            for (int i = 0; i < Vector128<ulong>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNormal_long()
        {
            Vector128<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNormal(a);
            for (int i = 0; i < Vector128<long>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNormal_float()
        {
            Vector128<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNormal(a);
            for (int i = 0; i < Vector128<float>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsNormal_double()
        {
            Vector128<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsNormal(a);
            for (int i = 0; i < Vector128<double>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsPositiveInfinity_byte()
        {
            Vector128<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsPositiveInfinity(a);
            for (int i = 0; i < Vector128<byte>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsPositiveInfinity_sbyte()
        {
            Vector128<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsPositiveInfinity(a);
            for (int i = 0; i < Vector128<sbyte>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsPositiveInfinity_ushort()
        {
            Vector128<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsPositiveInfinity(a);
            for (int i = 0; i < Vector128<ushort>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsPositiveInfinity_short()
        {
            Vector128<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsPositiveInfinity(a);
            for (int i = 0; i < Vector128<short>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsPositiveInfinity_uint()
        {
            Vector128<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsPositiveInfinity(a);
            for (int i = 0; i < Vector128<uint>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsPositiveInfinity_int()
        {
            Vector128<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsPositiveInfinity(a);
            for (int i = 0; i < Vector128<int>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsPositiveInfinity_ulong()
        {
            Vector128<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsPositiveInfinity(a);
            for (int i = 0; i < Vector128<ulong>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsPositiveInfinity_long()
        {
            Vector128<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsPositiveInfinity(a);
            for (int i = 0; i < Vector128<long>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsPositiveInfinity_float()
        {
            Vector128<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsPositiveInfinity(a);
            for (int i = 0; i < Vector128<float>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd128_IsPositiveInfinity_double()
        {
            Vector128<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 16); 
            var actual = Simd128.IsPositiveInfinity(a);
            for (int i = 0; i < Vector128<double>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Not_byte()
        {
            Vector256<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.Not(a);
            for (int i = 0; i < Vector256<byte>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Not_sbyte()
        {
            Vector256<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.Not(a);
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Not_ushort()
        {
            Vector256<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.Not(a);
            for (int i = 0; i < Vector256<ushort>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Not_short()
        {
            Vector256<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.Not(a);
            for (int i = 0; i < Vector256<short>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Not_uint()
        {
            Vector256<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.Not(a);
            for (int i = 0; i < Vector256<uint>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Not_int()
        {
            Vector256<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.Not(a);
            for (int i = 0; i < Vector256<int>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Not_ulong()
        {
            Vector256<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.Not(a);
            for (int i = 0; i < Vector256<ulong>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Not_long()
        {
            Vector256<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.Not(a);
            for (int i = 0; i < Vector256<long>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Not_float()
        {
            Vector256<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.Not(a);
            for (int i = 0; i < Vector256<float>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Not_double()
        {
            Vector256<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.Not(a);
            for (int i = 0; i < Vector256<double>.Count; i++)
            {
                var expected = Scalar.Not(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Abs_byte()
        {
            Vector256<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.Abs(a);
            for (int i = 0; i < Vector256<byte>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Abs_sbyte()
        {
            Vector256<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.Abs(a);
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Abs_ushort()
        {
            Vector256<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.Abs(a);
            for (int i = 0; i < Vector256<ushort>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Abs_short()
        {
            Vector256<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.Abs(a);
            for (int i = 0; i < Vector256<short>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Abs_uint()
        {
            Vector256<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.Abs(a);
            for (int i = 0; i < Vector256<uint>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Abs_int()
        {
            Vector256<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.Abs(a);
            for (int i = 0; i < Vector256<int>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Abs_ulong()
        {
            Vector256<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.Abs(a);
            for (int i = 0; i < Vector256<ulong>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Abs_long()
        {
            Vector256<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.Abs(a);
            for (int i = 0; i < Vector256<long>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Abs_float()
        {
            Vector256<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.Abs(a);
            for (int i = 0; i < Vector256<float>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_Abs_double()
        {
            Vector256<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.Abs(a);
            for (int i = 0; i < Vector256<double>.Count; i++)
            {
                var expected = Scalar.Abs(a.GetElement(i));
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsFinite_byte()
        {
            Vector256<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsFinite(a);
            for (int i = 0; i < Vector256<byte>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsFinite_sbyte()
        {
            Vector256<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsFinite(a);
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsFinite_ushort()
        {
            Vector256<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsFinite(a);
            for (int i = 0; i < Vector256<ushort>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsFinite_short()
        {
            Vector256<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsFinite(a);
            for (int i = 0; i < Vector256<short>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsFinite_uint()
        {
            Vector256<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsFinite(a);
            for (int i = 0; i < Vector256<uint>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsFinite_int()
        {
            Vector256<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsFinite(a);
            for (int i = 0; i < Vector256<int>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsFinite_ulong()
        {
            Vector256<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsFinite(a);
            for (int i = 0; i < Vector256<ulong>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsFinite_long()
        {
            Vector256<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsFinite(a);
            for (int i = 0; i < Vector256<long>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsFinite_float()
        {
            Vector256<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsFinite(a);
            for (int i = 0; i < Vector256<float>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsFinite_double()
        {
            Vector256<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsFinite(a);
            for (int i = 0; i < Vector256<double>.Count; i++)
            {
                var expected = Scalar.IsFinite(a.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsInfinity_byte()
        {
            Vector256<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsInfinity(a);
            for (int i = 0; i < Vector256<byte>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsInfinity_sbyte()
        {
            Vector256<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsInfinity(a);
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsInfinity_ushort()
        {
            Vector256<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsInfinity(a);
            for (int i = 0; i < Vector256<ushort>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsInfinity_short()
        {
            Vector256<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsInfinity(a);
            for (int i = 0; i < Vector256<short>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsInfinity_uint()
        {
            Vector256<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsInfinity(a);
            for (int i = 0; i < Vector256<uint>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsInfinity_int()
        {
            Vector256<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsInfinity(a);
            for (int i = 0; i < Vector256<int>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsInfinity_ulong()
        {
            Vector256<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsInfinity(a);
            for (int i = 0; i < Vector256<ulong>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsInfinity_long()
        {
            Vector256<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsInfinity(a);
            for (int i = 0; i < Vector256<long>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsInfinity_float()
        {
            Vector256<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsInfinity(a);
            for (int i = 0; i < Vector256<float>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsInfinity_double()
        {
            Vector256<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsInfinity(a);
            for (int i = 0; i < Vector256<double>.Count; i++)
            {
                var expected = Scalar.IsInfinity(a.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNaN_byte()
        {
            Vector256<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNaN(a);
            for (int i = 0; i < Vector256<byte>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNaN_sbyte()
        {
            Vector256<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNaN(a);
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNaN_ushort()
        {
            Vector256<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNaN(a);
            for (int i = 0; i < Vector256<ushort>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNaN_short()
        {
            Vector256<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNaN(a);
            for (int i = 0; i < Vector256<short>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNaN_uint()
        {
            Vector256<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNaN(a);
            for (int i = 0; i < Vector256<uint>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNaN_int()
        {
            Vector256<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNaN(a);
            for (int i = 0; i < Vector256<int>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNaN_ulong()
        {
            Vector256<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNaN(a);
            for (int i = 0; i < Vector256<ulong>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNaN_long()
        {
            Vector256<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNaN(a);
            for (int i = 0; i < Vector256<long>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNaN_float()
        {
            Vector256<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNaN(a);
            for (int i = 0; i < Vector256<float>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNaN_double()
        {
            Vector256<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNaN(a);
            for (int i = 0; i < Vector256<double>.Count; i++)
            {
                var expected = Scalar.IsNaN(a.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNegative_byte()
        {
            Vector256<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNegative(a);
            for (int i = 0; i < Vector256<byte>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNegative_sbyte()
        {
            Vector256<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNegative(a);
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNegative_ushort()
        {
            Vector256<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNegative(a);
            for (int i = 0; i < Vector256<ushort>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNegative_short()
        {
            Vector256<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNegative(a);
            for (int i = 0; i < Vector256<short>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNegative_uint()
        {
            Vector256<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNegative(a);
            for (int i = 0; i < Vector256<uint>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNegative_int()
        {
            Vector256<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNegative(a);
            for (int i = 0; i < Vector256<int>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNegative_ulong()
        {
            Vector256<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNegative(a);
            for (int i = 0; i < Vector256<ulong>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNegative_long()
        {
            Vector256<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNegative(a);
            for (int i = 0; i < Vector256<long>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNegative_float()
        {
            Vector256<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNegative(a);
            for (int i = 0; i < Vector256<float>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNegative_double()
        {
            Vector256<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNegative(a);
            for (int i = 0; i < Vector256<double>.Count; i++)
            {
                var expected = Scalar.IsNegative(a.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNegativeInfinity_byte()
        {
            Vector256<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNegativeInfinity(a);
            for (int i = 0; i < Vector256<byte>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNegativeInfinity_sbyte()
        {
            Vector256<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNegativeInfinity(a);
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNegativeInfinity_ushort()
        {
            Vector256<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNegativeInfinity(a);
            for (int i = 0; i < Vector256<ushort>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNegativeInfinity_short()
        {
            Vector256<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNegativeInfinity(a);
            for (int i = 0; i < Vector256<short>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNegativeInfinity_uint()
        {
            Vector256<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNegativeInfinity(a);
            for (int i = 0; i < Vector256<uint>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNegativeInfinity_int()
        {
            Vector256<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNegativeInfinity(a);
            for (int i = 0; i < Vector256<int>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNegativeInfinity_ulong()
        {
            Vector256<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNegativeInfinity(a);
            for (int i = 0; i < Vector256<ulong>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNegativeInfinity_long()
        {
            Vector256<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNegativeInfinity(a);
            for (int i = 0; i < Vector256<long>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNegativeInfinity_float()
        {
            Vector256<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNegativeInfinity(a);
            for (int i = 0; i < Vector256<float>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNegativeInfinity_double()
        {
            Vector256<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNegativeInfinity(a);
            for (int i = 0; i < Vector256<double>.Count; i++)
            {
                var expected = Scalar.IsNegativeInfinity(a.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNormal_byte()
        {
            Vector256<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNormal(a);
            for (int i = 0; i < Vector256<byte>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNormal_sbyte()
        {
            Vector256<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNormal(a);
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNormal_ushort()
        {
            Vector256<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNormal(a);
            for (int i = 0; i < Vector256<ushort>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNormal_short()
        {
            Vector256<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNormal(a);
            for (int i = 0; i < Vector256<short>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNormal_uint()
        {
            Vector256<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNormal(a);
            for (int i = 0; i < Vector256<uint>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNormal_int()
        {
            Vector256<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNormal(a);
            for (int i = 0; i < Vector256<int>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNormal_ulong()
        {
            Vector256<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNormal(a);
            for (int i = 0; i < Vector256<ulong>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNormal_long()
        {
            Vector256<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNormal(a);
            for (int i = 0; i < Vector256<long>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNormal_float()
        {
            Vector256<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNormal(a);
            for (int i = 0; i < Vector256<float>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsNormal_double()
        {
            Vector256<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsNormal(a);
            for (int i = 0; i < Vector256<double>.Count; i++)
            {
                var expected = Scalar.IsNormal(a.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsPositiveInfinity_byte()
        {
            Vector256<byte> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsPositiveInfinity(a);
            for (int i = 0; i < Vector256<byte>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<byte>.AllBitsSet : Scalar<byte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsPositiveInfinity_sbyte()
        {
            Vector256<sbyte> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsPositiveInfinity(a);
            for (int i = 0; i < Vector256<sbyte>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<sbyte>.AllBitsSet : Scalar<sbyte>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsPositiveInfinity_ushort()
        {
            Vector256<ushort> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsPositiveInfinity(a);
            for (int i = 0; i < Vector256<ushort>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<ushort>.AllBitsSet : Scalar<ushort>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsPositiveInfinity_short()
        {
            Vector256<short> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsPositiveInfinity(a);
            for (int i = 0; i < Vector256<short>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<short>.AllBitsSet : Scalar<short>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsPositiveInfinity_uint()
        {
            Vector256<uint> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsPositiveInfinity(a);
            for (int i = 0; i < Vector256<uint>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<uint>.AllBitsSet : Scalar<uint>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsPositiveInfinity_int()
        {
            Vector256<int> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsPositiveInfinity(a);
            for (int i = 0; i < Vector256<int>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<int>.AllBitsSet : Scalar<int>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsPositiveInfinity_ulong()
        {
            Vector256<ulong> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsPositiveInfinity(a);
            for (int i = 0; i < Vector256<ulong>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<ulong>.AllBitsSet : Scalar<ulong>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsPositiveInfinity_long()
        {
            Vector256<long> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsPositiveInfinity(a);
            for (int i = 0; i < Vector256<long>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<long>.AllBitsSet : Scalar<long>.Zero;
                Assert.True(expected == actual.GetElement(i), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsPositiveInfinity_float()
        {
            Vector256<float> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsPositiveInfinity(a);
            for (int i = 0; i < Vector256<float>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<float>.AllBitsSet : Scalar<float>.Zero;
                Assert.True(expected == actual.GetElement(i) || float.IsNaN(expected) && float.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
        [Fact]
        public void Simd256_IsPositiveInfinity_double()
        {
            Vector256<double> a;
            SimdTestsUtils.FillWithRandomData(&a, 32); 
            var actual = Simd256.IsPositiveInfinity(a);
            for (int i = 0; i < Vector256<double>.Count; i++)
            {
                var expected = Scalar.IsPositiveInfinity(a.GetElement(i)) ? Scalar<double>.AllBitsSet : Scalar<double>.Zero;
                Assert.True(expected == actual.GetElement(i) || double.IsNaN(expected) && double.IsNaN(actual.GetElement(i)), $"\nId {i}\na[i]: {a.GetElement(i)}\nActual[i]: {actual.GetElement(i)}\nExpected: {expected}");
            }
        }
    }
}
#endif