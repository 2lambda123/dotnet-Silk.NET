// Reference https://www.jetbrains.org/intellij/sdk/docs/tutorials/build_system/gradle_guide.html
import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    dependencies {
        classpath 'org.commonmark:commonmark:0.18.1'
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.5.31'
    id 'org.jetbrains.intellij' version '1.3.0'     // https://github.com/JetBrains/gradle-intellij-plugin/releases
    id 'com.jetbrains.rdgen' version '0.213.394'    // https://www.myget.org/feed/rd-snapshots/package/maven/com.jetbrains.rd/rd-gen
}

ext {
    isWindows = Os.isFamily(Os.FAMILY_WINDOWS)
    rdLibDirectory = {
        new File(setupDependencies.idea.get().classes, "lib/rd")
    }
}

repositories {
    maven { url 'https://cache-redirector.jetbrains.com/intellij-repository/snapshots' }
    maven { url 'https://cache-redirector.jetbrains.com/maven-central' }
}

wrapper {
    gradleVersion = '7.1'
    distributionType = Wrapper.DistributionType.ALL
    distributionUrl = "https://cache-redirector.jetbrains.com/services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

def project = new XmlParser().parse("${rootDir}/../../build/props/common.props")
version = project.PropertyGroup.find { it.findAll { prop -> prop.name() == "VersionPrefix" }.size() == 1 }.VersionPrefix.text()

sourceSets {
    main {
        java.srcDir 'src/rider/main/java'
        kotlin.srcDir 'src/rider/main/kotlin'
        resources.srcDir 'src/rider/main/resources'
    }
}

compileKotlin {
    kotlinOptions { jvmTarget = "1.8" }
}

task setBuildTool {
    doLast {
        ext.args = []
        ByteArrayOutputStream stdout = new ByteArrayOutputStream()
        if (isWindows) {
            exec {
                executable "${rootDir}\\tools\\vswhere.exe"
                args '-latest','-property','installationPath','-products','*'
                standardOutput = stdout
                workingDir rootDir
            }
            List<String> files = new FileNameFinder().getFileNames("${stdout.toString().trim()}\\MSBuild", "**/MSBuild.exe")
            ext.executable = files.get(0)
            ext.args << "/v:minimal"
        } else {
            ext.executable = "dotnet"
            ext.args << "msbuild"
        }
        ext.args << "${DotnetSolution}"
        ext.args << "/p:Configuration=${BuildConfiguration}"
        ext.args << "/p:HostFullIdentifier="
    }
}

task compileDotNet {
    dependsOn setBuildTool
    doLast {
        def arguments = setBuildTool.args.clone()
        arguments << "/t:Restore;Rebuild"
        exec {
            executable setBuildTool.executable
            args arguments
            workingDir rootDir
        }
    }
}

buildPlugin {
    dependsOn setBuildTool
    doLast {
        copy {
            from "${buildDir}/distributions/${rootProject.name}-${version}.zip"
            into "${rootDir}/output"
        }

        def arguments = setBuildTool.args.clone()
        arguments << "/t:Pack"
        arguments << "/p:PackageOutputPath=${rootDir}/output"
        exec {
            executable setBuildTool.executable
            args arguments
            workingDir rootDir
        }
    }
}

intellij {
    type = 'RD'
    version = "${ProductVersion}"
    downloadSources = false
    instrumentCode = false
    // TODO: add plugins
    // plugins = ["uml", "com.jetbrains.ChooseRuntime:1.0.9"]
}

runIde {
    // Match Rider's default heap size of 1.5Gb (default for runIde is 512Mb)
    maxHeapSize = "1500m"

    // Rider's backend doesn't support dynamic plugins. It might be possible to work with auto-reload of the frontend
    // part of a plugin, but there are dangers about keeping plugins in sync
    autoReloadPlugins = false
}

rdgen {
    def modelDir = new File(rootDir, "protocol/src/main/kotlin/model")
    def csOutput = new File(rootDir, "src/dotnet/${DotnetPluginId}/Rider")
    def ktOutput = new File(rootDir, "src/rider/main/kotlin/${RiderPluginId.replace('.','/').toLowerCase()}")

    verbose = true
    classpath {
        "${rdLibDirectory()}/rider-model.jar"
    }
    sources "${modelDir}/rider"
    hashFolder = "${buildDir}"
    packages = "model.rider"

    generator {
        language = "kotlin"
        transform = "asis"
        root = "com.jetbrains.rider.model.nova.ide.IdeRoot"
        namespace = "com.jetbrains.rider.model"
        directory = "$ktOutput"
    }

    generator {
        language = "csharp"
        transform = "reversed"
        root = "com.jetbrains.rider.model.nova.ide.IdeRoot"
        namespace = "JetBrains.Rider.Model"
        directory = "$csOutput"
    }
}

import org.commonmark.parser.Parser
import org.commonmark.renderer.html.HtmlRenderer

patchPluginXml {
    changeNotes = "Updated for Silk.NET version ${version}. Patch notes, which may or may not include changes to the Rider/ReSharper plugin, are available <a href=\"https://github.com/dotnet/Silk.NET/releases\"here</a>."
    "dotnet msbuild -target:SilkGenerateNuGetReadme ${DotnetSolution}".execute()
    def parser = Parser.builder().build()
    def document = parser.parse(new File("${rootDir}/src/dotnet/${DotnetPluginId}/obj/${DotnetPluginId}.Rider/${BuildConfiguration}/README.md".toString()).getText())
    def renderer = HtmlRenderer.builder().build()
    pluginDescription = renderer.render(document)
}

prepareSandbox {
    dependsOn compileDotNet

    def outputFolder = "${rootDir}/src/dotnet/${DotnetPluginId}/bin/${DotnetPluginId}.Rider/${BuildConfiguration}"
    def dllFiles = [
            "$outputFolder/${DotnetPluginId}.dll",
            "$outputFolder/${DotnetPluginId}.pdb",
            // TODO: add additional assemblies
    ]

    dllFiles.forEach({ f ->
        def file = file(f)
        from(file, { into "${rootProject.name}/dotnet" })
    })

    doLast {
        dllFiles.forEach({ f ->
            def file = file(f)
            if (!file.exists()) throw new RuntimeException("File ${file} does not exist")
        })
    }
}
