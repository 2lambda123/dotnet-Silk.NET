@page "/GLFWTest1"
@using System.Runtime.InteropServices
@using Silk.NET.Core.Native
@using Silk.NET.GLFW
@using System.Runtime.CompilerServices
<h3>OpenGLTest1</h3>

@code {

    [DllImport("emscripten", EntryPoint = "emscripten_set_main_loop_arg")]
    private static extern unsafe void EmscriptenSetMainLoop(void* func, void* argument, int fps, int simulateInfiniteLoop);

    protected override unsafe void OnInitialized()
    {
        var glfw = Glfw.GetApi();
        Console.WriteLine("Setting error callback");
        glfw.SetErrorCallback((delegate* unmanaged[Cdecl]<int, void*, void>)&ErrorCallback);
        Console.WriteLine("Initializing");
        if (!glfw.Init())
            return;
            
        Console.WriteLine("Glfw initialized successfully");
        
        Console.WriteLine("Starting Loop");
        var selfHandle = GCHandle.Alloc(this, GCHandleType.Normal);
        EmscriptenSetMainLoop((delegate* unmanaged<void*, void>)&Loop, (void*)GCHandle.ToIntPtr(selfHandle), 0, 1);
    }

    [UnmanagedCallersOnly(CallConvs = new []{typeof(CallConvCdecl)})]
    private static unsafe void ErrorCallback(int error, void* description)
    {
        Console.WriteLine($"GLFW Error: {Enum.GetName((ErrorCode)error)} {SilkMarshal.PtrToString((nint) description)}");
    }

    [UnmanagedCallersOnly]
    private static unsafe void Loop(void* arg)
    {
        var selfHandle = GCHandle.FromIntPtr((IntPtr)arg);
        try
        {
            Console.WriteLine("Loop");
        }
        finally
        {
            selfHandle.Free();
        }
    }

}