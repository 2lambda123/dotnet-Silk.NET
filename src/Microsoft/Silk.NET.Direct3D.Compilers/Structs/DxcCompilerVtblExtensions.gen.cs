// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.


using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Text;
using Silk.NET.Core;
using Silk.NET.Core.Native;
using Silk.NET.Core.Attributes;
using Silk.NET.Core.Contexts;
using Silk.NET.Core.Loader;

#pragma warning disable 1591

namespace Silk.NET.Direct3D.Compilers;

public unsafe static class DxcCompilerVtblExtensions
{
    /// <summary>To be documented.</summary>
    public static unsafe int QueryInterface<TThis>(this TThis thisVtbl, Guid* riid, void** ppvObject) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, Guid*, void**, int>)@this->LpVtbl[0])(@this, riid, ppvObject);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int QueryInterface<TThis>(this TThis thisVtbl, Guid* riid, ref void* ppvObject) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void** ppvObjectPtr = &ppvObject)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, Guid*, void**, int>)@this->LpVtbl[0])(@this, riid, ppvObjectPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int QueryInterface<TThis>(this TThis thisVtbl, ref Guid riid, void** ppvObject) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Guid* riidPtr = &riid)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, Guid*, void**, int>)@this->LpVtbl[0])(@this, riidPtr, ppvObject);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int QueryInterface<TThis>(this TThis thisVtbl, ref Guid riid, ref void* ppvObject) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Guid* riidPtr = &riid)
        {
            fixed (void** ppvObjectPtr = &ppvObject)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, Guid*, void**, int>)@this->LpVtbl[0])(@this, riidPtr, ppvObjectPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static uint AddRef<TThis>(this TThis thisVtbl) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        uint ret = default;
        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, uint>)@this->LpVtbl[1])(@this);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static uint Release<TThis>(this TThis thisVtbl) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        uint ret = default;
        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, uint>)@this->LpVtbl[2])(@this);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Define* pDefinesPtr = &pDefines)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char** pArgumentsPtr = &pArguments)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pTargetProfilePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                            {
                                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char* pEntryPointPtr = &pEntryPoint)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        fixed (char* pTargetProfilePtr = &pTargetProfile)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSource, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                            {
                                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceName, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                            {
                                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                            {
                                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (char* pTargetProfilePtr = &pTargetProfile)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (char* pTargetProfilePtr = &pTargetProfile)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (char* pTargetProfilePtr = &pTargetProfile)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (char* pTargetProfilePtr = &pTargetProfile)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (char* pTargetProfilePtr = &pTargetProfile)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (char* pTargetProfilePtr = &pTargetProfile)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (char* pTargetProfilePtr = &pTargetProfile)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (char* pTargetProfilePtr = &pTargetProfile)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                            {
                                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (char* pTargetProfilePtr = &pTargetProfile)
                    {
                        fixed (char** pArgumentsPtr = &pArguments)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (char* pTargetProfilePtr = &pTargetProfile)
                    {
                        fixed (char** pArgumentsPtr = &pArguments)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (char* pTargetProfilePtr = &pTargetProfile)
                    {
                        fixed (char** pArgumentsPtr = &pArguments)
                        {
                            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (char* pTargetProfilePtr = &pTargetProfile)
                    {
                        fixed (char** pArgumentsPtr = &pArguments)
                        {
                            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                            {
                                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (char* pTargetProfilePtr = &pTargetProfile)
                    {
                        fixed (char** pArgumentsPtr = &pArguments)
                        {
                            fixed (Define* pDefinesPtr = &pDefines)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (char* pTargetProfilePtr = &pTargetProfile)
                    {
                        fixed (char** pArgumentsPtr = &pArguments)
                        {
                            fixed (Define* pDefinesPtr = &pDefines)
                            {
                                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (char* pTargetProfilePtr = &pTargetProfile)
                    {
                        fixed (char** pArgumentsPtr = &pArguments)
                        {
                            fixed (Define* pDefinesPtr = &pDefines)
                            {
                                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
                    fixed (char* pTargetProfilePtr = &pTargetProfile)
                    {
                        fixed (char** pArgumentsPtr = &pArguments)
                        {
                            fixed (Define* pDefinesPtr = &pDefines)
                            {
                                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                                {
                                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pTargetProfilePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
        SilkMarshal.Free((nint)pTargetProfilePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
        SilkMarshal.Free((nint)pTargetProfilePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
        SilkMarshal.Free((nint)pTargetProfilePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
        SilkMarshal.Free((nint)pTargetProfilePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
        SilkMarshal.Free((nint)pTargetProfilePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
        SilkMarshal.Free((nint)pTargetProfilePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)pTargetProfilePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                    }
        SilkMarshal.Free((nint)pTargetProfilePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
        SilkMarshal.Free((nint)pTargetProfilePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
        SilkMarshal.Free((nint)pTargetProfilePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)pTargetProfilePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                        }
                    }
        SilkMarshal.Free((nint)pTargetProfilePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)pTargetProfilePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                            }
                        }
                    }
        SilkMarshal.Free((nint)pTargetProfilePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char* pEntryPointPtr = &pEntryPoint)
                {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                            {
                                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                                }
                            }
                        }
                    }
        SilkMarshal.Free((nint)pTargetProfilePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                        }
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                            {
                                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                                }
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char* pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPoint, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                            }
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                            }
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
                fixed (char* pTargetProfilePtr = &pTargetProfile)
                {
                    fixed (char** pArgumentsPtr = &pArguments)
                    {
                        fixed (Define* pDefinesPtr = &pDefines)
                        {
                            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                            {
                                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                                }
                            }
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char* pEntryPointPtr = &pEntryPoint)
            {
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)pTargetProfilePtr);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfile, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, ref char pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
            fixed (char* pTargetProfilePtr = &pTargetProfile)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Compile<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pEntryPoint, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pTargetProfile, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        var pEntryPointPtr = (byte*) SilkMarshal.StringToPtr(pEntryPoint, NativeStringEncoding.LPWStr);
        var pTargetProfilePtr = (byte*) SilkMarshal.StringToPtr(pTargetProfile, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, byte*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[3])(@this, pSourcePtr, pSourceNamePtr, pEntryPointPtr, pTargetProfilePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pTargetProfilePtr);
        SilkMarshal.Free((nint)pEntryPointPtr);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Define* pDefinesPtr = &pDefines)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceName, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceName, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceName, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceName, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char** pArgumentsPtr = &pArguments)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceName, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceName, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceName, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceName, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceName, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceName, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceName, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceName, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref char pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* pSourceNamePtr = &pSourceName)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (Define* pDefinesPtr = &pDefines)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, IDxcBlob* pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
        fixed (char** pArgumentsPtr = &pArguments)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSource, pSourceNamePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)pSourceNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceName, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceName, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceName, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceName, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceName, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceName, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceName, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceName, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceName, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceName, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceName, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceName, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref char pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (char* pSourceNamePtr = &pSourceName)
            {
                fixed (char** pArgumentsPtr = &pArguments)
                {
                    fixed (Define* pDefinesPtr = &pDefines)
                    {
                        fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                        {
                            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (IDxcOperationResult** ppResultPtr = &ppResult)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArguments, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, char** pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (Define* pDefinesPtr = &pDefines)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArguments, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandler, ppResultPtr);
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResult);
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArgumentsPtr, argCount, pDefines, defineCount, pIncludeHandlerPtr, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResult);
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandler, ppResultPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResult);
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Preprocess<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pSourceName, ref char* pArguments, uint argCount, [Flow(FlowDirection.In)] in Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
        var pSourceNamePtr = (byte*) SilkMarshal.StringToPtr(pSourceName, NativeStringEncoding.LPWStr);
            fixed (char** pArgumentsPtr = &pArguments)
            {
                fixed (Define* pDefinesPtr = &pDefines)
                {
                    fixed (IDxcIncludeHandler* pIncludeHandlerPtr = &pIncludeHandler)
                    {
                        fixed (IDxcOperationResult** ppResultPtr = &ppResult)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, byte*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, int>)@this->LpVtbl[4])(@this, pSourcePtr, pSourceNamePtr, pArgumentsPtr, argCount, pDefinesPtr, defineCount, pIncludeHandlerPtr, ppResultPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)pSourceNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Disassemble<TThis>(this TThis thisVtbl, IDxcBlob* pSource, IDxcBlobEncoding** ppDisassembly) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, IDxcBlobEncoding**, int>)@this->LpVtbl[5])(@this, pSource, ppDisassembly);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Disassemble<TThis>(this TThis thisVtbl, IDxcBlob* pSource, ref IDxcBlobEncoding* ppDisassembly) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlobEncoding** ppDisassemblyPtr = &ppDisassembly)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, IDxcBlobEncoding**, int>)@this->LpVtbl[5])(@this, pSource, ppDisassemblyPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Disassemble<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, IDxcBlobEncoding** ppDisassembly) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, IDxcBlobEncoding**, int>)@this->LpVtbl[5])(@this, pSourcePtr, ppDisassembly);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int Disassemble<TThis>(this TThis thisVtbl, ref IDxcBlob pSource, ref IDxcBlobEncoding* ppDisassembly) where TThis : IComVtbl<IDxcCompiler>
    {
        var @this = (IDxcCompiler*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (IDxcBlob* pSourcePtr = &pSource)
        {
            fixed (IDxcBlobEncoding** ppDisassemblyPtr = &ppDisassembly)
            {
                ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, IDxcBlobEncoding**, int>)@this->LpVtbl[5])(@this, pSourcePtr, ppDisassemblyPtr);
            }
        }
        return ret;
    }

}
