// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.


using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Text;
using Silk.NET.Core;
using Silk.NET.Core.Native;
using Silk.NET.Core.Attributes;
using Silk.NET.Core.Contexts;
using Silk.NET.Core.Loader;

#pragma warning disable 1591

namespace Silk.NET.Direct3D11;

public unsafe static class D3D11Device2VtblExtensions
{
    /// <summary>To be documented.</summary>
    public static unsafe int QueryInterface<TThis>(this TThis thisVtbl, Guid* riid, void** ppvObject) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Guid*, void**, int>)@this->LpVtbl[0])(@this, riid, ppvObject);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int QueryInterface<TThis>(this TThis thisVtbl, Guid* riid, ref void* ppvObject) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void** ppvObjectPtr = &ppvObject)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Guid*, void**, int>)@this->LpVtbl[0])(@this, riid, ppvObjectPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int QueryInterface<TThis>(this TThis thisVtbl, ref Guid riid, void** ppvObject) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Guid* riidPtr = &riid)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Guid*, void**, int>)@this->LpVtbl[0])(@this, riidPtr, ppvObject);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int QueryInterface<TThis>(this TThis thisVtbl, ref Guid riid, ref void* ppvObject) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Guid* riidPtr = &riid)
        {
            fixed (void** ppvObjectPtr = &ppvObject)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Guid*, void**, int>)@this->LpVtbl[0])(@this, riidPtr, ppvObjectPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static uint AddRef<TThis>(this TThis thisVtbl) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        uint ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint>)@this->LpVtbl[1])(@this);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static uint Release<TThis>(this TThis thisVtbl) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        uint ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint>)@this->LpVtbl[2])(@this);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBuffer<TThis>(this TThis thisVtbl, BufferDesc* pDesc, SubresourceData* pInitialData, ID3D11Buffer** ppBuffer) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)@this->LpVtbl[3])(@this, pDesc, pInitialData, ppBuffer);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBuffer<TThis>(this TThis thisVtbl, BufferDesc* pDesc, SubresourceData* pInitialData, ref ID3D11Buffer* ppBuffer) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11Buffer** ppBufferPtr = &ppBuffer)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)@this->LpVtbl[3])(@this, pDesc, pInitialData, ppBufferPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBuffer<TThis>(this TThis thisVtbl, BufferDesc* pDesc, ref SubresourceData pInitialData, ID3D11Buffer** ppBuffer) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (SubresourceData* pInitialDataPtr = &pInitialData)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)@this->LpVtbl[3])(@this, pDesc, pInitialDataPtr, ppBuffer);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBuffer<TThis>(this TThis thisVtbl, BufferDesc* pDesc, ref SubresourceData pInitialData, ref ID3D11Buffer* ppBuffer) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (SubresourceData* pInitialDataPtr = &pInitialData)
        {
            fixed (ID3D11Buffer** ppBufferPtr = &ppBuffer)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)@this->LpVtbl[3])(@this, pDesc, pInitialDataPtr, ppBufferPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBuffer<TThis>(this TThis thisVtbl, ref BufferDesc pDesc, SubresourceData* pInitialData, ID3D11Buffer** ppBuffer) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (BufferDesc* pDescPtr = &pDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)@this->LpVtbl[3])(@this, pDescPtr, pInitialData, ppBuffer);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBuffer<TThis>(this TThis thisVtbl, ref BufferDesc pDesc, SubresourceData* pInitialData, ref ID3D11Buffer* ppBuffer) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (BufferDesc* pDescPtr = &pDesc)
        {
            fixed (ID3D11Buffer** ppBufferPtr = &ppBuffer)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)@this->LpVtbl[3])(@this, pDescPtr, pInitialData, ppBufferPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBuffer<TThis>(this TThis thisVtbl, ref BufferDesc pDesc, ref SubresourceData pInitialData, ID3D11Buffer** ppBuffer) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (BufferDesc* pDescPtr = &pDesc)
        {
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)@this->LpVtbl[3])(@this, pDescPtr, pInitialDataPtr, ppBuffer);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBuffer<TThis>(this TThis thisVtbl, ref BufferDesc pDesc, ref SubresourceData pInitialData, ref ID3D11Buffer* ppBuffer) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (BufferDesc* pDescPtr = &pDesc)
        {
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                fixed (ID3D11Buffer** ppBufferPtr = &ppBuffer)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)@this->LpVtbl[3])(@this, pDescPtr, pInitialDataPtr, ppBufferPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture1D<TThis>(this TThis thisVtbl, Texture1DDesc* pDesc, SubresourceData* pInitialData, ID3D11Texture1D** ppTexture1D) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)@this->LpVtbl[4])(@this, pDesc, pInitialData, ppTexture1D);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture1D<TThis>(this TThis thisVtbl, Texture1DDesc* pDesc, SubresourceData* pInitialData, ref ID3D11Texture1D* ppTexture1D) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11Texture1D** ppTexture1DPtr = &ppTexture1D)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)@this->LpVtbl[4])(@this, pDesc, pInitialData, ppTexture1DPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture1D<TThis>(this TThis thisVtbl, Texture1DDesc* pDesc, ref SubresourceData pInitialData, ID3D11Texture1D** ppTexture1D) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (SubresourceData* pInitialDataPtr = &pInitialData)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)@this->LpVtbl[4])(@this, pDesc, pInitialDataPtr, ppTexture1D);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture1D<TThis>(this TThis thisVtbl, Texture1DDesc* pDesc, ref SubresourceData pInitialData, ref ID3D11Texture1D* ppTexture1D) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (SubresourceData* pInitialDataPtr = &pInitialData)
        {
            fixed (ID3D11Texture1D** ppTexture1DPtr = &ppTexture1D)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)@this->LpVtbl[4])(@this, pDesc, pInitialDataPtr, ppTexture1DPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture1D<TThis>(this TThis thisVtbl, ref Texture1DDesc pDesc, SubresourceData* pInitialData, ID3D11Texture1D** ppTexture1D) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Texture1DDesc* pDescPtr = &pDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)@this->LpVtbl[4])(@this, pDescPtr, pInitialData, ppTexture1D);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture1D<TThis>(this TThis thisVtbl, ref Texture1DDesc pDesc, SubresourceData* pInitialData, ref ID3D11Texture1D* ppTexture1D) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Texture1DDesc* pDescPtr = &pDesc)
        {
            fixed (ID3D11Texture1D** ppTexture1DPtr = &ppTexture1D)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)@this->LpVtbl[4])(@this, pDescPtr, pInitialData, ppTexture1DPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture1D<TThis>(this TThis thisVtbl, ref Texture1DDesc pDesc, ref SubresourceData pInitialData, ID3D11Texture1D** ppTexture1D) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Texture1DDesc* pDescPtr = &pDesc)
        {
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)@this->LpVtbl[4])(@this, pDescPtr, pInitialDataPtr, ppTexture1D);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture1D<TThis>(this TThis thisVtbl, ref Texture1DDesc pDesc, ref SubresourceData pInitialData, ref ID3D11Texture1D* ppTexture1D) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Texture1DDesc* pDescPtr = &pDesc)
        {
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                fixed (ID3D11Texture1D** ppTexture1DPtr = &ppTexture1D)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)@this->LpVtbl[4])(@this, pDescPtr, pInitialDataPtr, ppTexture1DPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture2D<TThis>(this TThis thisVtbl, Texture2DDesc* pDesc, SubresourceData* pInitialData, ID3D11Texture2D** ppTexture2D) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)@this->LpVtbl[5])(@this, pDesc, pInitialData, ppTexture2D);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture2D<TThis>(this TThis thisVtbl, Texture2DDesc* pDesc, SubresourceData* pInitialData, ref ID3D11Texture2D* ppTexture2D) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11Texture2D** ppTexture2DPtr = &ppTexture2D)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)@this->LpVtbl[5])(@this, pDesc, pInitialData, ppTexture2DPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture2D<TThis>(this TThis thisVtbl, Texture2DDesc* pDesc, ref SubresourceData pInitialData, ID3D11Texture2D** ppTexture2D) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (SubresourceData* pInitialDataPtr = &pInitialData)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)@this->LpVtbl[5])(@this, pDesc, pInitialDataPtr, ppTexture2D);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture2D<TThis>(this TThis thisVtbl, Texture2DDesc* pDesc, ref SubresourceData pInitialData, ref ID3D11Texture2D* ppTexture2D) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (SubresourceData* pInitialDataPtr = &pInitialData)
        {
            fixed (ID3D11Texture2D** ppTexture2DPtr = &ppTexture2D)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)@this->LpVtbl[5])(@this, pDesc, pInitialDataPtr, ppTexture2DPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture2D<TThis>(this TThis thisVtbl, ref Texture2DDesc pDesc, SubresourceData* pInitialData, ID3D11Texture2D** ppTexture2D) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Texture2DDesc* pDescPtr = &pDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)@this->LpVtbl[5])(@this, pDescPtr, pInitialData, ppTexture2D);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture2D<TThis>(this TThis thisVtbl, ref Texture2DDesc pDesc, SubresourceData* pInitialData, ref ID3D11Texture2D* ppTexture2D) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Texture2DDesc* pDescPtr = &pDesc)
        {
            fixed (ID3D11Texture2D** ppTexture2DPtr = &ppTexture2D)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)@this->LpVtbl[5])(@this, pDescPtr, pInitialData, ppTexture2DPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture2D<TThis>(this TThis thisVtbl, ref Texture2DDesc pDesc, ref SubresourceData pInitialData, ID3D11Texture2D** ppTexture2D) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Texture2DDesc* pDescPtr = &pDesc)
        {
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)@this->LpVtbl[5])(@this, pDescPtr, pInitialDataPtr, ppTexture2D);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture2D<TThis>(this TThis thisVtbl, ref Texture2DDesc pDesc, ref SubresourceData pInitialData, ref ID3D11Texture2D* ppTexture2D) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Texture2DDesc* pDescPtr = &pDesc)
        {
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                fixed (ID3D11Texture2D** ppTexture2DPtr = &ppTexture2D)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)@this->LpVtbl[5])(@this, pDescPtr, pInitialDataPtr, ppTexture2DPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture3D<TThis>(this TThis thisVtbl, Texture3DDesc* pDesc, SubresourceData* pInitialData, ID3D11Texture3D** ppTexture3D) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)@this->LpVtbl[6])(@this, pDesc, pInitialData, ppTexture3D);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture3D<TThis>(this TThis thisVtbl, Texture3DDesc* pDesc, SubresourceData* pInitialData, ref ID3D11Texture3D* ppTexture3D) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11Texture3D** ppTexture3DPtr = &ppTexture3D)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)@this->LpVtbl[6])(@this, pDesc, pInitialData, ppTexture3DPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture3D<TThis>(this TThis thisVtbl, Texture3DDesc* pDesc, ref SubresourceData pInitialData, ID3D11Texture3D** ppTexture3D) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (SubresourceData* pInitialDataPtr = &pInitialData)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)@this->LpVtbl[6])(@this, pDesc, pInitialDataPtr, ppTexture3D);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture3D<TThis>(this TThis thisVtbl, Texture3DDesc* pDesc, ref SubresourceData pInitialData, ref ID3D11Texture3D* ppTexture3D) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (SubresourceData* pInitialDataPtr = &pInitialData)
        {
            fixed (ID3D11Texture3D** ppTexture3DPtr = &ppTexture3D)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)@this->LpVtbl[6])(@this, pDesc, pInitialDataPtr, ppTexture3DPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture3D<TThis>(this TThis thisVtbl, ref Texture3DDesc pDesc, SubresourceData* pInitialData, ID3D11Texture3D** ppTexture3D) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Texture3DDesc* pDescPtr = &pDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)@this->LpVtbl[6])(@this, pDescPtr, pInitialData, ppTexture3D);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture3D<TThis>(this TThis thisVtbl, ref Texture3DDesc pDesc, SubresourceData* pInitialData, ref ID3D11Texture3D* ppTexture3D) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Texture3DDesc* pDescPtr = &pDesc)
        {
            fixed (ID3D11Texture3D** ppTexture3DPtr = &ppTexture3D)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)@this->LpVtbl[6])(@this, pDescPtr, pInitialData, ppTexture3DPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture3D<TThis>(this TThis thisVtbl, ref Texture3DDesc pDesc, ref SubresourceData pInitialData, ID3D11Texture3D** ppTexture3D) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Texture3DDesc* pDescPtr = &pDesc)
        {
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)@this->LpVtbl[6])(@this, pDescPtr, pInitialDataPtr, ppTexture3D);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture3D<TThis>(this TThis thisVtbl, ref Texture3DDesc pDesc, ref SubresourceData pInitialData, ref ID3D11Texture3D* ppTexture3D) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Texture3DDesc* pDescPtr = &pDesc)
        {
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                fixed (ID3D11Texture3D** ppTexture3DPtr = &ppTexture3D)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)@this->LpVtbl[6])(@this, pDescPtr, pInitialDataPtr, ppTexture3DPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView<TThis>(this TThis thisVtbl, ID3D11Resource* pResource, ShaderResourceViewDesc* pDesc, ID3D11ShaderResourceView** ppSRView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)@this->LpVtbl[7])(@this, pResource, pDesc, ppSRView);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView<TThis>(this TThis thisVtbl, ID3D11Resource* pResource, ShaderResourceViewDesc* pDesc, ref ID3D11ShaderResourceView* ppSRView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11ShaderResourceView** ppSRViewPtr = &ppSRView)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)@this->LpVtbl[7])(@this, pResource, pDesc, ppSRViewPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView<TThis>(this TThis thisVtbl, ID3D11Resource* pResource, ref ShaderResourceViewDesc pDesc, ID3D11ShaderResourceView** ppSRView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ShaderResourceViewDesc* pDescPtr = &pDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)@this->LpVtbl[7])(@this, pResource, pDescPtr, ppSRView);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView<TThis>(this TThis thisVtbl, ID3D11Resource* pResource, ref ShaderResourceViewDesc pDesc, ref ID3D11ShaderResourceView* ppSRView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ShaderResourceViewDesc* pDescPtr = &pDesc)
        {
            fixed (ID3D11ShaderResourceView** ppSRViewPtr = &ppSRView)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)@this->LpVtbl[7])(@this, pResource, pDescPtr, ppSRViewPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView<TThis>(this TThis thisVtbl, ref ID3D11Resource pResource, ShaderResourceViewDesc* pDesc, ID3D11ShaderResourceView** ppSRView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)@this->LpVtbl[7])(@this, pResourcePtr, pDesc, ppSRView);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView<TThis>(this TThis thisVtbl, ref ID3D11Resource pResource, ShaderResourceViewDesc* pDesc, ref ID3D11ShaderResourceView* ppSRView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            fixed (ID3D11ShaderResourceView** ppSRViewPtr = &ppSRView)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)@this->LpVtbl[7])(@this, pResourcePtr, pDesc, ppSRViewPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView<TThis>(this TThis thisVtbl, ref ID3D11Resource pResource, ref ShaderResourceViewDesc pDesc, ID3D11ShaderResourceView** ppSRView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            fixed (ShaderResourceViewDesc* pDescPtr = &pDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)@this->LpVtbl[7])(@this, pResourcePtr, pDescPtr, ppSRView);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView<TThis>(this TThis thisVtbl, ref ID3D11Resource pResource, ref ShaderResourceViewDesc pDesc, ref ID3D11ShaderResourceView* ppSRView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            fixed (ShaderResourceViewDesc* pDescPtr = &pDesc)
            {
                fixed (ID3D11ShaderResourceView** ppSRViewPtr = &ppSRView)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)@this->LpVtbl[7])(@this, pResourcePtr, pDescPtr, ppSRViewPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView<TThis>(this TThis thisVtbl, ID3D11Resource* pResource, UnorderedAccessViewDesc* pDesc, ID3D11UnorderedAccessView** ppUAView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)@this->LpVtbl[8])(@this, pResource, pDesc, ppUAView);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView<TThis>(this TThis thisVtbl, ID3D11Resource* pResource, UnorderedAccessViewDesc* pDesc, ref ID3D11UnorderedAccessView* ppUAView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11UnorderedAccessView** ppUAViewPtr = &ppUAView)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)@this->LpVtbl[8])(@this, pResource, pDesc, ppUAViewPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView<TThis>(this TThis thisVtbl, ID3D11Resource* pResource, ref UnorderedAccessViewDesc pDesc, ID3D11UnorderedAccessView** ppUAView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (UnorderedAccessViewDesc* pDescPtr = &pDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)@this->LpVtbl[8])(@this, pResource, pDescPtr, ppUAView);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView<TThis>(this TThis thisVtbl, ID3D11Resource* pResource, ref UnorderedAccessViewDesc pDesc, ref ID3D11UnorderedAccessView* ppUAView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (UnorderedAccessViewDesc* pDescPtr = &pDesc)
        {
            fixed (ID3D11UnorderedAccessView** ppUAViewPtr = &ppUAView)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)@this->LpVtbl[8])(@this, pResource, pDescPtr, ppUAViewPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView<TThis>(this TThis thisVtbl, ref ID3D11Resource pResource, UnorderedAccessViewDesc* pDesc, ID3D11UnorderedAccessView** ppUAView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)@this->LpVtbl[8])(@this, pResourcePtr, pDesc, ppUAView);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView<TThis>(this TThis thisVtbl, ref ID3D11Resource pResource, UnorderedAccessViewDesc* pDesc, ref ID3D11UnorderedAccessView* ppUAView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            fixed (ID3D11UnorderedAccessView** ppUAViewPtr = &ppUAView)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)@this->LpVtbl[8])(@this, pResourcePtr, pDesc, ppUAViewPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView<TThis>(this TThis thisVtbl, ref ID3D11Resource pResource, ref UnorderedAccessViewDesc pDesc, ID3D11UnorderedAccessView** ppUAView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            fixed (UnorderedAccessViewDesc* pDescPtr = &pDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)@this->LpVtbl[8])(@this, pResourcePtr, pDescPtr, ppUAView);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView<TThis>(this TThis thisVtbl, ref ID3D11Resource pResource, ref UnorderedAccessViewDesc pDesc, ref ID3D11UnorderedAccessView* ppUAView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            fixed (UnorderedAccessViewDesc* pDescPtr = &pDesc)
            {
                fixed (ID3D11UnorderedAccessView** ppUAViewPtr = &ppUAView)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)@this->LpVtbl[8])(@this, pResourcePtr, pDescPtr, ppUAViewPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView<TThis>(this TThis thisVtbl, ID3D11Resource* pResource, RenderTargetViewDesc* pDesc, ID3D11RenderTargetView** ppRTView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)@this->LpVtbl[9])(@this, pResource, pDesc, ppRTView);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView<TThis>(this TThis thisVtbl, ID3D11Resource* pResource, RenderTargetViewDesc* pDesc, ref ID3D11RenderTargetView* ppRTView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11RenderTargetView** ppRTViewPtr = &ppRTView)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)@this->LpVtbl[9])(@this, pResource, pDesc, ppRTViewPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView<TThis>(this TThis thisVtbl, ID3D11Resource* pResource, ref RenderTargetViewDesc pDesc, ID3D11RenderTargetView** ppRTView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (RenderTargetViewDesc* pDescPtr = &pDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)@this->LpVtbl[9])(@this, pResource, pDescPtr, ppRTView);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView<TThis>(this TThis thisVtbl, ID3D11Resource* pResource, ref RenderTargetViewDesc pDesc, ref ID3D11RenderTargetView* ppRTView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (RenderTargetViewDesc* pDescPtr = &pDesc)
        {
            fixed (ID3D11RenderTargetView** ppRTViewPtr = &ppRTView)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)@this->LpVtbl[9])(@this, pResource, pDescPtr, ppRTViewPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView<TThis>(this TThis thisVtbl, ref ID3D11Resource pResource, RenderTargetViewDesc* pDesc, ID3D11RenderTargetView** ppRTView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)@this->LpVtbl[9])(@this, pResourcePtr, pDesc, ppRTView);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView<TThis>(this TThis thisVtbl, ref ID3D11Resource pResource, RenderTargetViewDesc* pDesc, ref ID3D11RenderTargetView* ppRTView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            fixed (ID3D11RenderTargetView** ppRTViewPtr = &ppRTView)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)@this->LpVtbl[9])(@this, pResourcePtr, pDesc, ppRTViewPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView<TThis>(this TThis thisVtbl, ref ID3D11Resource pResource, ref RenderTargetViewDesc pDesc, ID3D11RenderTargetView** ppRTView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            fixed (RenderTargetViewDesc* pDescPtr = &pDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)@this->LpVtbl[9])(@this, pResourcePtr, pDescPtr, ppRTView);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView<TThis>(this TThis thisVtbl, ref ID3D11Resource pResource, ref RenderTargetViewDesc pDesc, ref ID3D11RenderTargetView* ppRTView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            fixed (RenderTargetViewDesc* pDescPtr = &pDesc)
            {
                fixed (ID3D11RenderTargetView** ppRTViewPtr = &ppRTView)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)@this->LpVtbl[9])(@this, pResourcePtr, pDescPtr, ppRTViewPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView<TThis>(this TThis thisVtbl, ID3D11Resource* pResource, DepthStencilViewDesc* pDesc, ID3D11DepthStencilView** ppDepthStencilView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)@this->LpVtbl[10])(@this, pResource, pDesc, ppDepthStencilView);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView<TThis>(this TThis thisVtbl, ID3D11Resource* pResource, DepthStencilViewDesc* pDesc, ref ID3D11DepthStencilView* ppDepthStencilView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11DepthStencilView** ppDepthStencilViewPtr = &ppDepthStencilView)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)@this->LpVtbl[10])(@this, pResource, pDesc, ppDepthStencilViewPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView<TThis>(this TThis thisVtbl, ID3D11Resource* pResource, ref DepthStencilViewDesc pDesc, ID3D11DepthStencilView** ppDepthStencilView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (DepthStencilViewDesc* pDescPtr = &pDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)@this->LpVtbl[10])(@this, pResource, pDescPtr, ppDepthStencilView);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView<TThis>(this TThis thisVtbl, ID3D11Resource* pResource, ref DepthStencilViewDesc pDesc, ref ID3D11DepthStencilView* ppDepthStencilView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (DepthStencilViewDesc* pDescPtr = &pDesc)
        {
            fixed (ID3D11DepthStencilView** ppDepthStencilViewPtr = &ppDepthStencilView)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)@this->LpVtbl[10])(@this, pResource, pDescPtr, ppDepthStencilViewPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView<TThis>(this TThis thisVtbl, ref ID3D11Resource pResource, DepthStencilViewDesc* pDesc, ID3D11DepthStencilView** ppDepthStencilView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)@this->LpVtbl[10])(@this, pResourcePtr, pDesc, ppDepthStencilView);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView<TThis>(this TThis thisVtbl, ref ID3D11Resource pResource, DepthStencilViewDesc* pDesc, ref ID3D11DepthStencilView* ppDepthStencilView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            fixed (ID3D11DepthStencilView** ppDepthStencilViewPtr = &ppDepthStencilView)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)@this->LpVtbl[10])(@this, pResourcePtr, pDesc, ppDepthStencilViewPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView<TThis>(this TThis thisVtbl, ref ID3D11Resource pResource, ref DepthStencilViewDesc pDesc, ID3D11DepthStencilView** ppDepthStencilView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            fixed (DepthStencilViewDesc* pDescPtr = &pDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)@this->LpVtbl[10])(@this, pResourcePtr, pDescPtr, ppDepthStencilView);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView<TThis>(this TThis thisVtbl, ref ID3D11Resource pResource, ref DepthStencilViewDesc pDesc, ref ID3D11DepthStencilView* ppDepthStencilView) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            fixed (DepthStencilViewDesc* pDescPtr = &pDesc)
            {
                fixed (ID3D11DepthStencilView** ppDepthStencilViewPtr = &ppDepthStencilView)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)@this->LpVtbl[10])(@this, pResourcePtr, pDescPtr, ppDepthStencilViewPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateInputLayout<TThis>(this TThis thisVtbl, InputElementDesc* pInputElementDescs, uint NumElements, void* pShaderBytecodeWithInputSignature, nuint BytecodeLength, ID3D11InputLayout** ppInputLayout) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, int>)@this->LpVtbl[11])(@this, pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayout);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateInputLayout<TThis>(this TThis thisVtbl, InputElementDesc* pInputElementDescs, uint NumElements, void* pShaderBytecodeWithInputSignature, nuint BytecodeLength, ref ID3D11InputLayout* ppInputLayout) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11InputLayout** ppInputLayoutPtr = &ppInputLayout)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, int>)@this->LpVtbl[11])(@this, pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayoutPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateInputLayout<T0, TThis>(this TThis thisVtbl, InputElementDesc* pInputElementDescs, uint NumElements, ref T0 pShaderBytecodeWithInputSignature, nuint BytecodeLength, ID3D11InputLayout** ppInputLayout) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodeWithInputSignaturePtr = &pShaderBytecodeWithInputSignature)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, int>)@this->LpVtbl[11])(@this, pInputElementDescs, NumElements, pShaderBytecodeWithInputSignaturePtr, BytecodeLength, ppInputLayout);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateInputLayout<T0, TThis>(this TThis thisVtbl, InputElementDesc* pInputElementDescs, uint NumElements, ref T0 pShaderBytecodeWithInputSignature, nuint BytecodeLength, ref ID3D11InputLayout* ppInputLayout) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodeWithInputSignaturePtr = &pShaderBytecodeWithInputSignature)
        {
            fixed (ID3D11InputLayout** ppInputLayoutPtr = &ppInputLayout)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, int>)@this->LpVtbl[11])(@this, pInputElementDescs, NumElements, pShaderBytecodeWithInputSignaturePtr, BytecodeLength, ppInputLayoutPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateInputLayout<TThis>(this TThis thisVtbl, ref InputElementDesc pInputElementDescs, uint NumElements, void* pShaderBytecodeWithInputSignature, nuint BytecodeLength, ID3D11InputLayout** ppInputLayout) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (InputElementDesc* pInputElementDescsPtr = &pInputElementDescs)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, int>)@this->LpVtbl[11])(@this, pInputElementDescsPtr, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayout);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateInputLayout<TThis>(this TThis thisVtbl, ref InputElementDesc pInputElementDescs, uint NumElements, void* pShaderBytecodeWithInputSignature, nuint BytecodeLength, ref ID3D11InputLayout* ppInputLayout) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (InputElementDesc* pInputElementDescsPtr = &pInputElementDescs)
        {
            fixed (ID3D11InputLayout** ppInputLayoutPtr = &ppInputLayout)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, int>)@this->LpVtbl[11])(@this, pInputElementDescsPtr, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayoutPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateInputLayout<T0, TThis>(this TThis thisVtbl, ref InputElementDesc pInputElementDescs, uint NumElements, ref T0 pShaderBytecodeWithInputSignature, nuint BytecodeLength, ID3D11InputLayout** ppInputLayout) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (InputElementDesc* pInputElementDescsPtr = &pInputElementDescs)
        {
            fixed (void* pShaderBytecodeWithInputSignaturePtr = &pShaderBytecodeWithInputSignature)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, int>)@this->LpVtbl[11])(@this, pInputElementDescsPtr, NumElements, pShaderBytecodeWithInputSignaturePtr, BytecodeLength, ppInputLayout);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateInputLayout<T0, TThis>(this TThis thisVtbl, ref InputElementDesc pInputElementDescs, uint NumElements, ref T0 pShaderBytecodeWithInputSignature, nuint BytecodeLength, ref ID3D11InputLayout* ppInputLayout) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (InputElementDesc* pInputElementDescsPtr = &pInputElementDescs)
        {
            fixed (void* pShaderBytecodeWithInputSignaturePtr = &pShaderBytecodeWithInputSignature)
            {
                fixed (ID3D11InputLayout** ppInputLayoutPtr = &ppInputLayout)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, int>)@this->LpVtbl[11])(@this, pInputElementDescsPtr, NumElements, pShaderBytecodeWithInputSignaturePtr, BytecodeLength, ppInputLayoutPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11VertexShader** ppVertexShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)@this->LpVtbl[12])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppVertexShader);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11VertexShader* ppVertexShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11VertexShader** ppVertexShaderPtr = &ppVertexShader)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)@this->LpVtbl[12])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppVertexShaderPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11VertexShader** ppVertexShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)@this->LpVtbl[12])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppVertexShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11VertexShader* ppVertexShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            fixed (ID3D11VertexShader** ppVertexShaderPtr = &ppVertexShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)@this->LpVtbl[12])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppVertexShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11VertexShader** ppVertexShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)@this->LpVtbl[12])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppVertexShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11VertexShader* ppVertexShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11VertexShader** ppVertexShaderPtr = &ppVertexShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)@this->LpVtbl[12])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppVertexShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11VertexShader** ppVertexShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)@this->LpVtbl[12])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppVertexShader);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11VertexShader* ppVertexShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                fixed (ID3D11VertexShader** ppVertexShaderPtr = &ppVertexShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)@this->LpVtbl[12])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppVertexShaderPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[13])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppGeometryShader);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[13])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppGeometryShaderPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[13])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppGeometryShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[13])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppGeometryShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[13])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppGeometryShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[13])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppGeometryShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[13])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppGeometryShader);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[13])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppGeometryShaderPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pBufferStridesPtr = &pBufferStrides)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pBufferStridesPtr = &pBufferStrides)
        {
            fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pBufferStridesPtr = &pBufferStrides)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pBufferStridesPtr = &pBufferStrides)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
        {
            fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
        {
            fixed (uint* pBufferStridesPtr = &pBufferStrides)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
        {
            fixed (uint* pBufferStridesPtr = &pBufferStrides)
            {
                fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
        {
            fixed (uint* pBufferStridesPtr = &pBufferStrides)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
        {
            fixed (uint* pBufferStridesPtr = &pBufferStrides)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (uint* pBufferStridesPtr = &pBufferStrides)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (uint* pBufferStridesPtr = &pBufferStrides)
            {
                fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (uint* pBufferStridesPtr = &pBufferStrides)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (uint* pBufferStridesPtr = &pBufferStrides)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
            {
                fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
            {
                fixed (uint* pBufferStridesPtr = &pBufferStrides)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
            {
                fixed (uint* pBufferStridesPtr = &pBufferStrides)
                {
                    fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
            {
                fixed (uint* pBufferStridesPtr = &pBufferStrides)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
            {
                fixed (uint* pBufferStridesPtr = &pBufferStrides)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11PixelShader** ppPixelShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)@this->LpVtbl[15])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppPixelShader);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11PixelShader* ppPixelShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11PixelShader** ppPixelShaderPtr = &ppPixelShader)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)@this->LpVtbl[15])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppPixelShaderPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11PixelShader** ppPixelShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)@this->LpVtbl[15])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppPixelShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11PixelShader* ppPixelShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            fixed (ID3D11PixelShader** ppPixelShaderPtr = &ppPixelShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)@this->LpVtbl[15])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppPixelShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11PixelShader** ppPixelShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)@this->LpVtbl[15])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppPixelShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11PixelShader* ppPixelShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11PixelShader** ppPixelShaderPtr = &ppPixelShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)@this->LpVtbl[15])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppPixelShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11PixelShader** ppPixelShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)@this->LpVtbl[15])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppPixelShader);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11PixelShader* ppPixelShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                fixed (ID3D11PixelShader** ppPixelShaderPtr = &ppPixelShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)@this->LpVtbl[15])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppPixelShaderPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11HullShader** ppHullShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)@this->LpVtbl[16])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppHullShader);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11HullShader* ppHullShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11HullShader** ppHullShaderPtr = &ppHullShader)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)@this->LpVtbl[16])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppHullShaderPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11HullShader** ppHullShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)@this->LpVtbl[16])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppHullShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11HullShader* ppHullShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            fixed (ID3D11HullShader** ppHullShaderPtr = &ppHullShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)@this->LpVtbl[16])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppHullShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11HullShader** ppHullShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)@this->LpVtbl[16])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppHullShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11HullShader* ppHullShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11HullShader** ppHullShaderPtr = &ppHullShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)@this->LpVtbl[16])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppHullShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11HullShader** ppHullShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)@this->LpVtbl[16])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppHullShader);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11HullShader* ppHullShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                fixed (ID3D11HullShader** ppHullShaderPtr = &ppHullShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)@this->LpVtbl[16])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppHullShaderPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11DomainShader** ppDomainShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)@this->LpVtbl[17])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppDomainShader);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11DomainShader* ppDomainShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11DomainShader** ppDomainShaderPtr = &ppDomainShader)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)@this->LpVtbl[17])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppDomainShaderPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11DomainShader** ppDomainShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)@this->LpVtbl[17])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppDomainShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11DomainShader* ppDomainShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            fixed (ID3D11DomainShader** ppDomainShaderPtr = &ppDomainShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)@this->LpVtbl[17])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppDomainShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11DomainShader** ppDomainShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)@this->LpVtbl[17])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppDomainShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11DomainShader* ppDomainShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11DomainShader** ppDomainShaderPtr = &ppDomainShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)@this->LpVtbl[17])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppDomainShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11DomainShader** ppDomainShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)@this->LpVtbl[17])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppDomainShader);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11DomainShader* ppDomainShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                fixed (ID3D11DomainShader** ppDomainShaderPtr = &ppDomainShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)@this->LpVtbl[17])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppDomainShaderPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11ComputeShader** ppComputeShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)@this->LpVtbl[18])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppComputeShader);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11ComputeShader* ppComputeShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11ComputeShader** ppComputeShaderPtr = &ppComputeShader)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)@this->LpVtbl[18])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppComputeShaderPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11ComputeShader** ppComputeShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)@this->LpVtbl[18])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppComputeShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader<TThis>(this TThis thisVtbl, void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11ComputeShader* ppComputeShader) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            fixed (ID3D11ComputeShader** ppComputeShaderPtr = &ppComputeShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)@this->LpVtbl[18])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppComputeShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11ComputeShader** ppComputeShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)@this->LpVtbl[18])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppComputeShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11ComputeShader* ppComputeShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ComputeShader** ppComputeShaderPtr = &ppComputeShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)@this->LpVtbl[18])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppComputeShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11ComputeShader** ppComputeShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)@this->LpVtbl[18])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppComputeShader);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader<T0, TThis>(this TThis thisVtbl, ref T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11ComputeShader* ppComputeShader) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                fixed (ID3D11ComputeShader** ppComputeShaderPtr = &ppComputeShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)@this->LpVtbl[18])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppComputeShaderPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateClassLinkage<TThis>(this TThis thisVtbl, ID3D11ClassLinkage** ppLinkage) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11ClassLinkage**, int>)@this->LpVtbl[19])(@this, ppLinkage);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateClassLinkage<TThis>(this TThis thisVtbl, ref ID3D11ClassLinkage* ppLinkage) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11ClassLinkage** ppLinkagePtr = &ppLinkage)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11ClassLinkage**, int>)@this->LpVtbl[19])(@this, ppLinkagePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBlendState<TThis>(this TThis thisVtbl, BlendDesc* pBlendStateDesc, ID3D11BlendState** ppBlendState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, BlendDesc*, ID3D11BlendState**, int>)@this->LpVtbl[20])(@this, pBlendStateDesc, ppBlendState);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBlendState<TThis>(this TThis thisVtbl, BlendDesc* pBlendStateDesc, ref ID3D11BlendState* ppBlendState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11BlendState** ppBlendStatePtr = &ppBlendState)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, BlendDesc*, ID3D11BlendState**, int>)@this->LpVtbl[20])(@this, pBlendStateDesc, ppBlendStatePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBlendState<TThis>(this TThis thisVtbl, ref BlendDesc pBlendStateDesc, ID3D11BlendState** ppBlendState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (BlendDesc* pBlendStateDescPtr = &pBlendStateDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, BlendDesc*, ID3D11BlendState**, int>)@this->LpVtbl[20])(@this, pBlendStateDescPtr, ppBlendState);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBlendState<TThis>(this TThis thisVtbl, ref BlendDesc pBlendStateDesc, ref ID3D11BlendState* ppBlendState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (BlendDesc* pBlendStateDescPtr = &pBlendStateDesc)
        {
            fixed (ID3D11BlendState** ppBlendStatePtr = &ppBlendState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, BlendDesc*, ID3D11BlendState**, int>)@this->LpVtbl[20])(@this, pBlendStateDescPtr, ppBlendStatePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilState<TThis>(this TThis thisVtbl, DepthStencilDesc* pDepthStencilDesc, ID3D11DepthStencilState** ppDepthStencilState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, DepthStencilDesc*, ID3D11DepthStencilState**, int>)@this->LpVtbl[21])(@this, pDepthStencilDesc, ppDepthStencilState);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilState<TThis>(this TThis thisVtbl, DepthStencilDesc* pDepthStencilDesc, ref ID3D11DepthStencilState* ppDepthStencilState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11DepthStencilState** ppDepthStencilStatePtr = &ppDepthStencilState)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, DepthStencilDesc*, ID3D11DepthStencilState**, int>)@this->LpVtbl[21])(@this, pDepthStencilDesc, ppDepthStencilStatePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilState<TThis>(this TThis thisVtbl, ref DepthStencilDesc pDepthStencilDesc, ID3D11DepthStencilState** ppDepthStencilState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (DepthStencilDesc* pDepthStencilDescPtr = &pDepthStencilDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, DepthStencilDesc*, ID3D11DepthStencilState**, int>)@this->LpVtbl[21])(@this, pDepthStencilDescPtr, ppDepthStencilState);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilState<TThis>(this TThis thisVtbl, ref DepthStencilDesc pDepthStencilDesc, ref ID3D11DepthStencilState* ppDepthStencilState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (DepthStencilDesc* pDepthStencilDescPtr = &pDepthStencilDesc)
        {
            fixed (ID3D11DepthStencilState** ppDepthStencilStatePtr = &ppDepthStencilState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, DepthStencilDesc*, ID3D11DepthStencilState**, int>)@this->LpVtbl[21])(@this, pDepthStencilDescPtr, ppDepthStencilStatePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRasterizerState<TThis>(this TThis thisVtbl, RasterizerDesc* pRasterizerDesc, ID3D11RasterizerState** ppRasterizerState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, RasterizerDesc*, ID3D11RasterizerState**, int>)@this->LpVtbl[22])(@this, pRasterizerDesc, ppRasterizerState);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRasterizerState<TThis>(this TThis thisVtbl, RasterizerDesc* pRasterizerDesc, ref ID3D11RasterizerState* ppRasterizerState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11RasterizerState** ppRasterizerStatePtr = &ppRasterizerState)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, RasterizerDesc*, ID3D11RasterizerState**, int>)@this->LpVtbl[22])(@this, pRasterizerDesc, ppRasterizerStatePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRasterizerState<TThis>(this TThis thisVtbl, ref RasterizerDesc pRasterizerDesc, ID3D11RasterizerState** ppRasterizerState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (RasterizerDesc* pRasterizerDescPtr = &pRasterizerDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, RasterizerDesc*, ID3D11RasterizerState**, int>)@this->LpVtbl[22])(@this, pRasterizerDescPtr, ppRasterizerState);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRasterizerState<TThis>(this TThis thisVtbl, ref RasterizerDesc pRasterizerDesc, ref ID3D11RasterizerState* ppRasterizerState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (RasterizerDesc* pRasterizerDescPtr = &pRasterizerDesc)
        {
            fixed (ID3D11RasterizerState** ppRasterizerStatePtr = &ppRasterizerState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, RasterizerDesc*, ID3D11RasterizerState**, int>)@this->LpVtbl[22])(@this, pRasterizerDescPtr, ppRasterizerStatePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateSamplerState<TThis>(this TThis thisVtbl, SamplerDesc* pSamplerDesc, ID3D11SamplerState** ppSamplerState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, SamplerDesc*, ID3D11SamplerState**, int>)@this->LpVtbl[23])(@this, pSamplerDesc, ppSamplerState);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateSamplerState<TThis>(this TThis thisVtbl, SamplerDesc* pSamplerDesc, ref ID3D11SamplerState* ppSamplerState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11SamplerState** ppSamplerStatePtr = &ppSamplerState)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, SamplerDesc*, ID3D11SamplerState**, int>)@this->LpVtbl[23])(@this, pSamplerDesc, ppSamplerStatePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateSamplerState<TThis>(this TThis thisVtbl, ref SamplerDesc pSamplerDesc, ID3D11SamplerState** ppSamplerState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (SamplerDesc* pSamplerDescPtr = &pSamplerDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, SamplerDesc*, ID3D11SamplerState**, int>)@this->LpVtbl[23])(@this, pSamplerDescPtr, ppSamplerState);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateSamplerState<TThis>(this TThis thisVtbl, ref SamplerDesc pSamplerDesc, ref ID3D11SamplerState* ppSamplerState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (SamplerDesc* pSamplerDescPtr = &pSamplerDesc)
        {
            fixed (ID3D11SamplerState** ppSamplerStatePtr = &ppSamplerState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, SamplerDesc*, ID3D11SamplerState**, int>)@this->LpVtbl[23])(@this, pSamplerDescPtr, ppSamplerStatePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateQuery<TThis>(this TThis thisVtbl, QueryDesc* pQueryDesc, ID3D11Query** ppQuery) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, QueryDesc*, ID3D11Query**, int>)@this->LpVtbl[24])(@this, pQueryDesc, ppQuery);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateQuery<TThis>(this TThis thisVtbl, QueryDesc* pQueryDesc, ref ID3D11Query* ppQuery) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11Query** ppQueryPtr = &ppQuery)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, QueryDesc*, ID3D11Query**, int>)@this->LpVtbl[24])(@this, pQueryDesc, ppQueryPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateQuery<TThis>(this TThis thisVtbl, ref QueryDesc pQueryDesc, ID3D11Query** ppQuery) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (QueryDesc* pQueryDescPtr = &pQueryDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, QueryDesc*, ID3D11Query**, int>)@this->LpVtbl[24])(@this, pQueryDescPtr, ppQuery);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateQuery<TThis>(this TThis thisVtbl, ref QueryDesc pQueryDesc, ref ID3D11Query* ppQuery) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (QueryDesc* pQueryDescPtr = &pQueryDesc)
        {
            fixed (ID3D11Query** ppQueryPtr = &ppQuery)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, QueryDesc*, ID3D11Query**, int>)@this->LpVtbl[24])(@this, pQueryDescPtr, ppQueryPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePredicate<TThis>(this TThis thisVtbl, QueryDesc* pPredicateDesc, ID3D11Predicate** ppPredicate) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, QueryDesc*, ID3D11Predicate**, int>)@this->LpVtbl[25])(@this, pPredicateDesc, ppPredicate);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePredicate<TThis>(this TThis thisVtbl, QueryDesc* pPredicateDesc, ref ID3D11Predicate* ppPredicate) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11Predicate** ppPredicatePtr = &ppPredicate)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, QueryDesc*, ID3D11Predicate**, int>)@this->LpVtbl[25])(@this, pPredicateDesc, ppPredicatePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePredicate<TThis>(this TThis thisVtbl, ref QueryDesc pPredicateDesc, ID3D11Predicate** ppPredicate) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (QueryDesc* pPredicateDescPtr = &pPredicateDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, QueryDesc*, ID3D11Predicate**, int>)@this->LpVtbl[25])(@this, pPredicateDescPtr, ppPredicate);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePredicate<TThis>(this TThis thisVtbl, ref QueryDesc pPredicateDesc, ref ID3D11Predicate* ppPredicate) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (QueryDesc* pPredicateDescPtr = &pPredicateDesc)
        {
            fixed (ID3D11Predicate** ppPredicatePtr = &ppPredicate)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, QueryDesc*, ID3D11Predicate**, int>)@this->LpVtbl[25])(@this, pPredicateDescPtr, ppPredicatePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateCounter<TThis>(this TThis thisVtbl, CounterDesc* pCounterDesc, ID3D11Counter** ppCounter) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, ID3D11Counter**, int>)@this->LpVtbl[26])(@this, pCounterDesc, ppCounter);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateCounter<TThis>(this TThis thisVtbl, CounterDesc* pCounterDesc, ref ID3D11Counter* ppCounter) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11Counter** ppCounterPtr = &ppCounter)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, ID3D11Counter**, int>)@this->LpVtbl[26])(@this, pCounterDesc, ppCounterPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateCounter<TThis>(this TThis thisVtbl, ref CounterDesc pCounterDesc, ID3D11Counter** ppCounter) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pCounterDescPtr = &pCounterDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, ID3D11Counter**, int>)@this->LpVtbl[26])(@this, pCounterDescPtr, ppCounter);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateCounter<TThis>(this TThis thisVtbl, ref CounterDesc pCounterDesc, ref ID3D11Counter* ppCounter) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pCounterDescPtr = &pCounterDesc)
        {
            fixed (ID3D11Counter** ppCounterPtr = &ppCounter)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, ID3D11Counter**, int>)@this->LpVtbl[26])(@this, pCounterDescPtr, ppCounterPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeferredContext<TThis>(this TThis thisVtbl, uint ContextFlags, ID3D11DeviceContext** ppDeferredContext) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint, ID3D11DeviceContext**, int>)@this->LpVtbl[27])(@this, ContextFlags, ppDeferredContext);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeferredContext<TThis>(this TThis thisVtbl, uint ContextFlags, ref ID3D11DeviceContext* ppDeferredContext) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11DeviceContext** ppDeferredContextPtr = &ppDeferredContext)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint, ID3D11DeviceContext**, int>)@this->LpVtbl[27])(@this, ContextFlags, ppDeferredContextPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource<TThis>(this TThis thisVtbl, void* hResource, Guid* ReturnedInterface, void** ppResource) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, Guid*, void**, int>)@this->LpVtbl[28])(@this, hResource, ReturnedInterface, ppResource);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource<TThis>(this TThis thisVtbl, void* hResource, Guid* ReturnedInterface, ref void* ppResource) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void** ppResourcePtr = &ppResource)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, Guid*, void**, int>)@this->LpVtbl[28])(@this, hResource, ReturnedInterface, ppResourcePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource<TThis>(this TThis thisVtbl, void* hResource, ref Guid ReturnedInterface, void** ppResource) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Guid* ReturnedInterfacePtr = &ReturnedInterface)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, Guid*, void**, int>)@this->LpVtbl[28])(@this, hResource, ReturnedInterfacePtr, ppResource);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource<TThis>(this TThis thisVtbl, void* hResource, ref Guid ReturnedInterface, ref void* ppResource) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Guid* ReturnedInterfacePtr = &ReturnedInterface)
        {
            fixed (void** ppResourcePtr = &ppResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, Guid*, void**, int>)@this->LpVtbl[28])(@this, hResource, ReturnedInterfacePtr, ppResourcePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource<T0, TThis>(this TThis thisVtbl, ref T0 hResource, Guid* ReturnedInterface, void** ppResource) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* hResourcePtr = &hResource)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, Guid*, void**, int>)@this->LpVtbl[28])(@this, hResourcePtr, ReturnedInterface, ppResource);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource<T0, TThis>(this TThis thisVtbl, ref T0 hResource, Guid* ReturnedInterface, ref void* ppResource) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* hResourcePtr = &hResource)
        {
            fixed (void** ppResourcePtr = &ppResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, Guid*, void**, int>)@this->LpVtbl[28])(@this, hResourcePtr, ReturnedInterface, ppResourcePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource<T0, TThis>(this TThis thisVtbl, ref T0 hResource, ref Guid ReturnedInterface, void** ppResource) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* hResourcePtr = &hResource)
        {
            fixed (Guid* ReturnedInterfacePtr = &ReturnedInterface)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, Guid*, void**, int>)@this->LpVtbl[28])(@this, hResourcePtr, ReturnedInterfacePtr, ppResource);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource<T0, TThis>(this TThis thisVtbl, ref T0 hResource, ref Guid ReturnedInterface, ref void* ppResource) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* hResourcePtr = &hResource)
        {
            fixed (Guid* ReturnedInterfacePtr = &ReturnedInterface)
            {
                fixed (void** ppResourcePtr = &ppResource)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, Guid*, void**, int>)@this->LpVtbl[28])(@this, hResourcePtr, ReturnedInterfacePtr, ppResourcePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckFormatSupport<TThis>(this TThis thisVtbl, Silk.NET.DXGI.Format Format, uint* pFormatSupport) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Silk.NET.DXGI.Format, uint*, int>)@this->LpVtbl[29])(@this, Format, pFormatSupport);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int CheckFormatSupport<TThis>(this TThis thisVtbl, Silk.NET.DXGI.Format Format, ref uint pFormatSupport) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pFormatSupportPtr = &pFormatSupport)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Silk.NET.DXGI.Format, uint*, int>)@this->LpVtbl[29])(@this, Format, pFormatSupportPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckMultisampleQualityLevels<TThis>(this TThis thisVtbl, Silk.NET.DXGI.Format Format, uint SampleCount, uint* pNumQualityLevels) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Silk.NET.DXGI.Format, uint, uint*, int>)@this->LpVtbl[30])(@this, Format, SampleCount, pNumQualityLevels);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int CheckMultisampleQualityLevels<TThis>(this TThis thisVtbl, Silk.NET.DXGI.Format Format, uint SampleCount, ref uint pNumQualityLevels) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNumQualityLevelsPtr = &pNumQualityLevels)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Silk.NET.DXGI.Format, uint, uint*, int>)@this->LpVtbl[30])(@this, Format, SampleCount, pNumQualityLevelsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe void CheckCounterInfo<TThis>(this TThis thisVtbl, CounterInfo* pCounterInfo) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterInfo*, void>)@this->LpVtbl[31])(@this, pCounterInfo);
    }

    /// <summary>To be documented.</summary>
    public static void CheckCounterInfo<TThis>(this TThis thisVtbl, ref CounterInfo pCounterInfo) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (CounterInfo* pCounterInfoPtr = &pCounterInfo)
        {
            ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterInfo*, void>)@this->LpVtbl[31])(@this, pCounterInfoPtr);
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szDescriptionPtr = &szDescription)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szDescriptionPtr = &szDescription)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
        }
        SilkMarshal.Free((nint)szDescriptionPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szUnitsPtr = &szUnits)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szUnitsPtr = &szUnits)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szUnitsPtr = &szUnits)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (byte* szDescriptionPtr = &szDescription)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (byte* szDescriptionPtr = &szDescription)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
        }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
            }
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            }
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szDescriptionPtr = &szDescription)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szDescriptionPtr = &szDescription)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
        }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szUnitsPtr = &szUnits)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szUnitsPtr = &szUnits)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szUnitsPtr = &szUnits)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (byte* szDescriptionPtr = &szDescription)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (byte* szDescriptionPtr = &szDescription)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
        }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
            }
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            }
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
        SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
        SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
        SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
        SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
        SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
        SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
        SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
        SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int CheckCounter<TThis>(this TThis thisVtbl, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckFeatureSupport<TThis>(this TThis thisVtbl, Feature Feature, void* pFeatureSupportData, uint FeatureSupportDataSize) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Feature, void*, uint, int>)@this->LpVtbl[33])(@this, Feature, pFeatureSupportData, FeatureSupportDataSize);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int CheckFeatureSupport<T0, TThis>(this TThis thisVtbl, Feature Feature, ref T0 pFeatureSupportData, uint FeatureSupportDataSize) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pFeatureSupportDataPtr = &pFeatureSupportData)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Feature, void*, uint, int>)@this->LpVtbl[33])(@this, Feature, pFeatureSupportDataPtr, FeatureSupportDataSize);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int GetPrivateData<TThis>(this TThis thisVtbl, Guid* guid, uint* pDataSize, void* pData) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Guid*, uint*, void*, int>)@this->LpVtbl[34])(@this, guid, pDataSize, pData);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int GetPrivateData<T0, TThis>(this TThis thisVtbl, Guid* guid, uint* pDataSize, ref T0 pData) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pDataPtr = &pData)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Guid*, uint*, void*, int>)@this->LpVtbl[34])(@this, guid, pDataSize, pDataPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int GetPrivateData<TThis>(this TThis thisVtbl, Guid* guid, ref uint pDataSize, void* pData) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pDataSizePtr = &pDataSize)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Guid*, uint*, void*, int>)@this->LpVtbl[34])(@this, guid, pDataSizePtr, pData);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int GetPrivateData<T0, TThis>(this TThis thisVtbl, Guid* guid, ref uint pDataSize, ref T0 pData) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pDataSizePtr = &pDataSize)
        {
            fixed (void* pDataPtr = &pData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Guid*, uint*, void*, int>)@this->LpVtbl[34])(@this, guid, pDataSizePtr, pDataPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int GetPrivateData<TThis>(this TThis thisVtbl, ref Guid guid, uint* pDataSize, void* pData) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Guid* guidPtr = &guid)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Guid*, uint*, void*, int>)@this->LpVtbl[34])(@this, guidPtr, pDataSize, pData);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int GetPrivateData<T0, TThis>(this TThis thisVtbl, ref Guid guid, uint* pDataSize, ref T0 pData) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Guid* guidPtr = &guid)
        {
            fixed (void* pDataPtr = &pData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Guid*, uint*, void*, int>)@this->LpVtbl[34])(@this, guidPtr, pDataSize, pDataPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int GetPrivateData<TThis>(this TThis thisVtbl, ref Guid guid, ref uint pDataSize, void* pData) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Guid* guidPtr = &guid)
        {
            fixed (uint* pDataSizePtr = &pDataSize)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Guid*, uint*, void*, int>)@this->LpVtbl[34])(@this, guidPtr, pDataSizePtr, pData);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int GetPrivateData<T0, TThis>(this TThis thisVtbl, ref Guid guid, ref uint pDataSize, ref T0 pData) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Guid* guidPtr = &guid)
        {
            fixed (uint* pDataSizePtr = &pDataSize)
            {
                fixed (void* pDataPtr = &pData)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Guid*, uint*, void*, int>)@this->LpVtbl[34])(@this, guidPtr, pDataSizePtr, pDataPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int SetPrivateData<TThis>(this TThis thisVtbl, Guid* guid, uint DataSize, void* pData) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Guid*, uint, void*, int>)@this->LpVtbl[35])(@this, guid, DataSize, pData);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int SetPrivateData<T0, TThis>(this TThis thisVtbl, Guid* guid, uint DataSize, ref T0 pData) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* pDataPtr = &pData)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Guid*, uint, void*, int>)@this->LpVtbl[35])(@this, guid, DataSize, pDataPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int SetPrivateData<TThis>(this TThis thisVtbl, ref Guid guid, uint DataSize, void* pData) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Guid* guidPtr = &guid)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Guid*, uint, void*, int>)@this->LpVtbl[35])(@this, guidPtr, DataSize, pData);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int SetPrivateData<T0, TThis>(this TThis thisVtbl, ref Guid guid, uint DataSize, ref T0 pData) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Guid* guidPtr = &guid)
        {
            fixed (void* pDataPtr = &pData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Guid*, uint, void*, int>)@this->LpVtbl[35])(@this, guidPtr, DataSize, pDataPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int SetPrivateDataInterface<TThis>(this TThis thisVtbl, Guid* guid, [Flow(FlowDirection.In)] Silk.NET.Core.Native.IUnknown* pData) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Guid*, Silk.NET.Core.Native.IUnknown*, int>)@this->LpVtbl[36])(@this, guid, pData);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int SetPrivateDataInterface<TThis>(this TThis thisVtbl, Guid* guid, [Flow(FlowDirection.In)] in Silk.NET.Core.Native.IUnknown pData) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Silk.NET.Core.Native.IUnknown* pDataPtr = &pData)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Guid*, Silk.NET.Core.Native.IUnknown*, int>)@this->LpVtbl[36])(@this, guid, pDataPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int SetPrivateDataInterface<TThis>(this TThis thisVtbl, ref Guid guid, [Flow(FlowDirection.In)] Silk.NET.Core.Native.IUnknown* pData) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Guid* guidPtr = &guid)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Guid*, Silk.NET.Core.Native.IUnknown*, int>)@this->LpVtbl[36])(@this, guidPtr, pData);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int SetPrivateDataInterface<TThis>(this TThis thisVtbl, ref Guid guid, [Flow(FlowDirection.In)] in Silk.NET.Core.Native.IUnknown pData) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Guid* guidPtr = &guid)
        {
            fixed (Silk.NET.Core.Native.IUnknown* pDataPtr = &pData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Guid*, Silk.NET.Core.Native.IUnknown*, int>)@this->LpVtbl[36])(@this, guidPtr, pDataPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static Silk.NET.Core.Native.D3DFeatureLevel GetFeatureLevel<TThis>(this TThis thisVtbl) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        Silk.NET.Core.Native.D3DFeatureLevel ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Silk.NET.Core.Native.D3DFeatureLevel>)@this->LpVtbl[37])(@this);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static uint GetCreationFlags<TThis>(this TThis thisVtbl) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        uint ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint>)@this->LpVtbl[38])(@this);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int GetDeviceRemovedReason<TThis>(this TThis thisVtbl) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, int>)@this->LpVtbl[39])(@this);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetImmediateContext<TThis>(this TThis thisVtbl, ID3D11DeviceContext** ppImmediateContext) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11DeviceContext**, void>)@this->LpVtbl[40])(@this, ppImmediateContext);
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetImmediateContext<TThis>(this TThis thisVtbl, ref ID3D11DeviceContext* ppImmediateContext) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11DeviceContext** ppImmediateContextPtr = &ppImmediateContext)
        {
            ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11DeviceContext**, void>)@this->LpVtbl[40])(@this, ppImmediateContextPtr);
        }
    }

    /// <summary>To be documented.</summary>
    public static int SetExceptionMode<TThis>(this TThis thisVtbl, uint RaiseFlags) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint, int>)@this->LpVtbl[41])(@this, RaiseFlags);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static uint GetExceptionMode<TThis>(this TThis thisVtbl) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        uint ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint>)@this->LpVtbl[42])(@this);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetImmediateContext1<TThis>(this TThis thisVtbl, ID3D11DeviceContext1** ppImmediateContext) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11DeviceContext1**, void>)@this->LpVtbl[43])(@this, ppImmediateContext);
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetImmediateContext1<TThis>(this TThis thisVtbl, ref ID3D11DeviceContext1* ppImmediateContext) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11DeviceContext1** ppImmediateContextPtr = &ppImmediateContext)
        {
            ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11DeviceContext1**, void>)@this->LpVtbl[43])(@this, ppImmediateContextPtr);
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeferredContext1<TThis>(this TThis thisVtbl, uint ContextFlags, ID3D11DeviceContext1** ppDeferredContext) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint, ID3D11DeviceContext1**, int>)@this->LpVtbl[44])(@this, ContextFlags, ppDeferredContext);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeferredContext1<TThis>(this TThis thisVtbl, uint ContextFlags, ref ID3D11DeviceContext1* ppDeferredContext) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11DeviceContext1** ppDeferredContextPtr = &ppDeferredContext)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint, ID3D11DeviceContext1**, int>)@this->LpVtbl[44])(@this, ContextFlags, ppDeferredContextPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBlendState1<TThis>(this TThis thisVtbl, BlendDesc1* pBlendStateDesc, ID3D11BlendState1** ppBlendState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, BlendDesc1*, ID3D11BlendState1**, int>)@this->LpVtbl[45])(@this, pBlendStateDesc, ppBlendState);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBlendState1<TThis>(this TThis thisVtbl, BlendDesc1* pBlendStateDesc, ref ID3D11BlendState1* ppBlendState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11BlendState1** ppBlendStatePtr = &ppBlendState)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, BlendDesc1*, ID3D11BlendState1**, int>)@this->LpVtbl[45])(@this, pBlendStateDesc, ppBlendStatePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBlendState1<TThis>(this TThis thisVtbl, ref BlendDesc1 pBlendStateDesc, ID3D11BlendState1** ppBlendState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (BlendDesc1* pBlendStateDescPtr = &pBlendStateDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, BlendDesc1*, ID3D11BlendState1**, int>)@this->LpVtbl[45])(@this, pBlendStateDescPtr, ppBlendState);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBlendState1<TThis>(this TThis thisVtbl, ref BlendDesc1 pBlendStateDesc, ref ID3D11BlendState1* ppBlendState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (BlendDesc1* pBlendStateDescPtr = &pBlendStateDesc)
        {
            fixed (ID3D11BlendState1** ppBlendStatePtr = &ppBlendState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, BlendDesc1*, ID3D11BlendState1**, int>)@this->LpVtbl[45])(@this, pBlendStateDescPtr, ppBlendStatePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRasterizerState1<TThis>(this TThis thisVtbl, RasterizerDesc1* pRasterizerDesc, ID3D11RasterizerState1** ppRasterizerState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, RasterizerDesc1*, ID3D11RasterizerState1**, int>)@this->LpVtbl[46])(@this, pRasterizerDesc, ppRasterizerState);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRasterizerState1<TThis>(this TThis thisVtbl, RasterizerDesc1* pRasterizerDesc, ref ID3D11RasterizerState1* ppRasterizerState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11RasterizerState1** ppRasterizerStatePtr = &ppRasterizerState)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, RasterizerDesc1*, ID3D11RasterizerState1**, int>)@this->LpVtbl[46])(@this, pRasterizerDesc, ppRasterizerStatePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRasterizerState1<TThis>(this TThis thisVtbl, ref RasterizerDesc1 pRasterizerDesc, ID3D11RasterizerState1** ppRasterizerState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (RasterizerDesc1* pRasterizerDescPtr = &pRasterizerDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, RasterizerDesc1*, ID3D11RasterizerState1**, int>)@this->LpVtbl[46])(@this, pRasterizerDescPtr, ppRasterizerState);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRasterizerState1<TThis>(this TThis thisVtbl, ref RasterizerDesc1 pRasterizerDesc, ref ID3D11RasterizerState1* ppRasterizerState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (RasterizerDesc1* pRasterizerDescPtr = &pRasterizerDesc)
        {
            fixed (ID3D11RasterizerState1** ppRasterizerStatePtr = &ppRasterizerState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, RasterizerDesc1*, ID3D11RasterizerState1**, int>)@this->LpVtbl[46])(@this, pRasterizerDescPtr, ppRasterizerStatePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState<TThis>(this TThis thisVtbl, uint Flags, Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, ppContextState);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState<TThis>(this TThis thisVtbl, uint Flags, Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, ppContextStatePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState<TThis>(this TThis thisVtbl, uint Flags, Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ID3DDeviceContextState** ppContextState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevelPtr, ppContextState);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState<TThis>(this TThis thisVtbl, uint Flags, Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
        {
            fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevelPtr, ppContextStatePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState<TThis>(this TThis thisVtbl, uint Flags, Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevel, ppContextState);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState<TThis>(this TThis thisVtbl, uint Flags, Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
        {
            fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevel, ppContextStatePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState<TThis>(this TThis thisVtbl, uint Flags, Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ID3DDeviceContextState** ppContextState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
        {
            fixed (Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevelPtr, ppContextState);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState<TThis>(this TThis thisVtbl, uint Flags, Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
        {
            fixed (Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
            {
                fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevelPtr, ppContextStatePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState<TThis>(this TThis thisVtbl, uint Flags, ref Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, ppContextState);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState<TThis>(this TThis thisVtbl, uint Flags, ref Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
        {
            fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, ppContextStatePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState<TThis>(this TThis thisVtbl, uint Flags, ref Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ID3DDeviceContextState** ppContextState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
        {
            fixed (Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevelPtr, ppContextState);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState<TThis>(this TThis thisVtbl, uint Flags, ref Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
        {
            fixed (Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
            {
                fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevelPtr, ppContextStatePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState<TThis>(this TThis thisVtbl, uint Flags, ref Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
        {
            fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevel, ppContextState);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState<TThis>(this TThis thisVtbl, uint Flags, ref Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
        {
            fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
            {
                fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevel, ppContextStatePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState<TThis>(this TThis thisVtbl, uint Flags, ref Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ID3DDeviceContextState** ppContextState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
        {
            fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
            {
                fixed (Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevelPtr, ppContextState);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState<TThis>(this TThis thisVtbl, uint Flags, ref Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
        {
            fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
            {
                fixed (Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
                {
                    fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevelPtr, ppContextStatePtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource1<TThis>(this TThis thisVtbl, void* hResource, Guid* returnedInterface, void** ppResource) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, Guid*, void**, int>)@this->LpVtbl[48])(@this, hResource, returnedInterface, ppResource);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource1<TThis>(this TThis thisVtbl, void* hResource, Guid* returnedInterface, ref void* ppResource) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void** ppResourcePtr = &ppResource)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, Guid*, void**, int>)@this->LpVtbl[48])(@this, hResource, returnedInterface, ppResourcePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource1<TThis>(this TThis thisVtbl, void* hResource, ref Guid returnedInterface, void** ppResource) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Guid* returnedInterfacePtr = &returnedInterface)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, Guid*, void**, int>)@this->LpVtbl[48])(@this, hResource, returnedInterfacePtr, ppResource);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource1<TThis>(this TThis thisVtbl, void* hResource, ref Guid returnedInterface, ref void* ppResource) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Guid* returnedInterfacePtr = &returnedInterface)
        {
            fixed (void** ppResourcePtr = &ppResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, Guid*, void**, int>)@this->LpVtbl[48])(@this, hResource, returnedInterfacePtr, ppResourcePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource1<T0, TThis>(this TThis thisVtbl, ref T0 hResource, Guid* returnedInterface, void** ppResource) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* hResourcePtr = &hResource)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, Guid*, void**, int>)@this->LpVtbl[48])(@this, hResourcePtr, returnedInterface, ppResource);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource1<T0, TThis>(this TThis thisVtbl, ref T0 hResource, Guid* returnedInterface, ref void* ppResource) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* hResourcePtr = &hResource)
        {
            fixed (void** ppResourcePtr = &ppResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, Guid*, void**, int>)@this->LpVtbl[48])(@this, hResourcePtr, returnedInterface, ppResourcePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource1<T0, TThis>(this TThis thisVtbl, ref T0 hResource, ref Guid returnedInterface, void** ppResource) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* hResourcePtr = &hResource)
        {
            fixed (Guid* returnedInterfacePtr = &returnedInterface)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, Guid*, void**, int>)@this->LpVtbl[48])(@this, hResourcePtr, returnedInterfacePtr, ppResource);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource1<T0, TThis>(this TThis thisVtbl, ref T0 hResource, ref Guid returnedInterface, ref void* ppResource) where T0 : unmanaged where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void* hResourcePtr = &hResource)
        {
            fixed (Guid* returnedInterfacePtr = &returnedInterface)
            {
                fixed (void** ppResourcePtr = &ppResource)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, void*, Guid*, void**, int>)@this->LpVtbl[48])(@this, hResourcePtr, returnedInterfacePtr, ppResourcePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName<TThis>(this TThis thisVtbl, char* lpName, uint dwDesiredAccess, Guid* returnedInterface, void** ppResource) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, char*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpName, dwDesiredAccess, returnedInterface, ppResource);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName<TThis>(this TThis thisVtbl, char* lpName, uint dwDesiredAccess, Guid* returnedInterface, ref void* ppResource) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (void** ppResourcePtr = &ppResource)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, char*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpName, dwDesiredAccess, returnedInterface, ppResourcePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName<TThis>(this TThis thisVtbl, char* lpName, uint dwDesiredAccess, ref Guid returnedInterface, void** ppResource) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Guid* returnedInterfacePtr = &returnedInterface)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, char*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpName, dwDesiredAccess, returnedInterfacePtr, ppResource);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName<TThis>(this TThis thisVtbl, char* lpName, uint dwDesiredAccess, ref Guid returnedInterface, ref void* ppResource) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (Guid* returnedInterfacePtr = &returnedInterface)
        {
            fixed (void** ppResourcePtr = &ppResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, char*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpName, dwDesiredAccess, returnedInterfacePtr, ppResourcePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName<TThis>(this TThis thisVtbl, ref char lpName, uint dwDesiredAccess, Guid* returnedInterface, void** ppResource) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* lpNamePtr = &lpName)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, char*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterface, ppResource);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName<TThis>(this TThis thisVtbl, ref char lpName, uint dwDesiredAccess, Guid* returnedInterface, ref void* ppResource) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* lpNamePtr = &lpName)
        {
            fixed (void** ppResourcePtr = &ppResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, char*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterface, ppResourcePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName<TThis>(this TThis thisVtbl, ref char lpName, uint dwDesiredAccess, ref Guid returnedInterface, void** ppResource) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* lpNamePtr = &lpName)
        {
            fixed (Guid* returnedInterfacePtr = &returnedInterface)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, char*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterfacePtr, ppResource);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName<TThis>(this TThis thisVtbl, ref char lpName, uint dwDesiredAccess, ref Guid returnedInterface, ref void* ppResource) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (char* lpNamePtr = &lpName)
        {
            fixed (Guid* returnedInterfacePtr = &returnedInterface)
            {
                fixed (void** ppResourcePtr = &ppResource)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, char*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterfacePtr, ppResourcePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName<TThis>(this TThis thisVtbl, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string lpName, uint dwDesiredAccess, Guid* returnedInterface, void** ppResource) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var lpNamePtr = (byte*) SilkMarshal.StringToPtr(lpName, NativeStringEncoding.LPWStr);
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, byte*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterface, ppResource);
        SilkMarshal.Free((nint)lpNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName<TThis>(this TThis thisVtbl, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string lpName, uint dwDesiredAccess, Guid* returnedInterface, ref void* ppResource) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var lpNamePtr = (byte*) SilkMarshal.StringToPtr(lpName, NativeStringEncoding.LPWStr);
        fixed (void** ppResourcePtr = &ppResource)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, byte*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterface, ppResourcePtr);
        }
        SilkMarshal.Free((nint)lpNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName<TThis>(this TThis thisVtbl, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string lpName, uint dwDesiredAccess, ref Guid returnedInterface, void** ppResource) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var lpNamePtr = (byte*) SilkMarshal.StringToPtr(lpName, NativeStringEncoding.LPWStr);
        fixed (Guid* returnedInterfacePtr = &returnedInterface)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, byte*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterfacePtr, ppResource);
        }
        SilkMarshal.Free((nint)lpNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName<TThis>(this TThis thisVtbl, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string lpName, uint dwDesiredAccess, ref Guid returnedInterface, ref void* ppResource) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        var lpNamePtr = (byte*) SilkMarshal.StringToPtr(lpName, NativeStringEncoding.LPWStr);
        fixed (Guid* returnedInterfacePtr = &returnedInterface)
        {
            fixed (void** ppResourcePtr = &ppResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, byte*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterfacePtr, ppResourcePtr);
            }
        }
        SilkMarshal.Free((nint)lpNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetImmediateContext2<TThis>(this TThis thisVtbl, ID3D11DeviceContext2** ppImmediateContext) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11DeviceContext2**, void>)@this->LpVtbl[50])(@this, ppImmediateContext);
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetImmediateContext2<TThis>(this TThis thisVtbl, ref ID3D11DeviceContext2* ppImmediateContext) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11DeviceContext2** ppImmediateContextPtr = &ppImmediateContext)
        {
            ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11DeviceContext2**, void>)@this->LpVtbl[50])(@this, ppImmediateContextPtr);
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeferredContext2<TThis>(this TThis thisVtbl, uint ContextFlags, ID3D11DeviceContext2** ppDeferredContext) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint, ID3D11DeviceContext2**, int>)@this->LpVtbl[51])(@this, ContextFlags, ppDeferredContext);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeferredContext2<TThis>(this TThis thisVtbl, uint ContextFlags, ref ID3D11DeviceContext2* ppDeferredContext) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (ID3D11DeviceContext2** ppDeferredContextPtr = &ppDeferredContext)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint, ID3D11DeviceContext2**, int>)@this->LpVtbl[51])(@this, ContextFlags, ppDeferredContextPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
        {
            ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
        {
            ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
        {
            fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
        {
            ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
        {
            fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
        {
            fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
        {
            fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
            {
                fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
        {
            ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
        {
            fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
        {
            fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
        {
            fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
            {
                fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
        {
            fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
        {
            fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
            {
                fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
        {
            fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
            {
                fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
        {
            fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
            {
                fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                {
                    fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                    }
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
        {
            ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
        {
            fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
        {
            fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
        {
            fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
            {
                fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
        {
            fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
        {
            fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
            {
                fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
        {
            fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
            {
                fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
        {
            fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
            {
                fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                {
                    fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                    }
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
        {
            fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
        {
            fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
            {
                fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
        {
            fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
            {
                fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
        {
            fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
            {
                fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                {
                    fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                    }
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
        {
            fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
            {
                fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
        {
            fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
            {
                fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                {
                    fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                    }
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
        {
            fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
            {
                fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                {
                    fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                    }
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
        {
            fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
            {
                fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                {
                    fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                    {
                        fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                        {
                            ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                        }
                    }
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
            {
                fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
            {
                fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
            {
                fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
            {
                fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                {
                    fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                    }
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
            {
                fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
            {
                fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
            {
                fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                {
                    fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                    }
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
            {
                fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
            {
                fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                {
                    fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                    }
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
            {
                fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                {
                    fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                    }
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
            {
                fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                {
                    fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                    {
                        fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                        {
                            ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                        }
                    }
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                {
                    fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                    }
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                {
                    fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                    }
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                {
                    fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                    }
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                {
                    fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                    {
                        fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                        {
                            ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                        }
                    }
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                {
                    fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                    }
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                {
                    fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                    }
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                {
                    fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                    {
                        fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                        {
                            ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                        }
                    }
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                {
                    fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                    }
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                {
                    fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                    {
                        fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                        {
                            ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                        }
                    }
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                {
                    fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                    {
                        fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                        {
                            ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                        }
                    }
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static void GetResourceTiling<TThis>(this TThis thisVtbl, ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
        {
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                {
                    fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                    {
                        fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                        {
                            fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                            {
                                ((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                            }
                        }
                    }
                }
            }
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckMultisampleQualityLevels1<TThis>(this TThis thisVtbl, Silk.NET.DXGI.Format Format, uint SampleCount, uint Flags, uint* pNumQualityLevels) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Silk.NET.DXGI.Format, uint, uint, uint*, int>)@this->LpVtbl[53])(@this, Format, SampleCount, Flags, pNumQualityLevels);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int CheckMultisampleQualityLevels1<TThis>(this TThis thisVtbl, Silk.NET.DXGI.Format Format, uint SampleCount, uint Flags, ref uint pNumQualityLevels) where TThis : IComVtbl<ID3D11Device2>
    {
        var @this = (ID3D11Device2*) thisVtbl.AsVtblPtr();
        int ret = default;
        fixed (uint* pNumQualityLevelsPtr = &pNumQualityLevels)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, Silk.NET.DXGI.Format, uint, uint, uint*, int>)@this->LpVtbl[53])(@this, Format, SampleCount, Flags, pNumQualityLevelsPtr);
        }
        return ret;
    }

}
