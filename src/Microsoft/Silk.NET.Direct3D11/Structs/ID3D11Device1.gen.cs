// This file is part of Silk.NET.
// 
// You may modify and distribute Silk.NET under the terms
// of the MIT license. See the LICENSE file for details.


using System;
using System.Runtime.InteropServices;
using System.Text;
using Silk.NET.Core.Native;
using Silk.NET.Core.Attributes;
using Silk.NET.Core.Contexts;
using Silk.NET.Core.Loader;

#pragma warning disable 1591

namespace Silk.NET.Direct3D11
{
    [NativeName("Name", "ID3D11Device1")]
    public unsafe partial struct ID3D11Device1
    {
        public ID3D11Device1
        (
            void** lpVtbl = default
        )
        {
            LpVtbl = lpVtbl;
        }


        [NativeName("Type", "")]
        [NativeName("Type.Name", "")]
        [NativeName("Name", "lpVtbl")]
        public void** LpVtbl;
        /// <summary>To be added.</summary>
        public unsafe int QueryInterface(Guid* riid, void** ppvObject)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, Guid*, void**, int>)LpVtbl[0])(@this, riid, ppvObject);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int QueryInterface(Guid* riid, ref void* ppvObject)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (void** ppvObjectPtr = &ppvObject)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, Guid*, void**, int>)LpVtbl[0])(@this, riid, ppvObjectPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int QueryInterface(ref Guid riid, void** ppvObject)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Guid* riidPtr = &riid)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, Guid*, void**, int>)LpVtbl[0])(@this, riidPtr, ppvObject);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int QueryInterface(ref Guid riid, ref void* ppvObject)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Guid* riidPtr = &riid)
                {
                    fixed (void** ppvObjectPtr = &ppvObject)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, Guid*, void**, int>)LpVtbl[0])(@this, riidPtr, ppvObjectPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public uint AddRef()
        {
            fixed (ID3D11Device1* @this = &this)
            {
                uint ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, uint>)LpVtbl[1])(@this);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public uint Release()
        {
            fixed (ID3D11Device1* @this = &this)
            {
                uint ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, uint>)LpVtbl[2])(@this);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateBuffer(BufferDesc* pDesc, SubresourceData* pInitialData, ID3D11Buffer** ppBuffer)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)LpVtbl[3])(@this, pDesc, pInitialData, ppBuffer);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateBuffer(BufferDesc* pDesc, SubresourceData* pInitialData, ref ID3D11Buffer* ppBuffer)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11Buffer** ppBufferPtr = &ppBuffer)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)LpVtbl[3])(@this, pDesc, pInitialData, ppBufferPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateBuffer(BufferDesc* pDesc, ref SubresourceData pInitialData, ID3D11Buffer** ppBuffer)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)LpVtbl[3])(@this, pDesc, pInitialDataPtr, ppBuffer);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateBuffer(BufferDesc* pDesc, ref SubresourceData pInitialData, ref ID3D11Buffer* ppBuffer)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                {
                    fixed (ID3D11Buffer** ppBufferPtr = &ppBuffer)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)LpVtbl[3])(@this, pDesc, pInitialDataPtr, ppBufferPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateBuffer(ref BufferDesc pDesc, SubresourceData* pInitialData, ID3D11Buffer** ppBuffer)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (BufferDesc* pDescPtr = &pDesc)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)LpVtbl[3])(@this, pDescPtr, pInitialData, ppBuffer);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateBuffer(ref BufferDesc pDesc, SubresourceData* pInitialData, ref ID3D11Buffer* ppBuffer)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (BufferDesc* pDescPtr = &pDesc)
                {
                    fixed (ID3D11Buffer** ppBufferPtr = &ppBuffer)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)LpVtbl[3])(@this, pDescPtr, pInitialData, ppBufferPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateBuffer(ref BufferDesc pDesc, ref SubresourceData pInitialData, ID3D11Buffer** ppBuffer)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (BufferDesc* pDescPtr = &pDesc)
                {
                    fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)LpVtbl[3])(@this, pDescPtr, pInitialDataPtr, ppBuffer);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateBuffer(ref BufferDesc pDesc, ref SubresourceData pInitialData, ref ID3D11Buffer* ppBuffer)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (BufferDesc* pDescPtr = &pDesc)
                {
                    fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                    {
                        fixed (ID3D11Buffer** ppBufferPtr = &ppBuffer)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)LpVtbl[3])(@this, pDescPtr, pInitialDataPtr, ppBufferPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateTexture1D(Texture1DDesc* pDesc, SubresourceData* pInitialData, ID3D11Texture1D** ppTexture1D)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)LpVtbl[4])(@this, pDesc, pInitialData, ppTexture1D);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateTexture1D(Texture1DDesc* pDesc, SubresourceData* pInitialData, ref ID3D11Texture1D* ppTexture1D)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11Texture1D** ppTexture1DPtr = &ppTexture1D)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)LpVtbl[4])(@this, pDesc, pInitialData, ppTexture1DPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateTexture1D(Texture1DDesc* pDesc, ref SubresourceData pInitialData, ID3D11Texture1D** ppTexture1D)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)LpVtbl[4])(@this, pDesc, pInitialDataPtr, ppTexture1D);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateTexture1D(Texture1DDesc* pDesc, ref SubresourceData pInitialData, ref ID3D11Texture1D* ppTexture1D)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                {
                    fixed (ID3D11Texture1D** ppTexture1DPtr = &ppTexture1D)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)LpVtbl[4])(@this, pDesc, pInitialDataPtr, ppTexture1DPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateTexture1D(ref Texture1DDesc pDesc, SubresourceData* pInitialData, ID3D11Texture1D** ppTexture1D)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Texture1DDesc* pDescPtr = &pDesc)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)LpVtbl[4])(@this, pDescPtr, pInitialData, ppTexture1D);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateTexture1D(ref Texture1DDesc pDesc, SubresourceData* pInitialData, ref ID3D11Texture1D* ppTexture1D)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Texture1DDesc* pDescPtr = &pDesc)
                {
                    fixed (ID3D11Texture1D** ppTexture1DPtr = &ppTexture1D)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)LpVtbl[4])(@this, pDescPtr, pInitialData, ppTexture1DPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateTexture1D(ref Texture1DDesc pDesc, ref SubresourceData pInitialData, ID3D11Texture1D** ppTexture1D)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Texture1DDesc* pDescPtr = &pDesc)
                {
                    fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)LpVtbl[4])(@this, pDescPtr, pInitialDataPtr, ppTexture1D);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateTexture1D(ref Texture1DDesc pDesc, ref SubresourceData pInitialData, ref ID3D11Texture1D* ppTexture1D)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Texture1DDesc* pDescPtr = &pDesc)
                {
                    fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                    {
                        fixed (ID3D11Texture1D** ppTexture1DPtr = &ppTexture1D)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)LpVtbl[4])(@this, pDescPtr, pInitialDataPtr, ppTexture1DPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateTexture2D(Texture2DDesc* pDesc, SubresourceData* pInitialData, ID3D11Texture2D** ppTexture2D)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)LpVtbl[5])(@this, pDesc, pInitialData, ppTexture2D);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateTexture2D(Texture2DDesc* pDesc, SubresourceData* pInitialData, ref ID3D11Texture2D* ppTexture2D)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11Texture2D** ppTexture2DPtr = &ppTexture2D)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)LpVtbl[5])(@this, pDesc, pInitialData, ppTexture2DPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateTexture2D(Texture2DDesc* pDesc, ref SubresourceData pInitialData, ID3D11Texture2D** ppTexture2D)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)LpVtbl[5])(@this, pDesc, pInitialDataPtr, ppTexture2D);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateTexture2D(Texture2DDesc* pDesc, ref SubresourceData pInitialData, ref ID3D11Texture2D* ppTexture2D)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                {
                    fixed (ID3D11Texture2D** ppTexture2DPtr = &ppTexture2D)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)LpVtbl[5])(@this, pDesc, pInitialDataPtr, ppTexture2DPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateTexture2D(ref Texture2DDesc pDesc, SubresourceData* pInitialData, ID3D11Texture2D** ppTexture2D)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Texture2DDesc* pDescPtr = &pDesc)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)LpVtbl[5])(@this, pDescPtr, pInitialData, ppTexture2D);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateTexture2D(ref Texture2DDesc pDesc, SubresourceData* pInitialData, ref ID3D11Texture2D* ppTexture2D)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Texture2DDesc* pDescPtr = &pDesc)
                {
                    fixed (ID3D11Texture2D** ppTexture2DPtr = &ppTexture2D)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)LpVtbl[5])(@this, pDescPtr, pInitialData, ppTexture2DPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateTexture2D(ref Texture2DDesc pDesc, ref SubresourceData pInitialData, ID3D11Texture2D** ppTexture2D)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Texture2DDesc* pDescPtr = &pDesc)
                {
                    fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)LpVtbl[5])(@this, pDescPtr, pInitialDataPtr, ppTexture2D);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateTexture2D(ref Texture2DDesc pDesc, ref SubresourceData pInitialData, ref ID3D11Texture2D* ppTexture2D)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Texture2DDesc* pDescPtr = &pDesc)
                {
                    fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                    {
                        fixed (ID3D11Texture2D** ppTexture2DPtr = &ppTexture2D)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)LpVtbl[5])(@this, pDescPtr, pInitialDataPtr, ppTexture2DPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateTexture3D(Texture3DDesc* pDesc, SubresourceData* pInitialData, ID3D11Texture3D** ppTexture3D)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)LpVtbl[6])(@this, pDesc, pInitialData, ppTexture3D);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateTexture3D(Texture3DDesc* pDesc, SubresourceData* pInitialData, ref ID3D11Texture3D* ppTexture3D)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11Texture3D** ppTexture3DPtr = &ppTexture3D)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)LpVtbl[6])(@this, pDesc, pInitialData, ppTexture3DPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateTexture3D(Texture3DDesc* pDesc, ref SubresourceData pInitialData, ID3D11Texture3D** ppTexture3D)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)LpVtbl[6])(@this, pDesc, pInitialDataPtr, ppTexture3D);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateTexture3D(Texture3DDesc* pDesc, ref SubresourceData pInitialData, ref ID3D11Texture3D* ppTexture3D)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                {
                    fixed (ID3D11Texture3D** ppTexture3DPtr = &ppTexture3D)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)LpVtbl[6])(@this, pDesc, pInitialDataPtr, ppTexture3DPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateTexture3D(ref Texture3DDesc pDesc, SubresourceData* pInitialData, ID3D11Texture3D** ppTexture3D)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Texture3DDesc* pDescPtr = &pDesc)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)LpVtbl[6])(@this, pDescPtr, pInitialData, ppTexture3D);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateTexture3D(ref Texture3DDesc pDesc, SubresourceData* pInitialData, ref ID3D11Texture3D* ppTexture3D)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Texture3DDesc* pDescPtr = &pDesc)
                {
                    fixed (ID3D11Texture3D** ppTexture3DPtr = &ppTexture3D)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)LpVtbl[6])(@this, pDescPtr, pInitialData, ppTexture3DPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateTexture3D(ref Texture3DDesc pDesc, ref SubresourceData pInitialData, ID3D11Texture3D** ppTexture3D)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Texture3DDesc* pDescPtr = &pDesc)
                {
                    fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)LpVtbl[6])(@this, pDescPtr, pInitialDataPtr, ppTexture3D);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateTexture3D(ref Texture3DDesc pDesc, ref SubresourceData pInitialData, ref ID3D11Texture3D* ppTexture3D)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Texture3DDesc* pDescPtr = &pDesc)
                {
                    fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                    {
                        fixed (ID3D11Texture3D** ppTexture3DPtr = &ppTexture3D)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)LpVtbl[6])(@this, pDescPtr, pInitialDataPtr, ppTexture3DPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateShaderResourceView(ID3D11Resource* pResource, ShaderResourceViewDesc* pDesc, ID3D11ShaderResourceView** ppSRView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)LpVtbl[7])(@this, pResource, pDesc, ppSRView);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateShaderResourceView(ID3D11Resource* pResource, ShaderResourceViewDesc* pDesc, ref ID3D11ShaderResourceView* ppSRView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11ShaderResourceView** ppSRViewPtr = &ppSRView)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)LpVtbl[7])(@this, pResource, pDesc, ppSRViewPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateShaderResourceView(ID3D11Resource* pResource, ref ShaderResourceViewDesc pDesc, ID3D11ShaderResourceView** ppSRView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ShaderResourceViewDesc* pDescPtr = &pDesc)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)LpVtbl[7])(@this, pResource, pDescPtr, ppSRView);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateShaderResourceView(ID3D11Resource* pResource, ref ShaderResourceViewDesc pDesc, ref ID3D11ShaderResourceView* ppSRView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ShaderResourceViewDesc* pDescPtr = &pDesc)
                {
                    fixed (ID3D11ShaderResourceView** ppSRViewPtr = &ppSRView)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)LpVtbl[7])(@this, pResource, pDescPtr, ppSRViewPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateShaderResourceView(ref ID3D11Resource pResource, ShaderResourceViewDesc* pDesc, ID3D11ShaderResourceView** ppSRView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11Resource* pResourcePtr = &pResource)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)LpVtbl[7])(@this, pResourcePtr, pDesc, ppSRView);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateShaderResourceView(ref ID3D11Resource pResource, ShaderResourceViewDesc* pDesc, ref ID3D11ShaderResourceView* ppSRView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11Resource* pResourcePtr = &pResource)
                {
                    fixed (ID3D11ShaderResourceView** ppSRViewPtr = &ppSRView)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)LpVtbl[7])(@this, pResourcePtr, pDesc, ppSRViewPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateShaderResourceView(ref ID3D11Resource pResource, ref ShaderResourceViewDesc pDesc, ID3D11ShaderResourceView** ppSRView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11Resource* pResourcePtr = &pResource)
                {
                    fixed (ShaderResourceViewDesc* pDescPtr = &pDesc)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)LpVtbl[7])(@this, pResourcePtr, pDescPtr, ppSRView);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateShaderResourceView(ref ID3D11Resource pResource, ref ShaderResourceViewDesc pDesc, ref ID3D11ShaderResourceView* ppSRView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11Resource* pResourcePtr = &pResource)
                {
                    fixed (ShaderResourceViewDesc* pDescPtr = &pDesc)
                    {
                        fixed (ID3D11ShaderResourceView** ppSRViewPtr = &ppSRView)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)LpVtbl[7])(@this, pResourcePtr, pDescPtr, ppSRViewPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateUnorderedAccessView(ID3D11Resource* pResource, UnorderedAccessViewDesc* pDesc, ID3D11UnorderedAccessView** ppUAView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)LpVtbl[8])(@this, pResource, pDesc, ppUAView);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateUnorderedAccessView(ID3D11Resource* pResource, UnorderedAccessViewDesc* pDesc, ref ID3D11UnorderedAccessView* ppUAView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11UnorderedAccessView** ppUAViewPtr = &ppUAView)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)LpVtbl[8])(@this, pResource, pDesc, ppUAViewPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateUnorderedAccessView(ID3D11Resource* pResource, ref UnorderedAccessViewDesc pDesc, ID3D11UnorderedAccessView** ppUAView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (UnorderedAccessViewDesc* pDescPtr = &pDesc)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)LpVtbl[8])(@this, pResource, pDescPtr, ppUAView);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateUnorderedAccessView(ID3D11Resource* pResource, ref UnorderedAccessViewDesc pDesc, ref ID3D11UnorderedAccessView* ppUAView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (UnorderedAccessViewDesc* pDescPtr = &pDesc)
                {
                    fixed (ID3D11UnorderedAccessView** ppUAViewPtr = &ppUAView)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)LpVtbl[8])(@this, pResource, pDescPtr, ppUAViewPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateUnorderedAccessView(ref ID3D11Resource pResource, UnorderedAccessViewDesc* pDesc, ID3D11UnorderedAccessView** ppUAView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11Resource* pResourcePtr = &pResource)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)LpVtbl[8])(@this, pResourcePtr, pDesc, ppUAView);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateUnorderedAccessView(ref ID3D11Resource pResource, UnorderedAccessViewDesc* pDesc, ref ID3D11UnorderedAccessView* ppUAView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11Resource* pResourcePtr = &pResource)
                {
                    fixed (ID3D11UnorderedAccessView** ppUAViewPtr = &ppUAView)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)LpVtbl[8])(@this, pResourcePtr, pDesc, ppUAViewPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateUnorderedAccessView(ref ID3D11Resource pResource, ref UnorderedAccessViewDesc pDesc, ID3D11UnorderedAccessView** ppUAView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11Resource* pResourcePtr = &pResource)
                {
                    fixed (UnorderedAccessViewDesc* pDescPtr = &pDesc)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)LpVtbl[8])(@this, pResourcePtr, pDescPtr, ppUAView);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateUnorderedAccessView(ref ID3D11Resource pResource, ref UnorderedAccessViewDesc pDesc, ref ID3D11UnorderedAccessView* ppUAView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11Resource* pResourcePtr = &pResource)
                {
                    fixed (UnorderedAccessViewDesc* pDescPtr = &pDesc)
                    {
                        fixed (ID3D11UnorderedAccessView** ppUAViewPtr = &ppUAView)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)LpVtbl[8])(@this, pResourcePtr, pDescPtr, ppUAViewPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateRenderTargetView(ID3D11Resource* pResource, RenderTargetViewDesc* pDesc, ID3D11RenderTargetView** ppRTView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)LpVtbl[9])(@this, pResource, pDesc, ppRTView);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateRenderTargetView(ID3D11Resource* pResource, RenderTargetViewDesc* pDesc, ref ID3D11RenderTargetView* ppRTView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11RenderTargetView** ppRTViewPtr = &ppRTView)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)LpVtbl[9])(@this, pResource, pDesc, ppRTViewPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateRenderTargetView(ID3D11Resource* pResource, ref RenderTargetViewDesc pDesc, ID3D11RenderTargetView** ppRTView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (RenderTargetViewDesc* pDescPtr = &pDesc)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)LpVtbl[9])(@this, pResource, pDescPtr, ppRTView);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateRenderTargetView(ID3D11Resource* pResource, ref RenderTargetViewDesc pDesc, ref ID3D11RenderTargetView* ppRTView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (RenderTargetViewDesc* pDescPtr = &pDesc)
                {
                    fixed (ID3D11RenderTargetView** ppRTViewPtr = &ppRTView)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)LpVtbl[9])(@this, pResource, pDescPtr, ppRTViewPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateRenderTargetView(ref ID3D11Resource pResource, RenderTargetViewDesc* pDesc, ID3D11RenderTargetView** ppRTView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11Resource* pResourcePtr = &pResource)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)LpVtbl[9])(@this, pResourcePtr, pDesc, ppRTView);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateRenderTargetView(ref ID3D11Resource pResource, RenderTargetViewDesc* pDesc, ref ID3D11RenderTargetView* ppRTView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11Resource* pResourcePtr = &pResource)
                {
                    fixed (ID3D11RenderTargetView** ppRTViewPtr = &ppRTView)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)LpVtbl[9])(@this, pResourcePtr, pDesc, ppRTViewPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateRenderTargetView(ref ID3D11Resource pResource, ref RenderTargetViewDesc pDesc, ID3D11RenderTargetView** ppRTView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11Resource* pResourcePtr = &pResource)
                {
                    fixed (RenderTargetViewDesc* pDescPtr = &pDesc)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)LpVtbl[9])(@this, pResourcePtr, pDescPtr, ppRTView);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateRenderTargetView(ref ID3D11Resource pResource, ref RenderTargetViewDesc pDesc, ref ID3D11RenderTargetView* ppRTView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11Resource* pResourcePtr = &pResource)
                {
                    fixed (RenderTargetViewDesc* pDescPtr = &pDesc)
                    {
                        fixed (ID3D11RenderTargetView** ppRTViewPtr = &ppRTView)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)LpVtbl[9])(@this, pResourcePtr, pDescPtr, ppRTViewPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDepthStencilView(ID3D11Resource* pResource, DepthStencilViewDesc* pDesc, ID3D11DepthStencilView** ppDepthStencilView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)LpVtbl[10])(@this, pResource, pDesc, ppDepthStencilView);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDepthStencilView(ID3D11Resource* pResource, DepthStencilViewDesc* pDesc, ref ID3D11DepthStencilView* ppDepthStencilView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11DepthStencilView** ppDepthStencilViewPtr = &ppDepthStencilView)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)LpVtbl[10])(@this, pResource, pDesc, ppDepthStencilViewPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDepthStencilView(ID3D11Resource* pResource, ref DepthStencilViewDesc pDesc, ID3D11DepthStencilView** ppDepthStencilView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (DepthStencilViewDesc* pDescPtr = &pDesc)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)LpVtbl[10])(@this, pResource, pDescPtr, ppDepthStencilView);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDepthStencilView(ID3D11Resource* pResource, ref DepthStencilViewDesc pDesc, ref ID3D11DepthStencilView* ppDepthStencilView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (DepthStencilViewDesc* pDescPtr = &pDesc)
                {
                    fixed (ID3D11DepthStencilView** ppDepthStencilViewPtr = &ppDepthStencilView)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)LpVtbl[10])(@this, pResource, pDescPtr, ppDepthStencilViewPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDepthStencilView(ref ID3D11Resource pResource, DepthStencilViewDesc* pDesc, ID3D11DepthStencilView** ppDepthStencilView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11Resource* pResourcePtr = &pResource)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)LpVtbl[10])(@this, pResourcePtr, pDesc, ppDepthStencilView);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDepthStencilView(ref ID3D11Resource pResource, DepthStencilViewDesc* pDesc, ref ID3D11DepthStencilView* ppDepthStencilView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11Resource* pResourcePtr = &pResource)
                {
                    fixed (ID3D11DepthStencilView** ppDepthStencilViewPtr = &ppDepthStencilView)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)LpVtbl[10])(@this, pResourcePtr, pDesc, ppDepthStencilViewPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDepthStencilView(ref ID3D11Resource pResource, ref DepthStencilViewDesc pDesc, ID3D11DepthStencilView** ppDepthStencilView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11Resource* pResourcePtr = &pResource)
                {
                    fixed (DepthStencilViewDesc* pDescPtr = &pDesc)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)LpVtbl[10])(@this, pResourcePtr, pDescPtr, ppDepthStencilView);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDepthStencilView(ref ID3D11Resource pResource, ref DepthStencilViewDesc pDesc, ref ID3D11DepthStencilView* ppDepthStencilView)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11Resource* pResourcePtr = &pResource)
                {
                    fixed (DepthStencilViewDesc* pDescPtr = &pDesc)
                    {
                        fixed (ID3D11DepthStencilView** ppDepthStencilViewPtr = &ppDepthStencilView)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)LpVtbl[10])(@this, pResourcePtr, pDescPtr, ppDepthStencilViewPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateInputLayout(InputElementDesc* pInputElementDescs, uint NumElements, void* pShaderBytecodeWithInputSignature, uint BytecodeLength, ID3D11InputLayout** ppInputLayout)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, InputElementDesc*, uint, void*, uint, ID3D11InputLayout**, int>)LpVtbl[11])(@this, pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayout);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateInputLayout(InputElementDesc* pInputElementDescs, uint NumElements, void* pShaderBytecodeWithInputSignature, uint BytecodeLength, ref ID3D11InputLayout* ppInputLayout)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11InputLayout** ppInputLayoutPtr = &ppInputLayout)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, InputElementDesc*, uint, void*, uint, ID3D11InputLayout**, int>)LpVtbl[11])(@this, pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayoutPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateInputLayout<T0>(InputElementDesc* pInputElementDescs, uint NumElements, ref T0 pShaderBytecodeWithInputSignature, uint BytecodeLength, ID3D11InputLayout** ppInputLayout) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodeWithInputSignaturePtr = &pShaderBytecodeWithInputSignature)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, InputElementDesc*, uint, T0*, uint, ID3D11InputLayout**, int>)LpVtbl[11])(@this, pInputElementDescs, NumElements, pShaderBytecodeWithInputSignaturePtr, BytecodeLength, ppInputLayout);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateInputLayout<T0>(InputElementDesc* pInputElementDescs, uint NumElements, ref T0 pShaderBytecodeWithInputSignature, uint BytecodeLength, ref ID3D11InputLayout* ppInputLayout) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodeWithInputSignaturePtr = &pShaderBytecodeWithInputSignature)
                {
                    fixed (ID3D11InputLayout** ppInputLayoutPtr = &ppInputLayout)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, InputElementDesc*, uint, T0*, uint, ID3D11InputLayout**, int>)LpVtbl[11])(@this, pInputElementDescs, NumElements, pShaderBytecodeWithInputSignaturePtr, BytecodeLength, ppInputLayoutPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateInputLayout(ref InputElementDesc pInputElementDescs, uint NumElements, void* pShaderBytecodeWithInputSignature, uint BytecodeLength, ID3D11InputLayout** ppInputLayout)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (InputElementDesc* pInputElementDescsPtr = &pInputElementDescs)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, InputElementDesc*, uint, void*, uint, ID3D11InputLayout**, int>)LpVtbl[11])(@this, pInputElementDescsPtr, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayout);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateInputLayout(ref InputElementDesc pInputElementDescs, uint NumElements, void* pShaderBytecodeWithInputSignature, uint BytecodeLength, ref ID3D11InputLayout* ppInputLayout)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (InputElementDesc* pInputElementDescsPtr = &pInputElementDescs)
                {
                    fixed (ID3D11InputLayout** ppInputLayoutPtr = &ppInputLayout)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, InputElementDesc*, uint, void*, uint, ID3D11InputLayout**, int>)LpVtbl[11])(@this, pInputElementDescsPtr, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayoutPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateInputLayout<T0>(ref InputElementDesc pInputElementDescs, uint NumElements, ref T0 pShaderBytecodeWithInputSignature, uint BytecodeLength, ID3D11InputLayout** ppInputLayout) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (InputElementDesc* pInputElementDescsPtr = &pInputElementDescs)
                {
                    fixed (T0* pShaderBytecodeWithInputSignaturePtr = &pShaderBytecodeWithInputSignature)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, InputElementDesc*, uint, T0*, uint, ID3D11InputLayout**, int>)LpVtbl[11])(@this, pInputElementDescsPtr, NumElements, pShaderBytecodeWithInputSignaturePtr, BytecodeLength, ppInputLayout);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateInputLayout<T0>(ref InputElementDesc pInputElementDescs, uint NumElements, ref T0 pShaderBytecodeWithInputSignature, uint BytecodeLength, ref ID3D11InputLayout* ppInputLayout) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (InputElementDesc* pInputElementDescsPtr = &pInputElementDescs)
                {
                    fixed (T0* pShaderBytecodeWithInputSignaturePtr = &pShaderBytecodeWithInputSignature)
                    {
                        fixed (ID3D11InputLayout** ppInputLayoutPtr = &ppInputLayout)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, InputElementDesc*, uint, T0*, uint, ID3D11InputLayout**, int>)LpVtbl[11])(@this, pInputElementDescsPtr, NumElements, pShaderBytecodeWithInputSignaturePtr, BytecodeLength, ppInputLayoutPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateVertexShader(void* pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11VertexShader** ppVertexShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)LpVtbl[12])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppVertexShader);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateVertexShader(void* pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11VertexShader* ppVertexShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11VertexShader** ppVertexShaderPtr = &ppVertexShader)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)LpVtbl[12])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppVertexShaderPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateVertexShader(void* pShaderBytecode, uint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11VertexShader** ppVertexShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)LpVtbl[12])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppVertexShader);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateVertexShader(void* pShaderBytecode, uint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11VertexShader* ppVertexShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    fixed (ID3D11VertexShader** ppVertexShaderPtr = &ppVertexShader)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)LpVtbl[12])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppVertexShaderPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateVertexShader<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11VertexShader** ppVertexShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)LpVtbl[12])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppVertexShader);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateVertexShader<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11VertexShader* ppVertexShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (ID3D11VertexShader** ppVertexShaderPtr = &ppVertexShader)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)LpVtbl[12])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppVertexShaderPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateVertexShader<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11VertexShader** ppVertexShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)LpVtbl[12])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppVertexShader);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateVertexShader<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11VertexShader* ppVertexShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        fixed (ID3D11VertexShader** ppVertexShaderPtr = &ppVertexShader)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)LpVtbl[12])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppVertexShaderPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShader(void* pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[13])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppGeometryShader);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShader(void* pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[13])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppGeometryShaderPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShader(void* pShaderBytecode, uint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[13])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppGeometryShader);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShader(void* pShaderBytecode, uint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[13])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppGeometryShaderPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShader<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[13])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppGeometryShader);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShader<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[13])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppGeometryShaderPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShader<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[13])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppGeometryShader);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShader<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[13])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppGeometryShaderPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, uint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, uint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, uint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, uint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, uint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pBufferStridesPtr = &pBufferStrides)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, uint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pBufferStridesPtr = &pBufferStrides)
                {
                    fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, uint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pBufferStridesPtr = &pBufferStrides)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, uint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pBufferStridesPtr = &pBufferStrides)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, uint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, uint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
                {
                    fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, uint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, uint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, uint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
                {
                    fixed (uint* pBufferStridesPtr = &pBufferStrides)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, uint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
                {
                    fixed (uint* pBufferStridesPtr = &pBufferStrides)
                    {
                        fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, uint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
                {
                    fixed (uint* pBufferStridesPtr = &pBufferStrides)
                    {
                        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, uint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
                {
                    fixed (uint* pBufferStridesPtr = &pBufferStrides)
                    {
                        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                        {
                            fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput<T0>(ref T0 pShaderBytecode, uint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput<T0>(ref T0 pShaderBytecode, uint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput<T0>(ref T0 pShaderBytecode, uint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput<T0>(ref T0 pShaderBytecode, uint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput<T0>(ref T0 pShaderBytecode, uint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (uint* pBufferStridesPtr = &pBufferStrides)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput<T0>(ref T0 pShaderBytecode, uint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (uint* pBufferStridesPtr = &pBufferStrides)
                    {
                        fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput<T0>(ref T0 pShaderBytecode, uint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (uint* pBufferStridesPtr = &pBufferStrides)
                    {
                        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput<T0>(ref T0 pShaderBytecode, uint BytecodeLength, SODeclarationEntry* pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (uint* pBufferStridesPtr = &pBufferStrides)
                    {
                        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                        {
                            fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
                    {
                        fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
                    {
                        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
                    {
                        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                        {
                            fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
                    {
                        fixed (uint* pBufferStridesPtr = &pBufferStrides)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
                    {
                        fixed (uint* pBufferStridesPtr = &pBufferStrides)
                        {
                            fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
                    {
                        fixed (uint* pBufferStridesPtr = &pBufferStrides)
                        {
                            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateGeometryShaderWithStreamOutput<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ref SODeclarationEntry pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
                    {
                        fixed (uint* pBufferStridesPtr = &pBufferStrides)
                        {
                            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                            {
                                fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreatePixelShader(void* pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11PixelShader** ppPixelShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)LpVtbl[15])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppPixelShader);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreatePixelShader(void* pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11PixelShader* ppPixelShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11PixelShader** ppPixelShaderPtr = &ppPixelShader)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)LpVtbl[15])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppPixelShaderPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreatePixelShader(void* pShaderBytecode, uint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11PixelShader** ppPixelShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)LpVtbl[15])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppPixelShader);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreatePixelShader(void* pShaderBytecode, uint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11PixelShader* ppPixelShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    fixed (ID3D11PixelShader** ppPixelShaderPtr = &ppPixelShader)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)LpVtbl[15])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppPixelShaderPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreatePixelShader<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11PixelShader** ppPixelShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)LpVtbl[15])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppPixelShader);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreatePixelShader<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11PixelShader* ppPixelShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (ID3D11PixelShader** ppPixelShaderPtr = &ppPixelShader)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)LpVtbl[15])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppPixelShaderPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreatePixelShader<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11PixelShader** ppPixelShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)LpVtbl[15])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppPixelShader);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreatePixelShader<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11PixelShader* ppPixelShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        fixed (ID3D11PixelShader** ppPixelShaderPtr = &ppPixelShader)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)LpVtbl[15])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppPixelShaderPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateHullShader(void* pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11HullShader** ppHullShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)LpVtbl[16])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppHullShader);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateHullShader(void* pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11HullShader* ppHullShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11HullShader** ppHullShaderPtr = &ppHullShader)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)LpVtbl[16])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppHullShaderPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateHullShader(void* pShaderBytecode, uint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11HullShader** ppHullShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)LpVtbl[16])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppHullShader);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateHullShader(void* pShaderBytecode, uint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11HullShader* ppHullShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    fixed (ID3D11HullShader** ppHullShaderPtr = &ppHullShader)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)LpVtbl[16])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppHullShaderPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateHullShader<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11HullShader** ppHullShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)LpVtbl[16])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppHullShader);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateHullShader<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11HullShader* ppHullShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (ID3D11HullShader** ppHullShaderPtr = &ppHullShader)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)LpVtbl[16])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppHullShaderPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateHullShader<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11HullShader** ppHullShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)LpVtbl[16])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppHullShader);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateHullShader<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11HullShader* ppHullShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        fixed (ID3D11HullShader** ppHullShaderPtr = &ppHullShader)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)LpVtbl[16])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppHullShaderPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDomainShader(void* pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11DomainShader** ppDomainShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)LpVtbl[17])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppDomainShader);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDomainShader(void* pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11DomainShader* ppDomainShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11DomainShader** ppDomainShaderPtr = &ppDomainShader)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)LpVtbl[17])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppDomainShaderPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDomainShader(void* pShaderBytecode, uint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11DomainShader** ppDomainShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)LpVtbl[17])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppDomainShader);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDomainShader(void* pShaderBytecode, uint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11DomainShader* ppDomainShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    fixed (ID3D11DomainShader** ppDomainShaderPtr = &ppDomainShader)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)LpVtbl[17])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppDomainShaderPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDomainShader<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11DomainShader** ppDomainShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)LpVtbl[17])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppDomainShader);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDomainShader<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11DomainShader* ppDomainShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (ID3D11DomainShader** ppDomainShaderPtr = &ppDomainShader)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)LpVtbl[17])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppDomainShaderPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDomainShader<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11DomainShader** ppDomainShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)LpVtbl[17])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppDomainShader);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDomainShader<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11DomainShader* ppDomainShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        fixed (ID3D11DomainShader** ppDomainShaderPtr = &ppDomainShader)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)LpVtbl[17])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppDomainShaderPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateComputeShader(void* pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11ComputeShader** ppComputeShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)LpVtbl[18])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppComputeShader);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateComputeShader(void* pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11ComputeShader* ppComputeShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11ComputeShader** ppComputeShaderPtr = &ppComputeShader)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)LpVtbl[18])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppComputeShaderPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateComputeShader(void* pShaderBytecode, uint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11ComputeShader** ppComputeShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)LpVtbl[18])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppComputeShader);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateComputeShader(void* pShaderBytecode, uint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11ComputeShader* ppComputeShader)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    fixed (ID3D11ComputeShader** ppComputeShaderPtr = &ppComputeShader)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, void*, uint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)LpVtbl[18])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppComputeShaderPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateComputeShader<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11ComputeShader** ppComputeShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)LpVtbl[18])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppComputeShader);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateComputeShader<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11ComputeShader* ppComputeShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (ID3D11ComputeShader** ppComputeShaderPtr = &ppComputeShader)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)LpVtbl[18])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppComputeShaderPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateComputeShader<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11ComputeShader** ppComputeShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)LpVtbl[18])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppComputeShader);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateComputeShader<T0>(ref T0 pShaderBytecode, uint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11ComputeShader* ppComputeShader) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pShaderBytecodePtr = &pShaderBytecode)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        fixed (ID3D11ComputeShader** ppComputeShaderPtr = &ppComputeShader)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, T0*, uint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)LpVtbl[18])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppComputeShaderPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateClassLinkage(ID3D11ClassLinkage** ppLinkage)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, ID3D11ClassLinkage**, int>)LpVtbl[19])(@this, ppLinkage);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateClassLinkage(ref ID3D11ClassLinkage* ppLinkage)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11ClassLinkage** ppLinkagePtr = &ppLinkage)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, ID3D11ClassLinkage**, int>)LpVtbl[19])(@this, ppLinkagePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateBlendState(BlendDesc* pBlendStateDesc, ID3D11BlendState** ppBlendState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, BlendDesc*, ID3D11BlendState**, int>)LpVtbl[20])(@this, pBlendStateDesc, ppBlendState);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateBlendState(BlendDesc* pBlendStateDesc, ref ID3D11BlendState* ppBlendState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11BlendState** ppBlendStatePtr = &ppBlendState)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, BlendDesc*, ID3D11BlendState**, int>)LpVtbl[20])(@this, pBlendStateDesc, ppBlendStatePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateBlendState(ref BlendDesc pBlendStateDesc, ID3D11BlendState** ppBlendState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (BlendDesc* pBlendStateDescPtr = &pBlendStateDesc)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, BlendDesc*, ID3D11BlendState**, int>)LpVtbl[20])(@this, pBlendStateDescPtr, ppBlendState);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateBlendState(ref BlendDesc pBlendStateDesc, ref ID3D11BlendState* ppBlendState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (BlendDesc* pBlendStateDescPtr = &pBlendStateDesc)
                {
                    fixed (ID3D11BlendState** ppBlendStatePtr = &ppBlendState)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, BlendDesc*, ID3D11BlendState**, int>)LpVtbl[20])(@this, pBlendStateDescPtr, ppBlendStatePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDepthStencilState(DepthStencilDesc* pDepthStencilDesc, ID3D11DepthStencilState** ppDepthStencilState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, DepthStencilDesc*, ID3D11DepthStencilState**, int>)LpVtbl[21])(@this, pDepthStencilDesc, ppDepthStencilState);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDepthStencilState(DepthStencilDesc* pDepthStencilDesc, ref ID3D11DepthStencilState* ppDepthStencilState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11DepthStencilState** ppDepthStencilStatePtr = &ppDepthStencilState)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, DepthStencilDesc*, ID3D11DepthStencilState**, int>)LpVtbl[21])(@this, pDepthStencilDesc, ppDepthStencilStatePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDepthStencilState(ref DepthStencilDesc pDepthStencilDesc, ID3D11DepthStencilState** ppDepthStencilState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (DepthStencilDesc* pDepthStencilDescPtr = &pDepthStencilDesc)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, DepthStencilDesc*, ID3D11DepthStencilState**, int>)LpVtbl[21])(@this, pDepthStencilDescPtr, ppDepthStencilState);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDepthStencilState(ref DepthStencilDesc pDepthStencilDesc, ref ID3D11DepthStencilState* ppDepthStencilState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (DepthStencilDesc* pDepthStencilDescPtr = &pDepthStencilDesc)
                {
                    fixed (ID3D11DepthStencilState** ppDepthStencilStatePtr = &ppDepthStencilState)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, DepthStencilDesc*, ID3D11DepthStencilState**, int>)LpVtbl[21])(@this, pDepthStencilDescPtr, ppDepthStencilStatePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateRasterizerState(RasterizerDesc* pRasterizerDesc, ID3D11RasterizerState** ppRasterizerState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, RasterizerDesc*, ID3D11RasterizerState**, int>)LpVtbl[22])(@this, pRasterizerDesc, ppRasterizerState);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateRasterizerState(RasterizerDesc* pRasterizerDesc, ref ID3D11RasterizerState* ppRasterizerState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11RasterizerState** ppRasterizerStatePtr = &ppRasterizerState)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, RasterizerDesc*, ID3D11RasterizerState**, int>)LpVtbl[22])(@this, pRasterizerDesc, ppRasterizerStatePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateRasterizerState(ref RasterizerDesc pRasterizerDesc, ID3D11RasterizerState** ppRasterizerState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (RasterizerDesc* pRasterizerDescPtr = &pRasterizerDesc)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, RasterizerDesc*, ID3D11RasterizerState**, int>)LpVtbl[22])(@this, pRasterizerDescPtr, ppRasterizerState);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateRasterizerState(ref RasterizerDesc pRasterizerDesc, ref ID3D11RasterizerState* ppRasterizerState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (RasterizerDesc* pRasterizerDescPtr = &pRasterizerDesc)
                {
                    fixed (ID3D11RasterizerState** ppRasterizerStatePtr = &ppRasterizerState)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, RasterizerDesc*, ID3D11RasterizerState**, int>)LpVtbl[22])(@this, pRasterizerDescPtr, ppRasterizerStatePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateSamplerState(SamplerDesc* pSamplerDesc, ID3D11SamplerState** ppSamplerState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, SamplerDesc*, ID3D11SamplerState**, int>)LpVtbl[23])(@this, pSamplerDesc, ppSamplerState);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateSamplerState(SamplerDesc* pSamplerDesc, ref ID3D11SamplerState* ppSamplerState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11SamplerState** ppSamplerStatePtr = &ppSamplerState)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, SamplerDesc*, ID3D11SamplerState**, int>)LpVtbl[23])(@this, pSamplerDesc, ppSamplerStatePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateSamplerState(ref SamplerDesc pSamplerDesc, ID3D11SamplerState** ppSamplerState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (SamplerDesc* pSamplerDescPtr = &pSamplerDesc)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, SamplerDesc*, ID3D11SamplerState**, int>)LpVtbl[23])(@this, pSamplerDescPtr, ppSamplerState);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateSamplerState(ref SamplerDesc pSamplerDesc, ref ID3D11SamplerState* ppSamplerState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (SamplerDesc* pSamplerDescPtr = &pSamplerDesc)
                {
                    fixed (ID3D11SamplerState** ppSamplerStatePtr = &ppSamplerState)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, SamplerDesc*, ID3D11SamplerState**, int>)LpVtbl[23])(@this, pSamplerDescPtr, ppSamplerStatePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateQuery(QueryDesc* pQueryDesc, ID3D11Query** ppQuery)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, QueryDesc*, ID3D11Query**, int>)LpVtbl[24])(@this, pQueryDesc, ppQuery);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateQuery(QueryDesc* pQueryDesc, ref ID3D11Query* ppQuery)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11Query** ppQueryPtr = &ppQuery)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, QueryDesc*, ID3D11Query**, int>)LpVtbl[24])(@this, pQueryDesc, ppQueryPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateQuery(ref QueryDesc pQueryDesc, ID3D11Query** ppQuery)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (QueryDesc* pQueryDescPtr = &pQueryDesc)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, QueryDesc*, ID3D11Query**, int>)LpVtbl[24])(@this, pQueryDescPtr, ppQuery);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateQuery(ref QueryDesc pQueryDesc, ref ID3D11Query* ppQuery)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (QueryDesc* pQueryDescPtr = &pQueryDesc)
                {
                    fixed (ID3D11Query** ppQueryPtr = &ppQuery)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, QueryDesc*, ID3D11Query**, int>)LpVtbl[24])(@this, pQueryDescPtr, ppQueryPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreatePredicate(QueryDesc* pPredicateDesc, ID3D11Predicate** ppPredicate)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, QueryDesc*, ID3D11Predicate**, int>)LpVtbl[25])(@this, pPredicateDesc, ppPredicate);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreatePredicate(QueryDesc* pPredicateDesc, ref ID3D11Predicate* ppPredicate)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11Predicate** ppPredicatePtr = &ppPredicate)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, QueryDesc*, ID3D11Predicate**, int>)LpVtbl[25])(@this, pPredicateDesc, ppPredicatePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreatePredicate(ref QueryDesc pPredicateDesc, ID3D11Predicate** ppPredicate)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (QueryDesc* pPredicateDescPtr = &pPredicateDesc)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, QueryDesc*, ID3D11Predicate**, int>)LpVtbl[25])(@this, pPredicateDescPtr, ppPredicate);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreatePredicate(ref QueryDesc pPredicateDesc, ref ID3D11Predicate* ppPredicate)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (QueryDesc* pPredicateDescPtr = &pPredicateDesc)
                {
                    fixed (ID3D11Predicate** ppPredicatePtr = &ppPredicate)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, QueryDesc*, ID3D11Predicate**, int>)LpVtbl[25])(@this, pPredicateDescPtr, ppPredicatePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateCounter(CounterDesc* pCounterDesc, ID3D11Counter** ppCounter)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, ID3D11Counter**, int>)LpVtbl[26])(@this, pCounterDesc, ppCounter);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateCounter(CounterDesc* pCounterDesc, ref ID3D11Counter* ppCounter)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11Counter** ppCounterPtr = &ppCounter)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, ID3D11Counter**, int>)LpVtbl[26])(@this, pCounterDesc, ppCounterPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateCounter(ref CounterDesc pCounterDesc, ID3D11Counter** ppCounter)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pCounterDescPtr = &pCounterDesc)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, ID3D11Counter**, int>)LpVtbl[26])(@this, pCounterDescPtr, ppCounter);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateCounter(ref CounterDesc pCounterDesc, ref ID3D11Counter* ppCounter)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pCounterDescPtr = &pCounterDesc)
                {
                    fixed (ID3D11Counter** ppCounterPtr = &ppCounter)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, ID3D11Counter**, int>)LpVtbl[26])(@this, pCounterDescPtr, ppCounterPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDeferredContext(uint ContextFlags, ID3D11DeviceContext** ppDeferredContext)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, uint, ID3D11DeviceContext**, int>)LpVtbl[27])(@this, ContextFlags, ppDeferredContext);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDeferredContext(uint ContextFlags, ref ID3D11DeviceContext* ppDeferredContext)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11DeviceContext** ppDeferredContextPtr = &ppDeferredContext)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, uint, ID3D11DeviceContext**, int>)LpVtbl[27])(@this, ContextFlags, ppDeferredContextPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResource(void* hResource, Guid* ReturnedInterface, void** ppResource)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, void*, Guid*, void**, int>)LpVtbl[28])(@this, hResource, ReturnedInterface, ppResource);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResource(void* hResource, Guid* ReturnedInterface, ref void* ppResource)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (void** ppResourcePtr = &ppResource)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, void*, Guid*, void**, int>)LpVtbl[28])(@this, hResource, ReturnedInterface, ppResourcePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResource(void* hResource, ref Guid ReturnedInterface, void** ppResource)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Guid* ReturnedInterfacePtr = &ReturnedInterface)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, void*, Guid*, void**, int>)LpVtbl[28])(@this, hResource, ReturnedInterfacePtr, ppResource);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResource(void* hResource, ref Guid ReturnedInterface, ref void* ppResource)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Guid* ReturnedInterfacePtr = &ReturnedInterface)
                {
                    fixed (void** ppResourcePtr = &ppResource)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, void*, Guid*, void**, int>)LpVtbl[28])(@this, hResource, ReturnedInterfacePtr, ppResourcePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResource<T0>(ref T0 hResource, Guid* ReturnedInterface, void** ppResource) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* hResourcePtr = &hResource)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, T0*, Guid*, void**, int>)LpVtbl[28])(@this, hResourcePtr, ReturnedInterface, ppResource);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResource<T0>(ref T0 hResource, Guid* ReturnedInterface, ref void* ppResource) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* hResourcePtr = &hResource)
                {
                    fixed (void** ppResourcePtr = &ppResource)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, T0*, Guid*, void**, int>)LpVtbl[28])(@this, hResourcePtr, ReturnedInterface, ppResourcePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResource<T0>(ref T0 hResource, ref Guid ReturnedInterface, void** ppResource) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* hResourcePtr = &hResource)
                {
                    fixed (Guid* ReturnedInterfacePtr = &ReturnedInterface)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, T0*, Guid*, void**, int>)LpVtbl[28])(@this, hResourcePtr, ReturnedInterfacePtr, ppResource);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResource<T0>(ref T0 hResource, ref Guid ReturnedInterface, ref void* ppResource) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* hResourcePtr = &hResource)
                {
                    fixed (Guid* ReturnedInterfacePtr = &ReturnedInterface)
                    {
                        fixed (void** ppResourcePtr = &ppResource)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, T0*, Guid*, void**, int>)LpVtbl[28])(@this, hResourcePtr, ReturnedInterfacePtr, ppResourcePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckFormatSupport(Silk.NET.DXGI.Format Format, uint* pFormatSupport)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, Silk.NET.DXGI.Format, uint*, int>)LpVtbl[29])(@this, Format, pFormatSupport);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public int CheckFormatSupport(Silk.NET.DXGI.Format Format, ref uint pFormatSupport)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pFormatSupportPtr = &pFormatSupport)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, Silk.NET.DXGI.Format, uint*, int>)LpVtbl[29])(@this, Format, pFormatSupportPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckMultisampleQualityLevels(Silk.NET.DXGI.Format Format, uint SampleCount, uint* pNumQualityLevels)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, Silk.NET.DXGI.Format, uint, uint*, int>)LpVtbl[30])(@this, Format, SampleCount, pNumQualityLevels);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public int CheckMultisampleQualityLevels(Silk.NET.DXGI.Format Format, uint SampleCount, ref uint pNumQualityLevels)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNumQualityLevelsPtr = &pNumQualityLevels)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, Silk.NET.DXGI.Format, uint, uint*, int>)LpVtbl[30])(@this, Format, SampleCount, pNumQualityLevelsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe void CheckCounterInfo(CounterInfo* pCounterInfo)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                ((delegate* cdecl<ID3D11Device1*, CounterInfo*, void>)LpVtbl[31])(@this, pCounterInfo);
            }
        }

        /// <summary>To be added.</summary>
        public void CheckCounterInfo(ref CounterInfo pCounterInfo)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                fixed (CounterInfo* pCounterInfoPtr = &pCounterInfo)
                {
                    ((delegate* cdecl<ID3D11Device1*, CounterInfo*, void>)LpVtbl[31])(@this, pCounterInfoPtr);
                }
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szUnitsPtr = &szUnits)
                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szUnitsPtr = &szUnits)
                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (byte* szUnitsPtr = &szUnits)
                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (byte* szUnitsPtr = &szUnits)
                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (byte* szDescriptionPtr = &szDescription)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (byte* szDescriptionPtr = &szDescription)
                                        {
                                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                            {
                                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (byte* szDescriptionPtr = &szDescription)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (byte* szDescriptionPtr = &szDescription)
                                        {
                                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                            {
                                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (byte* szDescriptionPtr = &szDescription)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (byte* szDescriptionPtr = &szDescription)
                                        {
                                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                            {
                                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (byte* szDescriptionPtr = &szDescription)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (byte* szDescriptionPtr = &szDescription)
                                        {
                                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                            {
                                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (byte* szDescriptionPtr = &szDescription)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (byte* szDescriptionPtr = &szDescription)
                                        {
                                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                            {
                                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (byte* szDescriptionPtr = &szDescription)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (byte* szDescriptionPtr = &szDescription)
                                        {
                                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                            {
                                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
                                    fixed (byte* szUnitsPtr = &szUnits)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
                                    fixed (byte* szUnitsPtr = &szUnits)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
                                    fixed (byte* szUnitsPtr = &szUnits)
                                    {
                                        fixed (byte* szDescriptionPtr = &szDescription)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
                                    fixed (byte* szUnitsPtr = &szUnits)
                                    {
                                        fixed (byte* szDescriptionPtr = &szDescription)
                                        {
                                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                            {
                                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
                                    fixed (byte* szUnitsPtr = &szUnits)
                                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
                                    fixed (byte* szUnitsPtr = &szUnits)
                                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
                                    fixed (byte* szUnitsPtr = &szUnits)
                                    {
                                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
                                    fixed (byte* szUnitsPtr = &szUnits)
                                    {
                                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                        {
                                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                            {
                                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
                                    fixed (byte* szUnitsPtr = &szUnits)
                                    {
                                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                        {
                                            fixed (byte* szDescriptionPtr = &szDescription)
                                            {
                                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
                                    fixed (byte* szUnitsPtr = &szUnits)
                                    {
                                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                        {
                                            fixed (byte* szDescriptionPtr = &szDescription)
                                            {
                                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                                {
                                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
                                    fixed (byte* szUnitsPtr = &szUnits)
                                    {
                                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
                                    fixed (byte* szUnitsPtr = &szUnits)
                                    {
                                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                        {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                            {
                                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                        }
                                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (byte* szDescriptionPtr = &szDescription)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                        }
                                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (byte* szDescriptionPtr = &szDescription)
                                        {
                                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                            {
                                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                            }
                                        }
                                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
                            fixed (byte* szNamePtr = &szName)
                            {
                                fixed (uint* pNameLengthPtr = &pNameLength)
                                {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                                }
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (byte* szDescriptionPtr = &szDescription)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                        }
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (byte* szDescriptionPtr = &szDescription)
                                        {
                                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                            {
                                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                            }
                                        }
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                    }
                                }
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public int CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (CounterDesc* pDescPtr = &pDesc)
                {
                    fixed (CounterType* pTypePtr = &pType)
                    {
                        fixed (uint* pActiveCountersPtr = &pActiveCounters)
                        {
            var szNamePtr = (byte*) Marshal.StringToHGlobalAnsi(szName);
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) Marshal.StringToHGlobalAnsi(szUnits);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) Marshal.StringToHGlobalAnsi(szDescription);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* cdecl<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            Marshal.FreeHGlobal((IntPtr)szDescriptionPtr);
                                }
            Marshal.FreeHGlobal((IntPtr)szUnitsPtr);
                            }
            Marshal.FreeHGlobal((IntPtr)szNamePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CheckFeatureSupport(Feature Feature, void* pFeatureSupportData, uint FeatureSupportDataSize)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, Feature, void*, uint, int>)LpVtbl[33])(@this, Feature, pFeatureSupportData, FeatureSupportDataSize);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public int CheckFeatureSupport<T0>(Feature Feature, ref T0 pFeatureSupportData, uint FeatureSupportDataSize) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pFeatureSupportDataPtr = &pFeatureSupportData)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, Feature, T0*, uint, int>)LpVtbl[33])(@this, Feature, pFeatureSupportDataPtr, FeatureSupportDataSize);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, Guid*, uint*, void*, int>)LpVtbl[34])(@this, guid, pDataSize, pData);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int GetPrivateData<T0>(Guid* guid, uint* pDataSize, ref T0 pData) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pDataPtr = &pData)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, Guid*, uint*, T0*, int>)LpVtbl[34])(@this, guid, pDataSize, pDataPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int GetPrivateData(Guid* guid, ref uint pDataSize, void* pData)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pDataSizePtr = &pDataSize)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, Guid*, uint*, void*, int>)LpVtbl[34])(@this, guid, pDataSizePtr, pData);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int GetPrivateData<T0>(Guid* guid, ref uint pDataSize, ref T0 pData) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (uint* pDataSizePtr = &pDataSize)
                {
                    fixed (T0* pDataPtr = &pData)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, Guid*, uint*, T0*, int>)LpVtbl[34])(@this, guid, pDataSizePtr, pDataPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int GetPrivateData(ref Guid guid, uint* pDataSize, void* pData)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Guid* guidPtr = &guid)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, Guid*, uint*, void*, int>)LpVtbl[34])(@this, guidPtr, pDataSize, pData);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int GetPrivateData<T0>(ref Guid guid, uint* pDataSize, ref T0 pData) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Guid* guidPtr = &guid)
                {
                    fixed (T0* pDataPtr = &pData)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, Guid*, uint*, T0*, int>)LpVtbl[34])(@this, guidPtr, pDataSize, pDataPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int GetPrivateData(ref Guid guid, ref uint pDataSize, void* pData)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Guid* guidPtr = &guid)
                {
                    fixed (uint* pDataSizePtr = &pDataSize)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, Guid*, uint*, void*, int>)LpVtbl[34])(@this, guidPtr, pDataSizePtr, pData);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public int GetPrivateData<T0>(ref Guid guid, ref uint pDataSize, ref T0 pData) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Guid* guidPtr = &guid)
                {
                    fixed (uint* pDataSizePtr = &pDataSize)
                    {
                        fixed (T0* pDataPtr = &pData)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, Guid*, uint*, T0*, int>)LpVtbl[34])(@this, guidPtr, pDataSizePtr, pDataPtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int SetPrivateData(Guid* guid, uint DataSize, void* pData)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, Guid*, uint, void*, int>)LpVtbl[35])(@this, guid, DataSize, pData);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int SetPrivateData<T0>(Guid* guid, uint DataSize, ref T0 pData) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* pDataPtr = &pData)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, Guid*, uint, T0*, int>)LpVtbl[35])(@this, guid, DataSize, pDataPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int SetPrivateData(ref Guid guid, uint DataSize, void* pData)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Guid* guidPtr = &guid)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, Guid*, uint, void*, int>)LpVtbl[35])(@this, guidPtr, DataSize, pData);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public int SetPrivateData<T0>(ref Guid guid, uint DataSize, ref T0 pData) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Guid* guidPtr = &guid)
                {
                    fixed (T0* pDataPtr = &pData)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, Guid*, uint, T0*, int>)LpVtbl[35])(@this, guidPtr, DataSize, pDataPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int SetPrivateDataInterface(Guid* guid, [Flow(FlowDirection.In)] Silk.NET.Core.Runtime.Windows.IUnknown* pData)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, Guid*, Silk.NET.Core.Runtime.Windows.IUnknown*, int>)LpVtbl[36])(@this, guid, pData);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int SetPrivateDataInterface(Guid* guid, [Flow(FlowDirection.In)] in Silk.NET.Core.Runtime.Windows.IUnknown pData)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Silk.NET.Core.Runtime.Windows.IUnknown* pDataPtr = &pData)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, Guid*, Silk.NET.Core.Runtime.Windows.IUnknown*, int>)LpVtbl[36])(@this, guid, pDataPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int SetPrivateDataInterface(ref Guid guid, [Flow(FlowDirection.In)] Silk.NET.Core.Runtime.Windows.IUnknown* pData)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Guid* guidPtr = &guid)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, Guid*, Silk.NET.Core.Runtime.Windows.IUnknown*, int>)LpVtbl[36])(@this, guidPtr, pData);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public int SetPrivateDataInterface(ref Guid guid, [Flow(FlowDirection.In)] in Silk.NET.Core.Runtime.Windows.IUnknown pData)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Guid* guidPtr = &guid)
                {
                    fixed (Silk.NET.Core.Runtime.Windows.IUnknown* pDataPtr = &pData)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, Guid*, Silk.NET.Core.Runtime.Windows.IUnknown*, int>)LpVtbl[36])(@this, guidPtr, pDataPtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public Silk.NET.Core.Native.FeatureLevel GetFeatureLevel()
        {
            fixed (ID3D11Device1* @this = &this)
            {
                Silk.NET.Core.Native.FeatureLevel ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, Silk.NET.Core.Native.FeatureLevel>)LpVtbl[37])(@this);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public uint GetCreationFlags()
        {
            fixed (ID3D11Device1* @this = &this)
            {
                uint ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, uint>)LpVtbl[38])(@this);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public int GetDeviceRemovedReason()
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, int>)LpVtbl[39])(@this);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe void GetImmediateContext(ID3D11DeviceContext** ppImmediateContext)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                ((delegate* cdecl<ID3D11Device1*, ID3D11DeviceContext**, void>)LpVtbl[40])(@this, ppImmediateContext);
            }
        }

        /// <summary>To be added.</summary>
        public unsafe void GetImmediateContext(ref ID3D11DeviceContext* ppImmediateContext)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                fixed (ID3D11DeviceContext** ppImmediateContextPtr = &ppImmediateContext)
                {
                    ((delegate* cdecl<ID3D11Device1*, ID3D11DeviceContext**, void>)LpVtbl[40])(@this, ppImmediateContextPtr);
                }
            }
        }

        /// <summary>To be added.</summary>
        public int SetExceptionMode(uint RaiseFlags)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, uint, int>)LpVtbl[41])(@this, RaiseFlags);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public uint GetExceptionMode()
        {
            fixed (ID3D11Device1* @this = &this)
            {
                uint ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, uint>)LpVtbl[42])(@this);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe void GetImmediateContext1(ID3D11DeviceContext1** ppImmediateContext)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                ((delegate* cdecl<ID3D11Device1*, ID3D11DeviceContext1**, void>)LpVtbl[43])(@this, ppImmediateContext);
            }
        }

        /// <summary>To be added.</summary>
        public unsafe void GetImmediateContext1(ref ID3D11DeviceContext1* ppImmediateContext)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                fixed (ID3D11DeviceContext1** ppImmediateContextPtr = &ppImmediateContext)
                {
                    ((delegate* cdecl<ID3D11Device1*, ID3D11DeviceContext1**, void>)LpVtbl[43])(@this, ppImmediateContextPtr);
                }
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDeferredContext1(uint ContextFlags, ID3D11DeviceContext1** ppDeferredContext)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, uint, ID3D11DeviceContext1**, int>)LpVtbl[44])(@this, ContextFlags, ppDeferredContext);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDeferredContext1(uint ContextFlags, ref ID3D11DeviceContext1* ppDeferredContext)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11DeviceContext1** ppDeferredContextPtr = &ppDeferredContext)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, uint, ID3D11DeviceContext1**, int>)LpVtbl[44])(@this, ContextFlags, ppDeferredContextPtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateBlendState1(BlendDesc1* pBlendStateDesc, ID3D11BlendState1** ppBlendState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, BlendDesc1*, ID3D11BlendState1**, int>)LpVtbl[45])(@this, pBlendStateDesc, ppBlendState);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateBlendState1(BlendDesc1* pBlendStateDesc, ref ID3D11BlendState1* ppBlendState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11BlendState1** ppBlendStatePtr = &ppBlendState)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, BlendDesc1*, ID3D11BlendState1**, int>)LpVtbl[45])(@this, pBlendStateDesc, ppBlendStatePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateBlendState1(ref BlendDesc1 pBlendStateDesc, ID3D11BlendState1** ppBlendState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (BlendDesc1* pBlendStateDescPtr = &pBlendStateDesc)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, BlendDesc1*, ID3D11BlendState1**, int>)LpVtbl[45])(@this, pBlendStateDescPtr, ppBlendState);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateBlendState1(ref BlendDesc1 pBlendStateDesc, ref ID3D11BlendState1* ppBlendState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (BlendDesc1* pBlendStateDescPtr = &pBlendStateDesc)
                {
                    fixed (ID3D11BlendState1** ppBlendStatePtr = &ppBlendState)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, BlendDesc1*, ID3D11BlendState1**, int>)LpVtbl[45])(@this, pBlendStateDescPtr, ppBlendStatePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateRasterizerState1(RasterizerDesc1* pRasterizerDesc, ID3D11RasterizerState1** ppRasterizerState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, RasterizerDesc1*, ID3D11RasterizerState1**, int>)LpVtbl[46])(@this, pRasterizerDesc, ppRasterizerState);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateRasterizerState1(RasterizerDesc1* pRasterizerDesc, ref ID3D11RasterizerState1* ppRasterizerState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3D11RasterizerState1** ppRasterizerStatePtr = &ppRasterizerState)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, RasterizerDesc1*, ID3D11RasterizerState1**, int>)LpVtbl[46])(@this, pRasterizerDesc, ppRasterizerStatePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateRasterizerState1(ref RasterizerDesc1 pRasterizerDesc, ID3D11RasterizerState1** ppRasterizerState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (RasterizerDesc1* pRasterizerDescPtr = &pRasterizerDesc)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, RasterizerDesc1*, ID3D11RasterizerState1**, int>)LpVtbl[46])(@this, pRasterizerDescPtr, ppRasterizerState);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateRasterizerState1(ref RasterizerDesc1 pRasterizerDesc, ref ID3D11RasterizerState1* ppRasterizerState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (RasterizerDesc1* pRasterizerDescPtr = &pRasterizerDesc)
                {
                    fixed (ID3D11RasterizerState1** ppRasterizerStatePtr = &ppRasterizerState)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, RasterizerDesc1*, ID3D11RasterizerState1**, int>)LpVtbl[46])(@this, pRasterizerDescPtr, ppRasterizerStatePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDeviceContextState(uint Flags, Silk.NET.Core.Native.FeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Silk.NET.Core.Native.FeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, uint, Silk.NET.Core.Native.FeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.FeatureLevel*, ID3DDeviceContextState**, int>)LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, ppContextState);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDeviceContextState(uint Flags, Silk.NET.Core.Native.FeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Silk.NET.Core.Native.FeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, uint, Silk.NET.Core.Native.FeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.FeatureLevel*, ID3DDeviceContextState**, int>)LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, ppContextStatePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDeviceContextState(uint Flags, Silk.NET.Core.Native.FeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, ref Silk.NET.Core.Native.FeatureLevel pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Silk.NET.Core.Native.FeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, uint, Silk.NET.Core.Native.FeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.FeatureLevel*, ID3DDeviceContextState**, int>)LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevelPtr, ppContextState);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDeviceContextState(uint Flags, Silk.NET.Core.Native.FeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, ref Silk.NET.Core.Native.FeatureLevel pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Silk.NET.Core.Native.FeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
                {
                    fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, uint, Silk.NET.Core.Native.FeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.FeatureLevel*, ID3DDeviceContextState**, int>)LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevelPtr, ppContextStatePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDeviceContextState(uint Flags, Silk.NET.Core.Native.FeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, Silk.NET.Core.Native.FeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, uint, Silk.NET.Core.Native.FeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.FeatureLevel*, ID3DDeviceContextState**, int>)LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevel, ppContextState);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDeviceContextState(uint Flags, Silk.NET.Core.Native.FeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, Silk.NET.Core.Native.FeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
                {
                    fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, uint, Silk.NET.Core.Native.FeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.FeatureLevel*, ID3DDeviceContextState**, int>)LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevel, ppContextStatePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDeviceContextState(uint Flags, Silk.NET.Core.Native.FeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, ref Silk.NET.Core.Native.FeatureLevel pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
                {
                    fixed (Silk.NET.Core.Native.FeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, uint, Silk.NET.Core.Native.FeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.FeatureLevel*, ID3DDeviceContextState**, int>)LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevelPtr, ppContextState);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDeviceContextState(uint Flags, Silk.NET.Core.Native.FeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, ref Silk.NET.Core.Native.FeatureLevel pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
                {
                    fixed (Silk.NET.Core.Native.FeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
                    {
                        fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, uint, Silk.NET.Core.Native.FeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.FeatureLevel*, ID3DDeviceContextState**, int>)LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevelPtr, ppContextStatePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDeviceContextState(uint Flags, ref Silk.NET.Core.Native.FeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Silk.NET.Core.Native.FeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Silk.NET.Core.Native.FeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, uint, Silk.NET.Core.Native.FeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.FeatureLevel*, ID3DDeviceContextState**, int>)LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, ppContextState);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDeviceContextState(uint Flags, ref Silk.NET.Core.Native.FeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Silk.NET.Core.Native.FeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Silk.NET.Core.Native.FeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
                {
                    fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, uint, Silk.NET.Core.Native.FeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.FeatureLevel*, ID3DDeviceContextState**, int>)LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, ppContextStatePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDeviceContextState(uint Flags, ref Silk.NET.Core.Native.FeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, ref Silk.NET.Core.Native.FeatureLevel pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Silk.NET.Core.Native.FeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
                {
                    fixed (Silk.NET.Core.Native.FeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, uint, Silk.NET.Core.Native.FeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.FeatureLevel*, ID3DDeviceContextState**, int>)LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevelPtr, ppContextState);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDeviceContextState(uint Flags, ref Silk.NET.Core.Native.FeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, ref Silk.NET.Core.Native.FeatureLevel pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Silk.NET.Core.Native.FeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
                {
                    fixed (Silk.NET.Core.Native.FeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
                    {
                        fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, uint, Silk.NET.Core.Native.FeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.FeatureLevel*, ID3DDeviceContextState**, int>)LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevelPtr, ppContextStatePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDeviceContextState(uint Flags, ref Silk.NET.Core.Native.FeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, Silk.NET.Core.Native.FeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Silk.NET.Core.Native.FeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
                {
                    fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, uint, Silk.NET.Core.Native.FeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.FeatureLevel*, ID3DDeviceContextState**, int>)LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevel, ppContextState);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDeviceContextState(uint Flags, ref Silk.NET.Core.Native.FeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, Silk.NET.Core.Native.FeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Silk.NET.Core.Native.FeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
                {
                    fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
                    {
                        fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, uint, Silk.NET.Core.Native.FeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.FeatureLevel*, ID3DDeviceContextState**, int>)LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevel, ppContextStatePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDeviceContextState(uint Flags, ref Silk.NET.Core.Native.FeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, ref Silk.NET.Core.Native.FeatureLevel pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Silk.NET.Core.Native.FeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
                {
                    fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
                    {
                        fixed (Silk.NET.Core.Native.FeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, uint, Silk.NET.Core.Native.FeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.FeatureLevel*, ID3DDeviceContextState**, int>)LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevelPtr, ppContextState);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int CreateDeviceContextState(uint Flags, ref Silk.NET.Core.Native.FeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, ref Silk.NET.Core.Native.FeatureLevel pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Silk.NET.Core.Native.FeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
                {
                    fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
                    {
                        fixed (Silk.NET.Core.Native.FeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
                        {
                            fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
                            {
                                ret = ((delegate* cdecl<ID3D11Device1*, uint, Silk.NET.Core.Native.FeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.FeatureLevel*, ID3DDeviceContextState**, int>)LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevelPtr, ppContextStatePtr);
                            }
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResource1(void* hResource, Guid* returnedInterface, void** ppResource)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, void*, Guid*, void**, int>)LpVtbl[48])(@this, hResource, returnedInterface, ppResource);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResource1(void* hResource, Guid* returnedInterface, ref void* ppResource)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (void** ppResourcePtr = &ppResource)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, void*, Guid*, void**, int>)LpVtbl[48])(@this, hResource, returnedInterface, ppResourcePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResource1(void* hResource, ref Guid returnedInterface, void** ppResource)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Guid* returnedInterfacePtr = &returnedInterface)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, void*, Guid*, void**, int>)LpVtbl[48])(@this, hResource, returnedInterfacePtr, ppResource);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResource1(void* hResource, ref Guid returnedInterface, ref void* ppResource)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Guid* returnedInterfacePtr = &returnedInterface)
                {
                    fixed (void** ppResourcePtr = &ppResource)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, void*, Guid*, void**, int>)LpVtbl[48])(@this, hResource, returnedInterfacePtr, ppResourcePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResource1<T0>(ref T0 hResource, Guid* returnedInterface, void** ppResource) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* hResourcePtr = &hResource)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, T0*, Guid*, void**, int>)LpVtbl[48])(@this, hResourcePtr, returnedInterface, ppResource);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResource1<T0>(ref T0 hResource, Guid* returnedInterface, ref void* ppResource) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* hResourcePtr = &hResource)
                {
                    fixed (void** ppResourcePtr = &ppResource)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, T0*, Guid*, void**, int>)LpVtbl[48])(@this, hResourcePtr, returnedInterface, ppResourcePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResource1<T0>(ref T0 hResource, ref Guid returnedInterface, void** ppResource) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* hResourcePtr = &hResource)
                {
                    fixed (Guid* returnedInterfacePtr = &returnedInterface)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, T0*, Guid*, void**, int>)LpVtbl[48])(@this, hResourcePtr, returnedInterfacePtr, ppResource);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResource1<T0>(ref T0 hResource, ref Guid returnedInterface, ref void* ppResource) where T0 : unmanaged
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (T0* hResourcePtr = &hResource)
                {
                    fixed (Guid* returnedInterfacePtr = &returnedInterface)
                    {
                        fixed (void** ppResourcePtr = &ppResource)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, T0*, Guid*, void**, int>)LpVtbl[48])(@this, hResourcePtr, returnedInterfacePtr, ppResourcePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResourceByName(char* lpName, uint dwDesiredAccess, Guid* returnedInterface, void** ppResource)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                ret = ((delegate* cdecl<ID3D11Device1*, char*, uint, Guid*, void**, int>)LpVtbl[49])(@this, lpName, dwDesiredAccess, returnedInterface, ppResource);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResourceByName(char* lpName, uint dwDesiredAccess, Guid* returnedInterface, ref void* ppResource)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (void** ppResourcePtr = &ppResource)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, char*, uint, Guid*, void**, int>)LpVtbl[49])(@this, lpName, dwDesiredAccess, returnedInterface, ppResourcePtr);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResourceByName(char* lpName, uint dwDesiredAccess, ref Guid returnedInterface, void** ppResource)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Guid* returnedInterfacePtr = &returnedInterface)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, char*, uint, Guid*, void**, int>)LpVtbl[49])(@this, lpName, dwDesiredAccess, returnedInterfacePtr, ppResource);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResourceByName(char* lpName, uint dwDesiredAccess, ref Guid returnedInterface, ref void* ppResource)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (Guid* returnedInterfacePtr = &returnedInterface)
                {
                    fixed (void** ppResourcePtr = &ppResource)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, char*, uint, Guid*, void**, int>)LpVtbl[49])(@this, lpName, dwDesiredAccess, returnedInterfacePtr, ppResourcePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResourceByName(ref char lpName, uint dwDesiredAccess, Guid* returnedInterface, void** ppResource)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (char* lpNamePtr = &lpName)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, char*, uint, Guid*, void**, int>)LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterface, ppResource);
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResourceByName(ref char lpName, uint dwDesiredAccess, Guid* returnedInterface, ref void* ppResource)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (char* lpNamePtr = &lpName)
                {
                    fixed (void** ppResourcePtr = &ppResource)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, char*, uint, Guid*, void**, int>)LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterface, ppResourcePtr);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResourceByName(ref char lpName, uint dwDesiredAccess, ref Guid returnedInterface, void** ppResource)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (char* lpNamePtr = &lpName)
                {
                    fixed (Guid* returnedInterfacePtr = &returnedInterface)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, char*, uint, Guid*, void**, int>)LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterfacePtr, ppResource);
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResourceByName(ref char lpName, uint dwDesiredAccess, ref Guid returnedInterface, ref void* ppResource)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
                fixed (char* lpNamePtr = &lpName)
                {
                    fixed (Guid* returnedInterfacePtr = &returnedInterface)
                    {
                        fixed (void** ppResourcePtr = &ppResource)
                        {
                            ret = ((delegate* cdecl<ID3D11Device1*, char*, uint, Guid*, void**, int>)LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterfacePtr, ppResourcePtr);
                        }
                    }
                }
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResourceByName(string lpName, uint dwDesiredAccess, Guid* returnedInterface, void** ppResource)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var lpNamePtr = (byte*) Marshal.StringToHGlobalAnsi(lpName);
                ret = ((delegate* cdecl<ID3D11Device1*, byte*, uint, Guid*, void**, int>)LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterface, ppResource);
            Marshal.FreeHGlobal((IntPtr)lpNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResourceByName(string lpName, uint dwDesiredAccess, Guid* returnedInterface, ref void* ppResource)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var lpNamePtr = (byte*) Marshal.StringToHGlobalAnsi(lpName);
                fixed (void** ppResourcePtr = &ppResource)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, byte*, uint, Guid*, void**, int>)LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterface, ppResourcePtr);
                }
            Marshal.FreeHGlobal((IntPtr)lpNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResourceByName(string lpName, uint dwDesiredAccess, ref Guid returnedInterface, void** ppResource)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var lpNamePtr = (byte*) Marshal.StringToHGlobalAnsi(lpName);
                fixed (Guid* returnedInterfacePtr = &returnedInterface)
                {
                    ret = ((delegate* cdecl<ID3D11Device1*, byte*, uint, Guid*, void**, int>)LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterfacePtr, ppResource);
                }
            Marshal.FreeHGlobal((IntPtr)lpNamePtr);
                return ret;
            }
        }

        /// <summary>To be added.</summary>
        public unsafe int OpenSharedResourceByName(string lpName, uint dwDesiredAccess, ref Guid returnedInterface, ref void* ppResource)
        {
            fixed (ID3D11Device1* @this = &this)
            {
                int ret = default;
            var lpNamePtr = (byte*) Marshal.StringToHGlobalAnsi(lpName);
                fixed (Guid* returnedInterfacePtr = &returnedInterface)
                {
                    fixed (void** ppResourcePtr = &ppResource)
                    {
                        ret = ((delegate* cdecl<ID3D11Device1*, byte*, uint, Guid*, void**, int>)LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterfacePtr, ppResourcePtr);
                    }
                }
            Marshal.FreeHGlobal((IntPtr)lpNamePtr);
                return ret;
            }
        }

    }
}
