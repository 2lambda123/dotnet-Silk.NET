#nullable enable
const Silk.NET.BuildTools.Generator.TestMode = false -> bool
override Silk.NET.BuildTools.Common.Functions.Function.GetHashCode() -> int
override Silk.NET.BuildTools.Common.Functions.GenericTypeParameter.GetHashCode() -> int
override Silk.NET.BuildTools.Common.Functions.Parameter.GetHashCode() -> int
Silk.NET.BuildTools.BakeryOptions
Silk.NET.BuildTools.BakeryOptions.BakeryOptions() -> void
Silk.NET.BuildTools.Baking.PreprocessorMixin
Silk.NET.BuildTools.Baking.ProfileBakery
Silk.NET.BuildTools.Bind.BindState
Silk.NET.BuildTools.Bind.BindState.BindState(Silk.NET.BuildTools.BindTask task) -> void
Silk.NET.BuildTools.Bind.BindState.Task -> Silk.NET.BuildTools.BindTask
Silk.NET.BuildTools.Bind.ClassWriter
Silk.NET.BuildTools.Bind.EnumWriter
Silk.NET.BuildTools.Bind.ProfileWriter
Silk.NET.BuildTools.Bind.ProjectWriter
Silk.NET.BuildTools.Bind.StructWriter
Silk.NET.BuildTools.BindTask
Silk.NET.BuildTools.BindTask.BakeryOpts.get -> Silk.NET.BuildTools.BakeryOptions
Silk.NET.BuildTools.BindTask.BakeryOpts.set -> void
Silk.NET.BuildTools.BindTask.BindTask() -> void
Silk.NET.BuildTools.BindTask.ClangOpts.get -> Silk.NET.BuildTools.ClangTaskOptions
Silk.NET.BuildTools.BindTask.ClangOpts.set -> void
Silk.NET.BuildTools.BindTask.ConverterOpts.get -> Silk.NET.BuildTools.ConverterOptions
Silk.NET.BuildTools.BindTask.ConverterOpts.set -> void
Silk.NET.BuildTools.BindTask.Mode.get -> Silk.NET.BuildTools.ConverterMode
Silk.NET.BuildTools.BindTask.Mode.set -> void
Silk.NET.BuildTools.BindTask.OutputOpts.get -> Silk.NET.BuildTools.OutputOptions
Silk.NET.BuildTools.BindTask.OutputOpts.set -> void
Silk.NET.BuildTools.ClangTaskOptions
Silk.NET.BuildTools.ClangTaskOptions.ClangTaskOptions() -> void
Silk.NET.BuildTools.Common.Attribute
Silk.NET.BuildTools.Common.Attribute.Attribute() -> void
Silk.NET.BuildTools.Common.Builders.FunctionSignatureBuilder
Silk.NET.BuildTools.Common.Builders.ParameterSignatureBuilder
Silk.NET.BuildTools.Common.Builders.TypeSignatureBuilder
Silk.NET.BuildTools.Common.Class
Silk.NET.BuildTools.Common.Class.Class() -> void
Silk.NET.BuildTools.Common.Constant
Silk.NET.BuildTools.Common.Constant.Constant() -> void
Silk.NET.BuildTools.Common.Enums.Enum
Silk.NET.BuildTools.Common.Enums.Enum.Enum() -> void
Silk.NET.BuildTools.Common.Enums.Token
Silk.NET.BuildTools.Common.Enums.Token.Token() -> void
Silk.NET.BuildTools.Common.Functions.Accessibility
Silk.NET.BuildTools.Common.Functions.Accessibility.Internal = 2 -> Silk.NET.BuildTools.Common.Functions.Accessibility
Silk.NET.BuildTools.Common.Functions.Accessibility.Private = 3 -> Silk.NET.BuildTools.Common.Functions.Accessibility
Silk.NET.BuildTools.Common.Functions.Accessibility.Protected = 1 -> Silk.NET.BuildTools.Common.Functions.Accessibility
Silk.NET.BuildTools.Common.Functions.Accessibility.Public = 0 -> Silk.NET.BuildTools.Common.Functions.Accessibility
Silk.NET.BuildTools.Common.Functions.Count
Silk.NET.BuildTools.Common.Functions.Count.Count() -> void
Silk.NET.BuildTools.Common.Functions.Count.Count(int count) -> void
Silk.NET.BuildTools.Common.Functions.Count.Count(string? value, bool isValueReference = true) -> void
Silk.NET.BuildTools.Common.Functions.Count.IsComputed.get -> bool
Silk.NET.BuildTools.Common.Functions.Count.IsConstant.get -> bool
Silk.NET.BuildTools.Common.Functions.Count.IsMultiple.get -> bool
Silk.NET.BuildTools.Common.Functions.Count.IsReference.get -> bool
Silk.NET.BuildTools.Common.Functions.Count.IsStatic.get -> bool
Silk.NET.BuildTools.Common.Functions.Count.StaticCount.get -> int
Silk.NET.BuildTools.Common.Functions.Count.ValueReference.get -> string?
Silk.NET.BuildTools.Common.Functions.Count.ValueReference.set -> void
Silk.NET.BuildTools.Common.Functions.FlowDirection
Silk.NET.BuildTools.Common.Functions.FlowDirection.In = 1 -> Silk.NET.BuildTools.Common.Functions.FlowDirection
Silk.NET.BuildTools.Common.Functions.FlowDirection.Out = 2 -> Silk.NET.BuildTools.Common.Functions.FlowDirection
Silk.NET.BuildTools.Common.Functions.FlowDirection.Ref = 3 -> Silk.NET.BuildTools.Common.Functions.FlowDirection
Silk.NET.BuildTools.Common.Functions.FlowDirection.Undefined = 0 -> Silk.NET.BuildTools.Common.Functions.FlowDirection
Silk.NET.BuildTools.Common.Functions.Function
Silk.NET.BuildTools.Common.Functions.Function.Accessibility.get -> Silk.NET.BuildTools.Common.Functions.Accessibility
Silk.NET.BuildTools.Common.Functions.Function.Accessibility.set -> void
Silk.NET.BuildTools.Common.Functions.Function.Convention.get -> System.Runtime.InteropServices.CallingConvention
Silk.NET.BuildTools.Common.Functions.Function.Convention.set -> void
Silk.NET.BuildTools.Common.Functions.Function.Function() -> void
Silk.NET.BuildTools.Common.Functions.Function.IsReadOnly.get -> bool
Silk.NET.BuildTools.Common.Functions.Function.IsReadOnly.set -> void
Silk.NET.BuildTools.Common.Functions.Function.Kind.get -> Silk.NET.BuildTools.Common.Functions.SignatureKind
Silk.NET.BuildTools.Common.Functions.Function.Kind.set -> void
Silk.NET.BuildTools.Common.Functions.Function.VtblIndex.get -> int
Silk.NET.BuildTools.Common.Functions.Function.VtblIndex.set -> void
Silk.NET.BuildTools.Common.Functions.GenericTypeParameter
Silk.NET.BuildTools.Common.Functions.GenericTypeParameter.GenericTypeParameter() -> void
Silk.NET.BuildTools.Common.Functions.Parameter
Silk.NET.BuildTools.Common.Functions.Parameter.Count.get -> Silk.NET.BuildTools.Common.Functions.Count?
Silk.NET.BuildTools.Common.Functions.Parameter.Count.set -> void
Silk.NET.BuildTools.Common.Functions.Parameter.Flow.get -> Silk.NET.BuildTools.Common.Functions.FlowDirection
Silk.NET.BuildTools.Common.Functions.Parameter.Flow.set -> void
Silk.NET.BuildTools.Common.Functions.Parameter.Parameter() -> void
Silk.NET.BuildTools.Common.Functions.SignatureKind
Silk.NET.BuildTools.Common.Functions.SignatureKind.Normal = 0 -> Silk.NET.BuildTools.Common.Functions.SignatureKind
Silk.NET.BuildTools.Common.Functions.SignatureKind.PotentiallyConflictingOverload = 3 -> Silk.NET.BuildTools.Common.Functions.SignatureKind
Silk.NET.BuildTools.Common.Functions.SignatureKind.ReturnOverload = 2 -> Silk.NET.BuildTools.Common.Functions.SignatureKind
Silk.NET.BuildTools.Common.Functions.SignatureKind.SimpleOverload = 1 -> Silk.NET.BuildTools.Common.Functions.SignatureKind
Silk.NET.BuildTools.Common.Functions.Type
Silk.NET.BuildTools.Common.Functions.Type.ArrayDimensions.get -> int
Silk.NET.BuildTools.Common.Functions.Type.ArrayDimensions.set -> void
Silk.NET.BuildTools.Common.Functions.Type.IndirectionLevels.get -> int
Silk.NET.BuildTools.Common.Functions.Type.IndirectionLevels.set -> void
Silk.NET.BuildTools.Common.Functions.Type.IsArray.get -> bool
Silk.NET.BuildTools.Common.Functions.Type.IsByRef.get -> bool
Silk.NET.BuildTools.Common.Functions.Type.IsByRef.set -> void
Silk.NET.BuildTools.Common.Functions.Type.IsFunctionPointer.get -> bool
Silk.NET.BuildTools.Common.Functions.Type.IsGenericTypeParameterReference.get -> bool
Silk.NET.BuildTools.Common.Functions.Type.IsGenericTypeParameterReference.set -> void
Silk.NET.BuildTools.Common.Functions.Type.IsIn.get -> bool
Silk.NET.BuildTools.Common.Functions.Type.IsIn.set -> void
Silk.NET.BuildTools.Common.Functions.Type.IsIntPtr() -> bool
Silk.NET.BuildTools.Common.Functions.Type.IsOut.get -> bool
Silk.NET.BuildTools.Common.Functions.Type.IsOut.set -> void
Silk.NET.BuildTools.Common.Functions.Type.IsPointer.get -> bool
Silk.NET.BuildTools.Common.Functions.Type.IsSingleVoidPointer() -> bool
Silk.NET.BuildTools.Common.Functions.Type.IsThis.get -> bool
Silk.NET.BuildTools.Common.Functions.Type.IsThis.set -> void
Silk.NET.BuildTools.Common.Functions.Type.IsUIntPtr() -> bool
Silk.NET.BuildTools.Common.Functions.Type.IsVoidPointer() -> bool
Silk.NET.BuildTools.Common.Functions.Type.Type() -> void
Silk.NET.BuildTools.Common.ImplementedFunction
Silk.NET.BuildTools.Common.ImplementedFunction.IsUnsafe.get -> bool
Silk.NET.BuildTools.Common.ImplementedFunction.IsUnsafe.set -> void
Silk.NET.BuildTools.Common.IProfileConstituent
Silk.NET.BuildTools.Common.NameContainer
Silk.NET.BuildTools.Common.NameContainer.NameContainer() -> void
Silk.NET.BuildTools.Common.NameTrimmer
Silk.NET.BuildTools.Common.Naming
Silk.NET.BuildTools.Common.NativeApiSet
Silk.NET.BuildTools.Common.NativeApiSet.NativeApiSet() -> void
Silk.NET.BuildTools.Common.Profile
Silk.NET.BuildTools.Common.Profile.Profile() -> void
Silk.NET.BuildTools.Common.Project
Silk.NET.BuildTools.Common.Project.IsRoot.get -> bool
Silk.NET.BuildTools.Common.Project.IsRoot.set -> void
Silk.NET.BuildTools.Common.Project.Project() -> void
Silk.NET.BuildTools.Common.Struct
Silk.NET.BuildTools.Common.Struct.Struct() -> void
Silk.NET.BuildTools.Common.Struct.Uuid.get -> System.Guid?
Silk.NET.BuildTools.Common.Struct.Uuid.set -> void
Silk.NET.BuildTools.Common.Structs.Field
Silk.NET.BuildTools.Common.Structs.Field.Accessibility.get -> Silk.NET.BuildTools.Common.Functions.Accessibility
Silk.NET.BuildTools.Common.Structs.Field.Accessibility.set -> void
Silk.NET.BuildTools.Common.Structs.Field.Field() -> void
Silk.NET.BuildTools.Common.Structs.Field.NumBits.get -> int?
Silk.NET.BuildTools.Common.Structs.Field.NumBits.set -> void
Silk.NET.BuildTools.Common.Trimmers.DataTypeNameTrimmer
Silk.NET.BuildTools.Common.Trimmers.DataTypeNameTrimmer.DataTypeNameTrimmer() -> void
Silk.NET.BuildTools.Common.Trimmers.ExtensionNameTrimmer
Silk.NET.BuildTools.Common.Trimmers.ExtensionNameTrimmer.ExtensionNameTrimmer() -> void
Silk.NET.BuildTools.Common.Trimmers.ITrimmer<TTrimmable>
Silk.NET.BuildTools.Common.Trimmers.ITrimmer<TTrimmable>.IsRelevant(TTrimmable trimmable) -> bool
Silk.NET.BuildTools.Common.TypeMapper
Silk.NET.BuildTools.Common.Utilities
Silk.NET.BuildTools.Config
Silk.NET.BuildTools.Config.Config() -> void
Silk.NET.BuildTools.ConverterMode
Silk.NET.BuildTools.ConverterMode.Clang = 1 -> Silk.NET.BuildTools.ConverterMode
Silk.NET.BuildTools.ConverterMode.ConvertConstruct = 0 -> Silk.NET.BuildTools.ConverterMode
Silk.NET.BuildTools.ConverterOptions
Silk.NET.BuildTools.ConverterOptions.ConverterOptions() -> void
Silk.NET.BuildTools.Converters.Constructors.OpenCLConstructor
Silk.NET.BuildTools.Converters.Constructors.OpenCLConstructor.OpenCLConstructor() -> void
Silk.NET.BuildTools.Converters.Constructors.OpenGLConstructor
Silk.NET.BuildTools.Converters.Constructors.OpenGLConstructor.OpenGLConstructor() -> void
Silk.NET.BuildTools.Converters.Constructors.VulkanConstructor
Silk.NET.BuildTools.Converters.Constructors.VulkanConstructor.VulkanConstructor() -> void
Silk.NET.BuildTools.Converters.IConstructor
Silk.NET.BuildTools.Converters.IReader
Silk.NET.BuildTools.Converters.Khronos.CommandDefinition
Silk.NET.BuildTools.Converters.Khronos.ConstantDefinition
Silk.NET.BuildTools.Converters.Khronos.ConstantDefinition.Type.get -> Silk.NET.BuildTools.Converters.Khronos.ConstantType
Silk.NET.BuildTools.Converters.Khronos.ConstantType
Silk.NET.BuildTools.Converters.Khronos.ConstantType.Float32 = 2 -> Silk.NET.BuildTools.Converters.Khronos.ConstantType
Silk.NET.BuildTools.Converters.Khronos.ConstantType.UInt32 = 0 -> Silk.NET.BuildTools.Converters.Khronos.ConstantType
Silk.NET.BuildTools.Converters.Khronos.ConstantType.UInt64 = 1 -> Silk.NET.BuildTools.Converters.Khronos.ConstantType
Silk.NET.BuildTools.Converters.Khronos.EnumDefinition
Silk.NET.BuildTools.Converters.Khronos.EnumDefinition.BitWidth.get -> int
Silk.NET.BuildTools.Converters.Khronos.EnumDefinition.BitWidth.set -> void
Silk.NET.BuildTools.Converters.Khronos.EnumDefinition.Type.get -> Silk.NET.BuildTools.Converters.Khronos.EnumType
Silk.NET.BuildTools.Converters.Khronos.EnumExtensionValue
Silk.NET.BuildTools.Converters.Khronos.EnumType
Silk.NET.BuildTools.Converters.Khronos.EnumType.Bitmask = 0 -> Silk.NET.BuildTools.Converters.Khronos.EnumType
Silk.NET.BuildTools.Converters.Khronos.EnumType.Constants = 2 -> Silk.NET.BuildTools.Converters.Khronos.EnumType
Silk.NET.BuildTools.Converters.Khronos.EnumType.Enum = 1 -> Silk.NET.BuildTools.Converters.Khronos.EnumType
Silk.NET.BuildTools.Converters.Khronos.EnumValue
Silk.NET.BuildTools.Converters.Khronos.EnumValue.Value.get -> long
Silk.NET.BuildTools.Converters.Khronos.ExtensionConstant
Silk.NET.BuildTools.Converters.Khronos.ExtensionDefinition
Silk.NET.BuildTools.Converters.Khronos.ExtensionDefinition.Number.get -> int
Silk.NET.BuildTools.Converters.Khronos.FeatureDefinition
Silk.NET.BuildTools.Converters.Khronos.HandleDefinition
Silk.NET.BuildTools.Converters.Khronos.HandleDefinition.CanBeDispatched.get -> bool
Silk.NET.BuildTools.Converters.Khronos.MemberSpec
Silk.NET.BuildTools.Converters.Khronos.MemberSpec.ElementCount.get -> int
Silk.NET.BuildTools.Converters.Khronos.MemberSpec.IsOptional.get -> bool
Silk.NET.BuildTools.Converters.Khronos.MemberSpec.NumBits.get -> int?
Silk.NET.BuildTools.Converters.Khronos.ParameterDefinition
Silk.NET.BuildTools.Converters.Khronos.ParameterDefinition.ElementCount.get -> int
Silk.NET.BuildTools.Converters.Khronos.ParameterDefinition.IsConst.get -> bool
Silk.NET.BuildTools.Converters.Khronos.ParameterDefinition.IsNullTerminated.get -> bool
Silk.NET.BuildTools.Converters.Khronos.ParameterDefinition.IsOptional.get -> bool
Silk.NET.BuildTools.Converters.Khronos.ParameterDefinition.Modifier.get -> Silk.NET.BuildTools.Converters.Khronos.ParameterModifier
Silk.NET.BuildTools.Converters.Khronos.ParameterModifier
Silk.NET.BuildTools.Converters.Khronos.ParameterModifier.In = 3 -> Silk.NET.BuildTools.Converters.Khronos.ParameterModifier
Silk.NET.BuildTools.Converters.Khronos.ParameterModifier.None = 0 -> Silk.NET.BuildTools.Converters.Khronos.ParameterModifier
Silk.NET.BuildTools.Converters.Khronos.ParameterModifier.Out = 2 -> Silk.NET.BuildTools.Converters.Khronos.ParameterModifier
Silk.NET.BuildTools.Converters.Khronos.ParameterModifier.Ref = 1 -> Silk.NET.BuildTools.Converters.Khronos.ParameterModifier
Silk.NET.BuildTools.Converters.Khronos.Require
Silk.NET.BuildTools.Converters.Khronos.StructureDefinition
Silk.NET.BuildTools.Converters.Khronos.TypedefDefinition
Silk.NET.BuildTools.Converters.Khronos.TypeSpec
Silk.NET.BuildTools.Converters.Khronos.TypeSpec.ArrayDimensions.get -> int
Silk.NET.BuildTools.Converters.Khronos.TypeSpec.PointerIndirection.get -> int
Silk.NET.BuildTools.Converters.Khronos.VulkanSpecification
Silk.NET.BuildTools.Converters.Khronos.XElementExtensions
Silk.NET.BuildTools.Converters.ProfileConverter
Silk.NET.BuildTools.Converters.Readers.OpenCLReader
Silk.NET.BuildTools.Converters.Readers.OpenCLReader.OpenCLReader() -> void
Silk.NET.BuildTools.Converters.Readers.OpenGLReader
Silk.NET.BuildTools.Converters.Readers.OpenGLReader.OpenGLReader() -> void
Silk.NET.BuildTools.Converters.Readers.VulkanReader
Silk.NET.BuildTools.Converters.Readers.VulkanReader.VulkanReader() -> void
Silk.NET.BuildTools.Cpp.Clang
Silk.NET.BuildTools.Cpp.ClangConfig
Silk.NET.BuildTools.Cpp.ClangPreprocessor
Silk.NET.BuildTools.Cpp.ClangPreprocessor.ClangPreprocessor() -> void
Silk.NET.BuildTools.Cpp.ComVtblProcessor
Silk.NET.BuildTools.Cpp.FusionReactor
Silk.NET.BuildTools.Cpp.VisualStudioInfo
Silk.NET.BuildTools.Cpp.VisualStudioResolver
Silk.NET.BuildTools.Generator
Silk.NET.BuildTools.Injection
Silk.NET.BuildTools.Injection.Injection() -> void
Silk.NET.BuildTools.Injection.Stage.get -> Silk.NET.Core.Attributes.SilkTouchStage
Silk.NET.BuildTools.Injection.Stage.set -> void
Silk.NET.BuildTools.OutputOptions
Silk.NET.BuildTools.OutputOptions.Injections.get -> Silk.NET.BuildTools.Injection[]?
Silk.NET.BuildTools.OutputOptions.Injections.set -> void
Silk.NET.BuildTools.OutputOptions.OutputOptions() -> void
Silk.NET.BuildTools.Overloading.ArrayParameterOverloader
Silk.NET.BuildTools.Overloading.ArrayParameterOverloader.ArrayParameterOverloader() -> void
Silk.NET.BuildTools.Overloading.ClassOverloader
Silk.NET.BuildTools.Overloading.ClassOverloader.ClassOverloader() -> void
Silk.NET.BuildTools.Overloading.ComplexFunctionOverloader
Silk.NET.BuildTools.Overloading.GroupOverloader
Silk.NET.BuildTools.Overloading.GroupOverloader.GroupOverloader() -> void
Silk.NET.BuildTools.Overloading.IComplexFunctionOverloader
Silk.NET.BuildTools.Overloading.ImplicitCountSpanOverloader
Silk.NET.BuildTools.Overloading.ImplicitCountSpanOverloader.ImplicitCountSpanOverloader() -> void
Silk.NET.BuildTools.Overloading.ISimpleParameterOverloader
Silk.NET.BuildTools.Overloading.ISimpleReturnOverloader
Silk.NET.BuildTools.Overloading.Overloader
Silk.NET.BuildTools.Overloading.RefOverloader
Silk.NET.BuildTools.Overloading.RefOverloader.RefOverloader() -> void
Silk.NET.BuildTools.Overloading.ReturnTypeOverloader
Silk.NET.BuildTools.Overloading.ReturnTypeOverloader.ReturnTypeOverloader() -> void
Silk.NET.BuildTools.Overloading.SimpleParameterOverloader
Silk.NET.BuildTools.Overloading.SimpleReturnOverloader
Silk.NET.BuildTools.Overloading.SpanOverloader
Silk.NET.BuildTools.Overloading.SpanOverloader.SpanOverloader() -> void
Silk.NET.BuildTools.Overloading.StringArrayOverloader
Silk.NET.BuildTools.Overloading.StringArrayOverloader.StringArrayOverloader() -> void
Silk.NET.BuildTools.Overloading.StringOverloader
Silk.NET.BuildTools.Overloading.StringOverloader.StringOverloader() -> void
Silk.NET.Core.Attributes.InjectAttribute
Silk.NET.Core.Attributes.SilkTouchStage
Silk.NET.Core.Attributes.SilkTouchStage.Begin = 1 -> Silk.NET.Core.Attributes.SilkTouchStage
Silk.NET.Core.Attributes.SilkTouchStage.End = 6 -> Silk.NET.Core.Attributes.SilkTouchStage
Silk.NET.Core.Attributes.SilkTouchStage.None = 0 -> Silk.NET.Core.Attributes.SilkTouchStage
Silk.NET.Core.Attributes.SilkTouchStage.PostInit = 2 -> Silk.NET.Core.Attributes.SilkTouchStage
Silk.NET.Core.Attributes.SilkTouchStage.PostLoad = 5 -> Silk.NET.Core.Attributes.SilkTouchStage
Silk.NET.Core.Attributes.SilkTouchStage.PostPin = 3 -> Silk.NET.Core.Attributes.SilkTouchStage
Silk.NET.Core.Attributes.SilkTouchStage.PreLoad = 4 -> Silk.NET.Core.Attributes.SilkTouchStage
static Silk.NET.BuildTools.Common.Utilities.MapAccessibility(this ClangSharp.Interop.CX_CXXAccessSpecifier access) -> Silk.NET.BuildTools.Common.Functions.Accessibility
static Silk.NET.BuildTools.Common.Utilities.ParseByte(System.ReadOnlySpan<char> chars) -> byte?
static Silk.NET.BuildTools.Common.Utilities.ParseInt(System.ReadOnlySpan<char> chars) -> int?
static Silk.NET.BuildTools.Common.Utilities.ParseLong(System.ReadOnlySpan<char> chars) -> long?
static Silk.NET.BuildTools.Common.Utilities.ParseSbyte(System.ReadOnlySpan<char> chars) -> sbyte?
static Silk.NET.BuildTools.Common.Utilities.ParseShort(System.ReadOnlySpan<char> chars) -> short?
static Silk.NET.BuildTools.Common.Utilities.ParseUint(System.ReadOnlySpan<char> chars) -> uint?
static Silk.NET.BuildTools.Common.Utilities.ParseUlong(System.ReadOnlySpan<char> chars) -> ulong?
static Silk.NET.BuildTools.Common.Utilities.ParseUshort(System.ReadOnlySpan<char> chars) -> ushort?
static Silk.NET.BuildTools.Cpp.Clang.GetCallingConvention(ClangSharp.Interop.CXCallingConv conv) -> System.Runtime.InteropServices.CallingConvention
static Silk.NET.BuildTools.Cpp.ClangConfig.SubstituteWindowsSdkPath(ref Silk.NET.BuildTools.BindTask task) -> void
static Silk.NET.BuildTools.Cpp.VisualStudioResolver.TryGetVisualStudioInfo(out Silk.NET.BuildTools.Cpp.VisualStudioInfo? info) -> bool
static Silk.NET.BuildTools.Generator.Run(Silk.NET.BuildTools.Config config) -> void
static Silk.NET.BuildTools.Generator.RunTask(Silk.NET.BuildTools.BindTask task) -> void
static Silk.NET.BuildTools.Generator.RunTaskGuarded(Silk.NET.BuildTools.BindTask task) -> void
static Silk.NET.BuildTools.Generator.RunTaskUnguarded(Silk.NET.BuildTools.BindTask task) -> void
~const Silk.NET.BuildTools.Bind.ProfileWriter.EnumsSubfolder = "Enums" -> string
~const Silk.NET.BuildTools.Bind.ProfileWriter.StructsSubfolder = "Structs" -> string
~const Silk.NET.BuildTools.Cpp.ClangPreprocessor.MacroPrefix = "SILKDOTNETMACROS__" -> string
~const Silk.NET.BuildTools.Overloading.SimpleReturnOverloader.ReturnOverloadSuffix = "S" -> string
~override Silk.NET.BuildTools.Common.Attribute.ToString() -> string
~override Silk.NET.BuildTools.Common.Functions.Count.ToString() -> string
~override Silk.NET.BuildTools.Common.Functions.Function.Equals(object obj) -> bool
~override Silk.NET.BuildTools.Common.Functions.Function.ToString() -> string
~override Silk.NET.BuildTools.Common.Functions.GenericTypeParameter.Equals(object obj) -> bool
~override Silk.NET.BuildTools.Common.Functions.Type.ToString() -> string
~override Silk.NET.BuildTools.Converters.Khronos.CommandDefinition.ToString() -> string
~override Silk.NET.BuildTools.Converters.Khronos.EnumDefinition.ToString() -> string
~override Silk.NET.BuildTools.Converters.Khronos.MemberSpec.ToString() -> string
~override Silk.NET.BuildTools.Converters.Khronos.StructureDefinition.ToString() -> string
~override Silk.NET.BuildTools.Converters.Khronos.TypedefDefinition.ToString() -> string
~override Silk.NET.BuildTools.Converters.Khronos.TypeSpec.ToString() -> string
~Silk.NET.BuildTools.BakeryOptions.Include.get -> string[]
~Silk.NET.BuildTools.BakeryOptions.Include.set -> void
~Silk.NET.BuildTools.Bind.BindState.WrappedFunctionPointers -> System.Collections.Concurrent.ConcurrentDictionary<string, Silk.NET.BuildTools.Common.Functions.Type>
~Silk.NET.BuildTools.BindTask.CacheFolder.get -> string
~Silk.NET.BuildTools.BindTask.CacheFolder.set -> void
~Silk.NET.BuildTools.BindTask.CacheKey.get -> string
~Silk.NET.BuildTools.BindTask.CacheKey.set -> void
~Silk.NET.BuildTools.BindTask.Controls.get -> string[]
~Silk.NET.BuildTools.BindTask.Controls.set -> void
~Silk.NET.BuildTools.BindTask.ExcludedNativeNames.get -> System.Collections.Generic.List<string>
~Silk.NET.BuildTools.BindTask.ExcludedNativeNames.set -> void
~Silk.NET.BuildTools.BindTask.ExtensionsNamespace.get -> string
~Silk.NET.BuildTools.BindTask.ExtensionsNamespace.set -> void
~Silk.NET.BuildTools.BindTask.FunctionPrefix.get -> string
~Silk.NET.BuildTools.BindTask.FunctionPrefix.set -> void
~Silk.NET.BuildTools.BindTask.InjectTypeMap(System.Collections.Generic.Dictionary<string, string> map) -> void
~Silk.NET.BuildTools.BindTask.Name.get -> string
~Silk.NET.BuildTools.BindTask.Name.set -> void
~Silk.NET.BuildTools.BindTask.NameContainer.get -> Silk.NET.BuildTools.Common.NameContainer
~Silk.NET.BuildTools.BindTask.NameContainer.set -> void
~Silk.NET.BuildTools.BindTask.Namespace.get -> string
~Silk.NET.BuildTools.BindTask.Namespace.set -> void
~Silk.NET.BuildTools.BindTask.OverloaderExclusions.get -> System.Collections.Generic.Dictionary<string, string[]>?
~Silk.NET.BuildTools.BindTask.OverloaderExclusions.set -> void
~Silk.NET.BuildTools.BindTask.RenamedNativeNames.get -> System.Collections.Generic.Dictionary<string, string>
~Silk.NET.BuildTools.BindTask.RenamedNativeNames.set -> void
~Silk.NET.BuildTools.BindTask.Sources.get -> string[]
~Silk.NET.BuildTools.BindTask.Sources.set -> void
~Silk.NET.BuildTools.BindTask.TypeMaps.get -> System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>>
~Silk.NET.BuildTools.BindTask.TypeMaps.set -> void
~Silk.NET.BuildTools.ClangTaskOptions.ClangArgs.get -> string[]
~Silk.NET.BuildTools.ClangTaskOptions.ClangArgs.set -> void
~Silk.NET.BuildTools.ClangTaskOptions.ClassMappings.get -> System.Collections.Generic.Dictionary<string, string>
~Silk.NET.BuildTools.ClangTaskOptions.ClassMappings.set -> void
~Silk.NET.BuildTools.ClangTaskOptions.Traverse.get -> string[]
~Silk.NET.BuildTools.ClangTaskOptions.Traverse.set -> void
~Silk.NET.BuildTools.Common.Attribute.Arguments.get -> System.Collections.Generic.List<string>
~Silk.NET.BuildTools.Common.Attribute.Arguments.set -> void
~Silk.NET.BuildTools.Common.Attribute.Clone() -> Silk.NET.BuildTools.Common.Attribute
~Silk.NET.BuildTools.Common.Attribute.Name.get -> string
~Silk.NET.BuildTools.Common.Attribute.Name.set -> void
~Silk.NET.BuildTools.Common.Builders.FunctionSignatureBuilder.Build() -> Silk.NET.BuildTools.Common.Functions.Function
~Silk.NET.BuildTools.Common.Builders.FunctionSignatureBuilder.FunctionSignatureBuilder(Silk.NET.BuildTools.Common.Functions.Function functionSignature) -> void
~Silk.NET.BuildTools.Common.Builders.FunctionSignatureBuilder.WithAttributes(System.Collections.Generic.IReadOnlyList<Silk.NET.BuildTools.Common.Attribute> newAttributes) -> Silk.NET.BuildTools.Common.Builders.FunctionSignatureBuilder
~Silk.NET.BuildTools.Common.Builders.FunctionSignatureBuilder.WithCategories(System.Collections.Generic.IReadOnlyList<string> newCategories) -> Silk.NET.BuildTools.Common.Builders.FunctionSignatureBuilder
~Silk.NET.BuildTools.Common.Builders.FunctionSignatureBuilder.WithExtension(string newExtension) -> Silk.NET.BuildTools.Common.Builders.FunctionSignatureBuilder
~Silk.NET.BuildTools.Common.Builders.FunctionSignatureBuilder.WithGenericTypeParameters(System.Collections.Generic.IReadOnlyList<Silk.NET.BuildTools.Common.Functions.GenericTypeParameter> newGenericTypeParameters) -> Silk.NET.BuildTools.Common.Builders.FunctionSignatureBuilder
~Silk.NET.BuildTools.Common.Builders.FunctionSignatureBuilder.WithKind(Silk.NET.BuildTools.Common.Functions.SignatureKind kind) -> Silk.NET.BuildTools.Common.Builders.FunctionSignatureBuilder
~Silk.NET.BuildTools.Common.Builders.FunctionSignatureBuilder.WithName(string newName) -> Silk.NET.BuildTools.Common.Builders.FunctionSignatureBuilder
~Silk.NET.BuildTools.Common.Builders.FunctionSignatureBuilder.WithNativeEntrypoint(string newNativeEntrypoint) -> Silk.NET.BuildTools.Common.Builders.FunctionSignatureBuilder
~Silk.NET.BuildTools.Common.Builders.FunctionSignatureBuilder.WithParameters(System.Collections.Generic.IReadOnlyList<Silk.NET.BuildTools.Common.Functions.Parameter> newParameters) -> Silk.NET.BuildTools.Common.Builders.FunctionSignatureBuilder
~Silk.NET.BuildTools.Common.Builders.FunctionSignatureBuilder.WithReturnType(Silk.NET.BuildTools.Common.Functions.Accessibility newAccessibility) -> Silk.NET.BuildTools.Common.Builders.FunctionSignatureBuilder
~Silk.NET.BuildTools.Common.Builders.FunctionSignatureBuilder.WithReturnType(Silk.NET.BuildTools.Common.Functions.Type newReturnType) -> Silk.NET.BuildTools.Common.Builders.FunctionSignatureBuilder
~Silk.NET.BuildTools.Common.Builders.ParameterSignatureBuilder.Build() -> Silk.NET.BuildTools.Common.Functions.Parameter
~Silk.NET.BuildTools.Common.Builders.ParameterSignatureBuilder.ParameterSignatureBuilder(Silk.NET.BuildTools.Common.Functions.Parameter parameterSignature) -> void
~Silk.NET.BuildTools.Common.Builders.ParameterSignatureBuilder.WithCount(Silk.NET.BuildTools.Common.Functions.Count? newCount) -> Silk.NET.BuildTools.Common.Builders.ParameterSignatureBuilder
~Silk.NET.BuildTools.Common.Builders.ParameterSignatureBuilder.WithFlow(Silk.NET.BuildTools.Common.Functions.FlowDirection newFlow) -> Silk.NET.BuildTools.Common.Builders.ParameterSignatureBuilder
~Silk.NET.BuildTools.Common.Builders.ParameterSignatureBuilder.WithName(string newName) -> Silk.NET.BuildTools.Common.Builders.ParameterSignatureBuilder
~Silk.NET.BuildTools.Common.Builders.ParameterSignatureBuilder.WithType(Silk.NET.BuildTools.Common.Functions.Type newType) -> Silk.NET.BuildTools.Common.Builders.ParameterSignatureBuilder
~Silk.NET.BuildTools.Common.Builders.TypeSignatureBuilder.Build() -> Silk.NET.BuildTools.Common.Functions.Type
~Silk.NET.BuildTools.Common.Builders.TypeSignatureBuilder.TypeSignatureBuilder(Silk.NET.BuildTools.Common.Functions.Type typeSignature) -> void
~Silk.NET.BuildTools.Common.Builders.TypeSignatureBuilder.WithArrayDimensions(int newArrayDimensions) -> Silk.NET.BuildTools.Common.Builders.TypeSignatureBuilder
~Silk.NET.BuildTools.Common.Builders.TypeSignatureBuilder.WithByRef(bool isByRef) -> Silk.NET.BuildTools.Common.Builders.TypeSignatureBuilder
~Silk.NET.BuildTools.Common.Builders.TypeSignatureBuilder.WithFunctionPointerSignature(Silk.NET.BuildTools.Common.Functions.Function function) -> Silk.NET.BuildTools.Common.Builders.TypeSignatureBuilder
~Silk.NET.BuildTools.Common.Builders.TypeSignatureBuilder.WithGenericTypes(params Silk.NET.BuildTools.Common.Functions.Type[] parameters) -> Silk.NET.BuildTools.Common.Builders.TypeSignatureBuilder
~Silk.NET.BuildTools.Common.Builders.TypeSignatureBuilder.WithGenericTypes(System.Collections.Generic.List<Silk.NET.BuildTools.Common.Functions.Type> parameters) -> Silk.NET.BuildTools.Common.Builders.TypeSignatureBuilder
~Silk.NET.BuildTools.Common.Builders.TypeSignatureBuilder.WithIndirectionLevel(int newIndirectionLevel) -> Silk.NET.BuildTools.Common.Builders.TypeSignatureBuilder
~Silk.NET.BuildTools.Common.Builders.TypeSignatureBuilder.WithIsGenericType(bool isGenericType) -> Silk.NET.BuildTools.Common.Builders.TypeSignatureBuilder
~Silk.NET.BuildTools.Common.Builders.TypeSignatureBuilder.WithIsIn(bool isIn) -> Silk.NET.BuildTools.Common.Builders.TypeSignatureBuilder
~Silk.NET.BuildTools.Common.Builders.TypeSignatureBuilder.WithIsOut(bool isOut) -> Silk.NET.BuildTools.Common.Builders.TypeSignatureBuilder
~Silk.NET.BuildTools.Common.Builders.TypeSignatureBuilder.WithName(string newName) -> Silk.NET.BuildTools.Common.Builders.TypeSignatureBuilder
~Silk.NET.BuildTools.Common.Class.ClassName.get -> string
~Silk.NET.BuildTools.Common.Class.ClassName.set -> void
~Silk.NET.BuildTools.Common.Class.Constants.get -> System.Collections.Generic.List<Silk.NET.BuildTools.Common.Constant>
~Silk.NET.BuildTools.Common.Class.Constants.set -> void
~Silk.NET.BuildTools.Common.Class.Functions.get -> System.Collections.Generic.List<Silk.NET.BuildTools.Common.ImplementedFunction>
~Silk.NET.BuildTools.Common.Class.Functions.set -> void
~Silk.NET.BuildTools.Common.Class.NativeApis.get -> System.Collections.Generic.Dictionary<string, Silk.NET.BuildTools.Common.NativeApiSet>
~Silk.NET.BuildTools.Common.Class.NativeApis.set -> void
~Silk.NET.BuildTools.Common.Constant.ExtensionName.get -> string
~Silk.NET.BuildTools.Common.Constant.ExtensionName.set -> void
~Silk.NET.BuildTools.Common.Constant.Name.get -> string
~Silk.NET.BuildTools.Common.Constant.Name.set -> void
~Silk.NET.BuildTools.Common.Constant.NativeName.get -> string
~Silk.NET.BuildTools.Common.Constant.NativeName.set -> void
~Silk.NET.BuildTools.Common.Constant.Type.get -> Silk.NET.BuildTools.Common.Functions.Type
~Silk.NET.BuildTools.Common.Constant.Type.set -> void
~Silk.NET.BuildTools.Common.Constant.Value.get -> string
~Silk.NET.BuildTools.Common.Constant.Value.set -> void
~Silk.NET.BuildTools.Common.Enums.Enum.Attributes.get -> System.Collections.Generic.List<Silk.NET.BuildTools.Common.Attribute>
~Silk.NET.BuildTools.Common.Enums.Enum.Attributes.set -> void
~Silk.NET.BuildTools.Common.Enums.Enum.ClangMetadata.get -> string[]
~Silk.NET.BuildTools.Common.Enums.Enum.ClangMetadata.set -> void
~Silk.NET.BuildTools.Common.Enums.Enum.EnumBaseType.get -> Silk.NET.BuildTools.Common.Functions.Type
~Silk.NET.BuildTools.Common.Enums.Enum.EnumBaseType.set -> void
~Silk.NET.BuildTools.Common.Enums.Enum.ExtensionName.get -> string
~Silk.NET.BuildTools.Common.Enums.Enum.ExtensionName.set -> void
~Silk.NET.BuildTools.Common.Enums.Enum.Name.get -> string
~Silk.NET.BuildTools.Common.Enums.Enum.Name.set -> void
~Silk.NET.BuildTools.Common.Enums.Enum.NativeName.get -> string
~Silk.NET.BuildTools.Common.Enums.Enum.NativeName.set -> void
~Silk.NET.BuildTools.Common.Enums.Enum.ProfileName.get -> string
~Silk.NET.BuildTools.Common.Enums.Enum.ProfileName.set -> void
~Silk.NET.BuildTools.Common.Enums.Enum.ProfileVersion.get -> System.Version
~Silk.NET.BuildTools.Common.Enums.Enum.ProfileVersion.set -> void
~Silk.NET.BuildTools.Common.Enums.Enum.Tokens.get -> System.Collections.Generic.List<Silk.NET.BuildTools.Common.Enums.Token>
~Silk.NET.BuildTools.Common.Enums.Enum.Tokens.set -> void
~Silk.NET.BuildTools.Common.Enums.Token.Attributes.get -> System.Collections.Generic.List<Silk.NET.BuildTools.Common.Attribute>
~Silk.NET.BuildTools.Common.Enums.Token.Attributes.set -> void
~Silk.NET.BuildTools.Common.Enums.Token.Doc.get -> string
~Silk.NET.BuildTools.Common.Enums.Token.Doc.set -> void
~Silk.NET.BuildTools.Common.Enums.Token.Name.get -> string
~Silk.NET.BuildTools.Common.Enums.Token.Name.set -> void
~Silk.NET.BuildTools.Common.Enums.Token.NativeName.get -> string
~Silk.NET.BuildTools.Common.Enums.Token.NativeName.set -> void
~Silk.NET.BuildTools.Common.Enums.Token.Value.get -> string
~Silk.NET.BuildTools.Common.Enums.Token.Value.set -> void
~Silk.NET.BuildTools.Common.Functions.Count.ComputedFrom.get -> System.Collections.Generic.IReadOnlyList<Silk.NET.BuildTools.Common.Functions.Parameter>
~Silk.NET.BuildTools.Common.Functions.Count.ComputedFromNames.get -> System.Collections.Generic.List<string>
~Silk.NET.BuildTools.Common.Functions.Count.ComputedFromNames.set -> void
~Silk.NET.BuildTools.Common.Functions.Count.ConstantName.get -> string
~Silk.NET.BuildTools.Common.Functions.Count.ConstantName.set -> void
~Silk.NET.BuildTools.Common.Functions.Count.Count(System.Collections.Generic.IReadOnlyList<string> computedFrom) -> void
~Silk.NET.BuildTools.Common.Functions.Count.FunctionReference.get -> Silk.NET.BuildTools.Common.Functions.Function
~Silk.NET.BuildTools.Common.Functions.Count.FunctionReference.set -> void
~Silk.NET.BuildTools.Common.Functions.Function.Attributes.get -> System.Collections.Generic.List<Silk.NET.BuildTools.Common.Attribute>
~Silk.NET.BuildTools.Common.Functions.Function.Attributes.set -> void
~Silk.NET.BuildTools.Common.Functions.Function.Categories.get -> System.Collections.Generic.List<string>
~Silk.NET.BuildTools.Common.Functions.Function.Categories.set -> void
~Silk.NET.BuildTools.Common.Functions.Function.Doc.get -> string
~Silk.NET.BuildTools.Common.Functions.Function.Doc.set -> void
~Silk.NET.BuildTools.Common.Functions.Function.Equals(Silk.NET.BuildTools.Common.Functions.Function other) -> bool
~Silk.NET.BuildTools.Common.Functions.Function.ExtensionName.get -> string
~Silk.NET.BuildTools.Common.Functions.Function.ExtensionName.set -> void
~Silk.NET.BuildTools.Common.Functions.Function.GenericTypeParameters.get -> System.Collections.Generic.List<Silk.NET.BuildTools.Common.Functions.GenericTypeParameter>
~Silk.NET.BuildTools.Common.Functions.Function.GenericTypeParameters.set -> void
~Silk.NET.BuildTools.Common.Functions.Function.GetFunctionPointerSignature() -> string
~Silk.NET.BuildTools.Common.Functions.Function.Name.get -> string
~Silk.NET.BuildTools.Common.Functions.Function.Name.set -> void
~Silk.NET.BuildTools.Common.Functions.Function.NativeName.get -> string
~Silk.NET.BuildTools.Common.Functions.Function.NativeName.set -> void
~Silk.NET.BuildTools.Common.Functions.Function.Parameters.get -> System.Collections.Generic.List<Silk.NET.BuildTools.Common.Functions.Parameter>
~Silk.NET.BuildTools.Common.Functions.Function.Parameters.set -> void
~Silk.NET.BuildTools.Common.Functions.Function.PreprocessorConditions.get -> string
~Silk.NET.BuildTools.Common.Functions.Function.PreprocessorConditions.set -> void
~Silk.NET.BuildTools.Common.Functions.Function.ProfileName.get -> string
~Silk.NET.BuildTools.Common.Functions.Function.ProfileName.set -> void
~Silk.NET.BuildTools.Common.Functions.Function.ProfileVersion.get -> System.Version
~Silk.NET.BuildTools.Common.Functions.Function.ProfileVersion.set -> void
~Silk.NET.BuildTools.Common.Functions.Function.ReturnType.get -> Silk.NET.BuildTools.Common.Functions.Type
~Silk.NET.BuildTools.Common.Functions.Function.ReturnType.set -> void
~Silk.NET.BuildTools.Common.Functions.Function.ToString(bool? unsafe, bool partial = false, bool accessibility = false, bool static = false, bool semicolon = true, bool delegate = false) -> string
~Silk.NET.BuildTools.Common.Functions.GenericTypeParameter.Constraints.get -> System.Collections.Generic.List<string>
~Silk.NET.BuildTools.Common.Functions.GenericTypeParameter.Constraints.set -> void
~Silk.NET.BuildTools.Common.Functions.GenericTypeParameter.Equals(Silk.NET.BuildTools.Common.Functions.GenericTypeParameter other) -> bool
~Silk.NET.BuildTools.Common.Functions.GenericTypeParameter.GenericTypeParameter(string genericTypeParameterName, System.Collections.Generic.IEnumerable<string> constraints) -> void
~Silk.NET.BuildTools.Common.Functions.GenericTypeParameter.Name.get -> string
~Silk.NET.BuildTools.Common.Functions.GenericTypeParameter.Name.set -> void
~Silk.NET.BuildTools.Common.Functions.Parameter.Attributes.get -> System.Collections.Generic.List<Silk.NET.BuildTools.Common.Attribute>
~Silk.NET.BuildTools.Common.Functions.Parameter.Attributes.set -> void
~Silk.NET.BuildTools.Common.Functions.Parameter.Name.get -> string
~Silk.NET.BuildTools.Common.Functions.Parameter.Name.set -> void
~Silk.NET.BuildTools.Common.Functions.Parameter.Type.get -> Silk.NET.BuildTools.Common.Functions.Type
~Silk.NET.BuildTools.Common.Functions.Parameter.Type.set -> void
~Silk.NET.BuildTools.Common.Functions.Type.Eq(Silk.NET.BuildTools.Common.Functions.Type other) -> bool
~Silk.NET.BuildTools.Common.Functions.Type.FunctionPointerSignature.get -> Silk.NET.BuildTools.Common.Functions.Function
~Silk.NET.BuildTools.Common.Functions.Type.FunctionPointerSignature.set -> void
~Silk.NET.BuildTools.Common.Functions.Type.GenericTypes.get -> System.Collections.Generic.List<Silk.NET.BuildTools.Common.Functions.Type>
~Silk.NET.BuildTools.Common.Functions.Type.GenericTypes.set -> void
~Silk.NET.BuildTools.Common.Functions.Type.Name.get -> string
~Silk.NET.BuildTools.Common.Functions.Type.Name.set -> void
~Silk.NET.BuildTools.Common.Functions.Type.OriginalClass.get -> string
~Silk.NET.BuildTools.Common.Functions.Type.OriginalClass.set -> void
~Silk.NET.BuildTools.Common.Functions.Type.OriginalGroup.get -> string
~Silk.NET.BuildTools.Common.Functions.Type.OriginalGroup.set -> void
~Silk.NET.BuildTools.Common.Functions.Type.OriginalName.get -> string
~Silk.NET.BuildTools.Common.Functions.Type.OriginalName.set -> void
~Silk.NET.BuildTools.Common.Functions.Type.ToString(bool allowFunctionPointers) -> string
~Silk.NET.BuildTools.Common.ImplementedFunction.Base.get -> Silk.NET.BuildTools.Common.Functions.Function
~Silk.NET.BuildTools.Common.ImplementedFunction.Base.set -> void
~Silk.NET.BuildTools.Common.ImplementedFunction.Body.get -> string[]
~Silk.NET.BuildTools.Common.ImplementedFunction.Body.set -> void
~Silk.NET.BuildTools.Common.ImplementedFunction.ImplementedFunction(Silk.NET.BuildTools.Common.Functions.Function function, System.Text.StringBuilder sb, Silk.NET.BuildTools.Common.Functions.Function base, bool isUnsafe = true) -> void
~Silk.NET.BuildTools.Common.ImplementedFunction.Signature.get -> Silk.NET.BuildTools.Common.Functions.Function
~Silk.NET.BuildTools.Common.ImplementedFunction.Signature.set -> void
~Silk.NET.BuildTools.Common.IProfileConstituent.Attributes.get -> System.Collections.Generic.List<Silk.NET.BuildTools.Common.Attribute>
~Silk.NET.BuildTools.Common.IProfileConstituent.Name.get -> string
~Silk.NET.BuildTools.Common.IProfileConstituent.Name.set -> void
~Silk.NET.BuildTools.Common.IProfileConstituent.NativeName.get -> string
~Silk.NET.BuildTools.Common.IProfileConstituent.NativeName.set -> void
~Silk.NET.BuildTools.Common.NameContainer.Android.get -> string
~Silk.NET.BuildTools.Common.NameContainer.Android.set -> void
~Silk.NET.BuildTools.Common.NameContainer.ClassName.get -> string
~Silk.NET.BuildTools.Common.NameContainer.ClassName.set -> void
~Silk.NET.BuildTools.Common.NameContainer.IOS.get -> string
~Silk.NET.BuildTools.Common.NameContainer.IOS.set -> void
~Silk.NET.BuildTools.Common.NameContainer.Linux.get -> string
~Silk.NET.BuildTools.Common.NameContainer.Linux.set -> void
~Silk.NET.BuildTools.Common.NameContainer.MacOS.get -> string
~Silk.NET.BuildTools.Common.NameContainer.MacOS.set -> void
~Silk.NET.BuildTools.Common.NameContainer.Windows64.get -> string
~Silk.NET.BuildTools.Common.NameContainer.Windows64.set -> void
~Silk.NET.BuildTools.Common.NameContainer.Windows86.get -> string
~Silk.NET.BuildTools.Common.NameContainer.Windows86.set -> void
~Silk.NET.BuildTools.Common.NativeApiSet.Functions.get -> System.Collections.Generic.List<Silk.NET.BuildTools.Common.Functions.Function>
~Silk.NET.BuildTools.Common.NativeApiSet.Functions.set -> void
~Silk.NET.BuildTools.Common.NativeApiSet.Name.get -> string
~Silk.NET.BuildTools.Common.NativeApiSet.Name.set -> void
~Silk.NET.BuildTools.Common.Profile.Name.get -> string
~Silk.NET.BuildTools.Common.Profile.Name.set -> void
~Silk.NET.BuildTools.Common.Profile.Projects.get -> System.Collections.Generic.Dictionary<string, Silk.NET.BuildTools.Common.Project>
~Silk.NET.BuildTools.Common.Profile.Projects.set -> void
~Silk.NET.BuildTools.Common.Profile.Version.get -> string
~Silk.NET.BuildTools.Common.Profile.Version.set -> void
~Silk.NET.BuildTools.Common.Project.Classes.get -> System.Collections.Generic.List<Silk.NET.BuildTools.Common.Class>
~Silk.NET.BuildTools.Common.Project.Classes.set -> void
~Silk.NET.BuildTools.Common.Project.Enums.get -> System.Collections.Generic.List<Silk.NET.BuildTools.Common.Enums.Enum>
~Silk.NET.BuildTools.Common.Project.Enums.set -> void
~Silk.NET.BuildTools.Common.Project.GetNamespace(Silk.NET.BuildTools.BindTask taskConfig) -> string
~Silk.NET.BuildTools.Common.Project.GetProjectName(Silk.NET.BuildTools.BindTask task) -> string
~Silk.NET.BuildTools.Common.Project.Namespace.get -> string
~Silk.NET.BuildTools.Common.Project.Namespace.set -> void
~Silk.NET.BuildTools.Common.Project.Structs.get -> System.Collections.Generic.List<Silk.NET.BuildTools.Common.Struct>
~Silk.NET.BuildTools.Common.Project.Structs.set -> void
~Silk.NET.BuildTools.Common.Struct.Attributes.get -> System.Collections.Generic.List<Silk.NET.BuildTools.Common.Attribute>
~Silk.NET.BuildTools.Common.Struct.Attributes.set -> void
~Silk.NET.BuildTools.Common.Struct.ClangMetadata.get -> string[]
~Silk.NET.BuildTools.Common.Struct.ClangMetadata.set -> void
~Silk.NET.BuildTools.Common.Struct.Clone(string alias = null, string nativeAlias = null) -> Silk.NET.BuildTools.Common.Struct
~Silk.NET.BuildTools.Common.Struct.ComBases.get -> System.Collections.Generic.List<string>
~Silk.NET.BuildTools.Common.Struct.ComBases.set -> void
~Silk.NET.BuildTools.Common.Struct.ExtensionName.get -> string
~Silk.NET.BuildTools.Common.Struct.ExtensionName.set -> void
~Silk.NET.BuildTools.Common.Struct.Fields.get -> System.Collections.Generic.List<Silk.NET.BuildTools.Common.Structs.Field>
~Silk.NET.BuildTools.Common.Struct.Fields.set -> void
~Silk.NET.BuildTools.Common.Struct.Functions.get -> System.Collections.Generic.List<Silk.NET.BuildTools.Common.ImplementedFunction>
~Silk.NET.BuildTools.Common.Struct.Functions.set -> void
~Silk.NET.BuildTools.Common.Struct.Name.get -> string
~Silk.NET.BuildTools.Common.Struct.Name.set -> void
~Silk.NET.BuildTools.Common.Struct.NativeName.get -> string
~Silk.NET.BuildTools.Common.Struct.NativeName.set -> void
~Silk.NET.BuildTools.Common.Struct.ProfileName.get -> string
~Silk.NET.BuildTools.Common.Struct.ProfileName.set -> void
~Silk.NET.BuildTools.Common.Struct.ProfileVersion.get -> System.Version
~Silk.NET.BuildTools.Common.Struct.ProfileVersion.set -> void
~Silk.NET.BuildTools.Common.Struct.Vtbl.get -> System.Collections.Generic.List<Silk.NET.BuildTools.Common.Functions.Function>
~Silk.NET.BuildTools.Common.Struct.Vtbl.set -> void
~Silk.NET.BuildTools.Common.Structs.Field.Attributes.get -> System.Collections.Generic.List<Silk.NET.BuildTools.Common.Attribute>
~Silk.NET.BuildTools.Common.Structs.Field.Attributes.set -> void
~Silk.NET.BuildTools.Common.Structs.Field.Count.get -> Silk.NET.BuildTools.Common.Functions.Count
~Silk.NET.BuildTools.Common.Structs.Field.Count.set -> void
~Silk.NET.BuildTools.Common.Structs.Field.DefaultAssignment.get -> string
~Silk.NET.BuildTools.Common.Structs.Field.DefaultAssignment.set -> void
~Silk.NET.BuildTools.Common.Structs.Field.Doc.get -> string
~Silk.NET.BuildTools.Common.Structs.Field.Doc.set -> void
~Silk.NET.BuildTools.Common.Structs.Field.Name.get -> string
~Silk.NET.BuildTools.Common.Structs.Field.Name.set -> void
~Silk.NET.BuildTools.Common.Structs.Field.NativeName.get -> string
~Silk.NET.BuildTools.Common.Structs.Field.NativeName.set -> void
~Silk.NET.BuildTools.Common.Structs.Field.NativeType.get -> string
~Silk.NET.BuildTools.Common.Structs.Field.NativeType.set -> void
~Silk.NET.BuildTools.Common.Structs.Field.Type.get -> Silk.NET.BuildTools.Common.Functions.Type
~Silk.NET.BuildTools.Common.Structs.Field.Type.set -> void
~Silk.NET.BuildTools.Common.Trimmers.DataTypeNameTrimmer.IsRelevant(Silk.NET.BuildTools.Common.Functions.Function trimmable) -> bool
~Silk.NET.BuildTools.Common.Trimmers.DataTypeNameTrimmer.IsRelevant(string trimmable) -> bool
~Silk.NET.BuildTools.Common.Trimmers.DataTypeNameTrimmer.Trim(Silk.NET.BuildTools.Common.Functions.Function trimmable, string prefix) -> Silk.NET.BuildTools.Common.Functions.Function
~Silk.NET.BuildTools.Common.Trimmers.DataTypeNameTrimmer.Trim(string name, string _) -> string
~Silk.NET.BuildTools.Common.Trimmers.ExtensionNameTrimmer.IsRelevant(Silk.NET.BuildTools.Common.Functions.Function trimmable) -> bool
~Silk.NET.BuildTools.Common.Trimmers.ExtensionNameTrimmer.IsRelevant(string trimmable) -> bool
~Silk.NET.BuildTools.Common.Trimmers.ExtensionNameTrimmer.Trim(Silk.NET.BuildTools.Common.Functions.Function trimmable, string prefix) -> Silk.NET.BuildTools.Common.Functions.Function
~Silk.NET.BuildTools.Common.Trimmers.ExtensionNameTrimmer.Trim(string trimmable, string prefix) -> string
~Silk.NET.BuildTools.Common.Trimmers.ITrimmer<TTrimmable>.Trim(TTrimmable trimmable, string prefix) -> TTrimmable
~Silk.NET.BuildTools.Config.Tasks.get -> Silk.NET.BuildTools.BindTask[]
~Silk.NET.BuildTools.Config.Tasks.set -> void
~Silk.NET.BuildTools.ConverterOptions.ClassName.get -> string
~Silk.NET.BuildTools.ConverterOptions.ClassName.set -> void
~Silk.NET.BuildTools.ConverterOptions.Constructor.get -> string
~Silk.NET.BuildTools.ConverterOptions.Constructor.set -> void
~Silk.NET.BuildTools.ConverterOptions.Reader.get -> string
~Silk.NET.BuildTools.ConverterOptions.Reader.set -> void
~Silk.NET.BuildTools.Converters.Constructors.OpenCLConstructor.TrimName(string name, Silk.NET.BuildTools.BindTask task) -> string
~Silk.NET.BuildTools.Converters.Constructors.OpenCLConstructor.WriteConstants(Silk.NET.BuildTools.Common.Profile profile, System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Constant> constants, Silk.NET.BuildTools.BindTask task) -> void
~Silk.NET.BuildTools.Converters.Constructors.OpenCLConstructor.WriteEnums(Silk.NET.BuildTools.Common.Profile profile, System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Enums.Enum> enums, Silk.NET.BuildTools.BindTask task) -> void
~Silk.NET.BuildTools.Converters.Constructors.OpenCLConstructor.WriteFunctions(Silk.NET.BuildTools.Common.Profile profile, System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Functions.Function> functions, Silk.NET.BuildTools.BindTask task) -> void
~Silk.NET.BuildTools.Converters.Constructors.OpenCLConstructor.WriteStructs(Silk.NET.BuildTools.Common.Profile profile, System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Struct> structs, Silk.NET.BuildTools.BindTask task) -> void
~Silk.NET.BuildTools.Converters.Constructors.OpenGLConstructor.TrimName(string name, Silk.NET.BuildTools.BindTask task) -> string
~Silk.NET.BuildTools.Converters.Constructors.OpenGLConstructor.WriteConstants(Silk.NET.BuildTools.Common.Profile profile, System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Constant> constants, Silk.NET.BuildTools.BindTask task) -> void
~Silk.NET.BuildTools.Converters.Constructors.OpenGLConstructor.WriteEnums(Silk.NET.BuildTools.Common.Profile profile, System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Enums.Enum> enums, Silk.NET.BuildTools.BindTask task) -> void
~Silk.NET.BuildTools.Converters.Constructors.OpenGLConstructor.WriteFunctions(Silk.NET.BuildTools.Common.Profile profile, System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Functions.Function> functions, Silk.NET.BuildTools.BindTask task) -> void
~Silk.NET.BuildTools.Converters.Constructors.OpenGLConstructor.WriteStructs(Silk.NET.BuildTools.Common.Profile profile, System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Struct> structs, Silk.NET.BuildTools.BindTask task) -> void
~Silk.NET.BuildTools.Converters.Constructors.VulkanConstructor.TrimName(string name, Silk.NET.BuildTools.BindTask task) -> string
~Silk.NET.BuildTools.Converters.Constructors.VulkanConstructor.WriteConstants(Silk.NET.BuildTools.Common.Profile profile, System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Constant> constants, Silk.NET.BuildTools.BindTask task) -> void
~Silk.NET.BuildTools.Converters.Constructors.VulkanConstructor.WriteEnums(Silk.NET.BuildTools.Common.Profile profile, System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Enums.Enum> enums, Silk.NET.BuildTools.BindTask task) -> void
~Silk.NET.BuildTools.Converters.Constructors.VulkanConstructor.WriteFunctions(Silk.NET.BuildTools.Common.Profile profile, System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Functions.Function> functions, Silk.NET.BuildTools.BindTask task) -> void
~Silk.NET.BuildTools.Converters.Constructors.VulkanConstructor.WriteStructs(Silk.NET.BuildTools.Common.Profile profile, System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Struct> structs, Silk.NET.BuildTools.BindTask task) -> void
~Silk.NET.BuildTools.Converters.IConstructor.WriteConstants(Silk.NET.BuildTools.Common.Profile profile, System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Constant> constants, Silk.NET.BuildTools.BindTask task) -> void
~Silk.NET.BuildTools.Converters.IConstructor.WriteEnums(Silk.NET.BuildTools.Common.Profile profile, System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Enums.Enum> enums, Silk.NET.BuildTools.BindTask task) -> void
~Silk.NET.BuildTools.Converters.IConstructor.WriteFunctions(Silk.NET.BuildTools.Common.Profile profile, System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Functions.Function> functions, Silk.NET.BuildTools.BindTask task) -> void
~Silk.NET.BuildTools.Converters.IConstructor.WriteStructs(Silk.NET.BuildTools.Common.Profile profile, System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Struct> structs, Silk.NET.BuildTools.BindTask task) -> void
~Silk.NET.BuildTools.Converters.IReader.Load(System.IO.Stream stream) -> object
~Silk.NET.BuildTools.Converters.IReader.ReadConstants(object obj, Silk.NET.BuildTools.BindTask task) -> System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Constant>
~Silk.NET.BuildTools.Converters.IReader.ReadEnums(object obj, Silk.NET.BuildTools.BindTask task) -> System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Enums.Enum>
~Silk.NET.BuildTools.Converters.IReader.ReadFunctions(object obj, Silk.NET.BuildTools.BindTask task) -> System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Functions.Function>
~Silk.NET.BuildTools.Converters.IReader.ReadStructs(object obj, Silk.NET.BuildTools.BindTask task) -> System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Struct>
~Silk.NET.BuildTools.Converters.Khronos.CommandDefinition.CommandDefinition(string name, Silk.NET.BuildTools.Converters.Khronos.TypeSpec returnType, Silk.NET.BuildTools.Converters.Khronos.ParameterDefinition[] parameters, string[] successCodes, string[] errorCodes) -> void
~Silk.NET.BuildTools.Converters.Khronos.CommandDefinition.ErrorCodes.get -> string[]
~Silk.NET.BuildTools.Converters.Khronos.CommandDefinition.GetParametersSignature() -> string
~Silk.NET.BuildTools.Converters.Khronos.CommandDefinition.Name.get -> string
~Silk.NET.BuildTools.Converters.Khronos.CommandDefinition.Parameters.get -> Silk.NET.BuildTools.Converters.Khronos.ParameterDefinition[]
~Silk.NET.BuildTools.Converters.Khronos.CommandDefinition.ReturnType.get -> Silk.NET.BuildTools.Converters.Khronos.TypeSpec
~Silk.NET.BuildTools.Converters.Khronos.CommandDefinition.SuccessCodes.get -> string[]
~Silk.NET.BuildTools.Converters.Khronos.ConstantDefinition.Comment.get -> string
~Silk.NET.BuildTools.Converters.Khronos.ConstantDefinition.ConstantDefinition(string name, string value, string comment) -> void
~Silk.NET.BuildTools.Converters.Khronos.ConstantDefinition.Name.get -> string
~Silk.NET.BuildTools.Converters.Khronos.ConstantDefinition.Value.get -> string
~Silk.NET.BuildTools.Converters.Khronos.EnumDefinition.Clone(string newName) -> Silk.NET.BuildTools.Converters.Khronos.EnumDefinition
~Silk.NET.BuildTools.Converters.Khronos.EnumDefinition.EnumDefinition(string name, Silk.NET.BuildTools.Converters.Khronos.EnumType type, Silk.NET.BuildTools.Converters.Khronos.EnumValue[] values, int bitWidth) -> void
~Silk.NET.BuildTools.Converters.Khronos.EnumDefinition.Name.get -> string
~Silk.NET.BuildTools.Converters.Khronos.EnumDefinition.Values.get -> Silk.NET.BuildTools.Converters.Khronos.EnumValue[]
~Silk.NET.BuildTools.Converters.Khronos.EnumDefinition.Values.set -> void
~Silk.NET.BuildTools.Converters.Khronos.EnumExtensionValue.EnumExtensionValue(string extendedType, string name, string value) -> void
~Silk.NET.BuildTools.Converters.Khronos.EnumExtensionValue.ExtendedType.get -> string
~Silk.NET.BuildTools.Converters.Khronos.EnumExtensionValue.Name.get -> string
~Silk.NET.BuildTools.Converters.Khronos.EnumExtensionValue.Value.get -> string
~Silk.NET.BuildTools.Converters.Khronos.EnumValue.Comment.get -> string
~Silk.NET.BuildTools.Converters.Khronos.EnumValue.EnumValue(string name, long value, string comment) -> void
~Silk.NET.BuildTools.Converters.Khronos.EnumValue.Name.get -> string
~Silk.NET.BuildTools.Converters.Khronos.ExtensionConstant.ExtensionConstant(string name, string value) -> void
~Silk.NET.BuildTools.Converters.Khronos.ExtensionConstant.Name.get -> string
~Silk.NET.BuildTools.Converters.Khronos.ExtensionConstant.Value.get -> string
~Silk.NET.BuildTools.Converters.Khronos.ExtensionDefinition.CommandNames.get -> string[]
~Silk.NET.BuildTools.Converters.Khronos.ExtensionDefinition.Constants.get -> Silk.NET.BuildTools.Converters.Khronos.ExtensionConstant[]
~Silk.NET.BuildTools.Converters.Khronos.ExtensionDefinition.EnumExtensions.get -> Silk.NET.BuildTools.Converters.Khronos.EnumExtensionValue[]
~Silk.NET.BuildTools.Converters.Khronos.ExtensionDefinition.ExtensionDefinition(string name, int number, string type, Silk.NET.BuildTools.Converters.Khronos.ExtensionConstant[] constants, Silk.NET.BuildTools.Converters.Khronos.EnumExtensionValue[] enumExtensions, string[] commandNames, string[] typeNames, string[] supported) -> void
~Silk.NET.BuildTools.Converters.Khronos.ExtensionDefinition.Name.get -> string
~Silk.NET.BuildTools.Converters.Khronos.ExtensionDefinition.Supported.get -> string[]
~Silk.NET.BuildTools.Converters.Khronos.ExtensionDefinition.Type.get -> string
~Silk.NET.BuildTools.Converters.Khronos.ExtensionDefinition.TypeNames.get -> string[]
~Silk.NET.BuildTools.Converters.Khronos.FeatureDefinition.Api.get -> string
~Silk.NET.BuildTools.Converters.Khronos.FeatureDefinition.CommandNames.get -> string[]
~Silk.NET.BuildTools.Converters.Khronos.FeatureDefinition.EnumExtensions.get -> Silk.NET.BuildTools.Converters.Khronos.EnumExtensionValue[]
~Silk.NET.BuildTools.Converters.Khronos.FeatureDefinition.EnumNames.get -> string[]
~Silk.NET.BuildTools.Converters.Khronos.FeatureDefinition.FeatureDefinition(string name, System.Version number, string api, string[] enumNames, string[] commandNames, string[] typeNames, Silk.NET.BuildTools.Converters.Khronos.EnumExtensionValue[] extensionValues) -> void
~Silk.NET.BuildTools.Converters.Khronos.FeatureDefinition.Name.get -> string
~Silk.NET.BuildTools.Converters.Khronos.FeatureDefinition.Number.get -> System.Version
~Silk.NET.BuildTools.Converters.Khronos.FeatureDefinition.TypeNames.get -> string[]
~Silk.NET.BuildTools.Converters.Khronos.HandleDefinition.HandleDefinition(string name, bool canBeDispatched, string parent) -> void
~Silk.NET.BuildTools.Converters.Khronos.HandleDefinition.Name.get -> string
~Silk.NET.BuildTools.Converters.Khronos.HandleDefinition.Parent.get -> string
~Silk.NET.BuildTools.Converters.Khronos.MemberSpec.Comment.get -> string
~Silk.NET.BuildTools.Converters.Khronos.MemberSpec.ElementCountSymbolic.get -> string
~Silk.NET.BuildTools.Converters.Khronos.MemberSpec.LegalValues.get -> string
~Silk.NET.BuildTools.Converters.Khronos.MemberSpec.MemberSpec(string name, Silk.NET.BuildTools.Converters.Khronos.TypeSpec type, bool isOptional, int elementCount, string elementCountSymbolic, string comment, string legalValues, int? numBits = null) -> void
~Silk.NET.BuildTools.Converters.Khronos.MemberSpec.Name.get -> string
~Silk.NET.BuildTools.Converters.Khronos.MemberSpec.Type.get -> Silk.NET.BuildTools.Converters.Khronos.TypeSpec
~Silk.NET.BuildTools.Converters.Khronos.ParameterDefinition.ElementCountSymbolic.get -> string
~Silk.NET.BuildTools.Converters.Khronos.ParameterDefinition.Name.get -> string
~Silk.NET.BuildTools.Converters.Khronos.ParameterDefinition.ParameterDefinition(string name, Silk.NET.BuildTools.Converters.Khronos.TypeSpec type, Silk.NET.BuildTools.Converters.Khronos.ParameterModifier modifier, bool isOptional, int count, string symbolicCount, bool isConst) -> void
~Silk.NET.BuildTools.Converters.Khronos.ParameterDefinition.Type.get -> Silk.NET.BuildTools.Converters.Khronos.TypeSpec
~Silk.NET.BuildTools.Converters.Khronos.StructureDefinition.Alias.get -> string
~Silk.NET.BuildTools.Converters.Khronos.StructureDefinition.Extends.get -> System.Collections.Generic.IReadOnlyList<string>
~Silk.NET.BuildTools.Converters.Khronos.StructureDefinition.Members.get -> Silk.NET.BuildTools.Converters.Khronos.MemberSpec[]
~Silk.NET.BuildTools.Converters.Khronos.StructureDefinition.Name.get -> string
~Silk.NET.BuildTools.Converters.Khronos.StructureDefinition.StructureDefinition(string name, string alias, Silk.NET.BuildTools.Converters.Khronos.MemberSpec[] members, string extends) -> void
~Silk.NET.BuildTools.Converters.Khronos.TypedefDefinition.BitValues.get -> string
~Silk.NET.BuildTools.Converters.Khronos.TypedefDefinition.Name.get -> string
~Silk.NET.BuildTools.Converters.Khronos.TypedefDefinition.Requires.get -> string
~Silk.NET.BuildTools.Converters.Khronos.TypedefDefinition.Type.get -> string
~Silk.NET.BuildTools.Converters.Khronos.TypedefDefinition.TypedefDefinition(string name, string requires, string type, string bitValues = null) -> void
~Silk.NET.BuildTools.Converters.Khronos.TypeSpec.Name.get -> string
~Silk.NET.BuildTools.Converters.Khronos.TypeSpec.TypeSpec(string name) -> void
~Silk.NET.BuildTools.Converters.Khronos.TypeSpec.TypeSpec(string name, int pointerIndirection) -> void
~Silk.NET.BuildTools.Converters.Khronos.TypeSpec.TypeSpec(string name, int pointerIndirection, int arrayDimensions) -> void
~Silk.NET.BuildTools.Converters.Khronos.VulkanSpecification.BaseTypes.get -> System.Collections.Generic.Dictionary<string, string>
~Silk.NET.BuildTools.Converters.Khronos.VulkanSpecification.Commands.get -> Silk.NET.BuildTools.Converters.Khronos.CommandDefinition[]
~Silk.NET.BuildTools.Converters.Khronos.VulkanSpecification.Constants.get -> Silk.NET.BuildTools.Converters.Khronos.ConstantDefinition[]
~Silk.NET.BuildTools.Converters.Khronos.VulkanSpecification.Enums.get -> Silk.NET.BuildTools.Converters.Khronos.EnumDefinition[]
~Silk.NET.BuildTools.Converters.Khronos.VulkanSpecification.Extensions.get -> Silk.NET.BuildTools.Converters.Khronos.ExtensionDefinition[]
~Silk.NET.BuildTools.Converters.Khronos.VulkanSpecification.Features.get -> Silk.NET.BuildTools.Converters.Khronos.FeatureDefinition[]
~Silk.NET.BuildTools.Converters.Khronos.VulkanSpecification.Handles.get -> Silk.NET.BuildTools.Converters.Khronos.HandleDefinition[]
~Silk.NET.BuildTools.Converters.Khronos.VulkanSpecification.Structures.get -> Silk.NET.BuildTools.Converters.Khronos.StructureDefinition[]
~Silk.NET.BuildTools.Converters.Khronos.VulkanSpecification.Typedefs.get -> Silk.NET.BuildTools.Converters.Khronos.TypedefDefinition[]
~Silk.NET.BuildTools.Converters.Khronos.VulkanSpecification.Unions.get -> Silk.NET.BuildTools.Converters.Khronos.StructureDefinition[]
~Silk.NET.BuildTools.Converters.Khronos.VulkanSpecification.VulkanSpecification(Silk.NET.BuildTools.Converters.Khronos.CommandDefinition[] commands, Silk.NET.BuildTools.Converters.Khronos.ConstantDefinition[] constants, Silk.NET.BuildTools.Converters.Khronos.TypedefDefinition[] typedefs, Silk.NET.BuildTools.Converters.Khronos.EnumDefinition[] enums, Silk.NET.BuildTools.Converters.Khronos.StructureDefinition[] structures, Silk.NET.BuildTools.Converters.Khronos.StructureDefinition[] unions, Silk.NET.BuildTools.Converters.Khronos.HandleDefinition[] handles, System.Collections.Generic.Dictionary<string, string> baseTypes, Silk.NET.BuildTools.Converters.Khronos.ExtensionDefinition[] extensions, Silk.NET.BuildTools.Converters.Khronos.FeatureDefinition[] features) -> void
~Silk.NET.BuildTools.Converters.Readers.OpenCLReader.Load(System.IO.Stream stream) -> object
~Silk.NET.BuildTools.Converters.Readers.OpenCLReader.ReadConstants(object obj, Silk.NET.BuildTools.BindTask task) -> System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Constant>
~Silk.NET.BuildTools.Converters.Readers.OpenCLReader.ReadEnums(object obj, Silk.NET.BuildTools.BindTask task) -> System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Enums.Enum>
~Silk.NET.BuildTools.Converters.Readers.OpenCLReader.ReadFunctions(object obj, Silk.NET.BuildTools.BindTask task) -> System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Functions.Function>
~Silk.NET.BuildTools.Converters.Readers.OpenCLReader.ReadStructs(object obj, Silk.NET.BuildTools.BindTask task) -> System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Struct>
~Silk.NET.BuildTools.Converters.Readers.OpenGLReader.Load(System.IO.Stream stream) -> object
~Silk.NET.BuildTools.Converters.Readers.OpenGLReader.ReadConstants(object obj, Silk.NET.BuildTools.BindTask task) -> System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Constant>
~Silk.NET.BuildTools.Converters.Readers.OpenGLReader.ReadEnums(object obj, Silk.NET.BuildTools.BindTask task) -> System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Enums.Enum>
~Silk.NET.BuildTools.Converters.Readers.OpenGLReader.ReadFunctions(object obj, Silk.NET.BuildTools.BindTask task) -> System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Functions.Function>
~Silk.NET.BuildTools.Converters.Readers.OpenGLReader.ReadStructs(object obj, Silk.NET.BuildTools.BindTask task) -> System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Struct>
~Silk.NET.BuildTools.Converters.Readers.OpenGLReader.TrimName(string name, Silk.NET.BuildTools.BindTask task) -> string
~Silk.NET.BuildTools.Converters.Readers.VulkanReader.Load(System.IO.Stream stream) -> object
~Silk.NET.BuildTools.Converters.Readers.VulkanReader.ReadConstants(object obj, Silk.NET.BuildTools.BindTask task) -> System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Constant>
~Silk.NET.BuildTools.Converters.Readers.VulkanReader.ReadEnums(object obj, Silk.NET.BuildTools.BindTask task) -> System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Enums.Enum>
~Silk.NET.BuildTools.Converters.Readers.VulkanReader.ReadFunctions(object obj, Silk.NET.BuildTools.BindTask task) -> System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Functions.Function>
~Silk.NET.BuildTools.Converters.Readers.VulkanReader.ReadStructs(object obj, Silk.NET.BuildTools.BindTask task) -> System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Struct>
~Silk.NET.BuildTools.Converters.Readers.VulkanReader.TrimName(string name, Silk.NET.BuildTools.BindTask task) -> string
~Silk.NET.BuildTools.Cpp.ClangPreprocessor.WithPreprocessorMixins(ClangSharp.TranslationUnit translationUnit, ClangSharp.Interop.CXTranslationUnit_Flags flags, string filePath, string[] cliArgs, ClangSharp.Interop.CXIndex index, Silk.NET.BuildTools.BindTask task) -> ClangSharp.TranslationUnit
~Silk.NET.BuildTools.Cpp.VisualStudioInfo.InstallationBaseFolder.get -> string
~Silk.NET.BuildTools.Cpp.VisualStudioInfo.InstallationBaseFolder.init -> void
~Silk.NET.BuildTools.Cpp.VisualStudioInfo.MsvcToolsFolder.get -> string
~Silk.NET.BuildTools.Cpp.VisualStudioInfo.MsvcToolsFolder.init -> void
~Silk.NET.BuildTools.Cpp.VisualStudioInfo.MsvcToolsIncludes.get -> string[]
~Silk.NET.BuildTools.Cpp.VisualStudioInfo.MsvcToolsIncludes.init -> void
~Silk.NET.BuildTools.Cpp.VisualStudioInfo.Name.get -> string
~Silk.NET.BuildTools.Cpp.VisualStudioInfo.Name.init -> void
~Silk.NET.BuildTools.Cpp.VisualStudioInfo.UcrtIncludes.get -> string[]
~Silk.NET.BuildTools.Cpp.VisualStudioInfo.UcrtIncludes.init -> void
~Silk.NET.BuildTools.Cpp.VisualStudioInfo.UcrtSdkDir.get -> string
~Silk.NET.BuildTools.Cpp.VisualStudioInfo.UcrtSdkDir.init -> void
~Silk.NET.BuildTools.Cpp.VisualStudioInfo.UcrtVersion.get -> System.Version
~Silk.NET.BuildTools.Cpp.VisualStudioInfo.UcrtVersion.init -> void
~Silk.NET.BuildTools.Cpp.VisualStudioInfo.Variables.get -> System.Collections.Generic.Dictionary<string, string>
~Silk.NET.BuildTools.Cpp.VisualStudioInfo.Variables.init -> void
~Silk.NET.BuildTools.Cpp.VisualStudioInfo.Version.get -> System.Version
~Silk.NET.BuildTools.Cpp.VisualStudioInfo.Version.init -> void
~Silk.NET.BuildTools.Cpp.VisualStudioInfo.VisualStudioInfo(string Name, string InstallationBaseFolder, string UcrtSdkDir, string[] UcrtIncludes, System.Version UcrtVersion, string MsvcToolsFolder, string[] MsvcToolsIncludes, System.Version Version, System.Collections.Generic.Dictionary<string, string> Variables) -> void
~Silk.NET.BuildTools.Injection.Code.get -> string
~Silk.NET.BuildTools.Injection.Code.set -> void
~Silk.NET.BuildTools.Injection.FunctionNativeNames.get -> string[]
~Silk.NET.BuildTools.Injection.FunctionNativeNames.set -> void
~Silk.NET.BuildTools.OutputOptions.ConditionalFunctions.get -> System.Collections.Generic.Dictionary<string, string[]>
~Silk.NET.BuildTools.OutputOptions.ConditionalFunctions.set -> void
~Silk.NET.BuildTools.OutputOptions.Folder.get -> string
~Silk.NET.BuildTools.OutputOptions.Folder.set -> void
~Silk.NET.BuildTools.OutputOptions.License.get -> string
~Silk.NET.BuildTools.OutputOptions.License.set -> void
~Silk.NET.BuildTools.OutputOptions.Props.get -> string
~Silk.NET.BuildTools.OutputOptions.Props.set -> void
~Silk.NET.BuildTools.Overloading.ArrayParameterOverloader.TryGetFunctionVariant(Silk.NET.BuildTools.Common.Functions.Function function, out Silk.NET.BuildTools.Common.ImplementedFunction overload, Silk.NET.BuildTools.Common.Project core) -> bool
~Silk.NET.BuildTools.Overloading.ClassOverloader.TryGetParameterVariant(Silk.NET.BuildTools.Common.Functions.Parameter parameter, out Silk.NET.BuildTools.Common.Functions.Parameter variant, Silk.NET.BuildTools.Common.Project core) -> bool
~Silk.NET.BuildTools.Overloading.GroupOverloader.TryGetParameterVariant(Silk.NET.BuildTools.Common.Functions.Parameter parameter, out Silk.NET.BuildTools.Common.Functions.Parameter variant, Silk.NET.BuildTools.Common.Project core) -> bool
~Silk.NET.BuildTools.Overloading.IComplexFunctionOverloader.TryGetFunctionVariant(Silk.NET.BuildTools.Common.Functions.Function original, out Silk.NET.BuildTools.Common.ImplementedFunction varied, Silk.NET.BuildTools.Common.Project core) -> bool
~Silk.NET.BuildTools.Overloading.ImplicitCountSpanOverloader.TryGetFunctionVariant(Silk.NET.BuildTools.Common.Functions.Function original, out Silk.NET.BuildTools.Common.ImplementedFunction varied, Silk.NET.BuildTools.Common.Project core) -> bool
~Silk.NET.BuildTools.Overloading.ISimpleParameterOverloader.TryGetParameterVariant(Silk.NET.BuildTools.Common.Functions.Parameter parameter, out Silk.NET.BuildTools.Common.Functions.Parameter varied, Silk.NET.BuildTools.Common.Project core) -> bool
~Silk.NET.BuildTools.Overloading.ISimpleReturnOverloader.TryGetReturnTypeVariant(Silk.NET.BuildTools.Common.Functions.Type returnType, out Silk.NET.BuildTools.Common.Functions.Type varied, System.Collections.Generic.List<Silk.NET.BuildTools.Common.Attribute> attrs, Silk.NET.BuildTools.Common.Project core) -> bool
~Silk.NET.BuildTools.Overloading.RefOverloader.TryGetParameterVariant(Silk.NET.BuildTools.Common.Functions.Parameter parameter, out Silk.NET.BuildTools.Common.Functions.Parameter varied, Silk.NET.BuildTools.Common.Project core) -> bool
~Silk.NET.BuildTools.Overloading.ReturnTypeOverloader.TryGetFunctionVariant(Silk.NET.BuildTools.Common.Functions.Function function, out Silk.NET.BuildTools.Common.ImplementedFunction overload, Silk.NET.BuildTools.Common.Project core) -> bool
~Silk.NET.BuildTools.Overloading.SpanOverloader.TryGetFunctionVariant(Silk.NET.BuildTools.Common.Functions.Function original, out Silk.NET.BuildTools.Common.ImplementedFunction varied, Silk.NET.BuildTools.Common.Project core) -> bool
~Silk.NET.BuildTools.Overloading.StringArrayOverloader.TryGetFunctionVariant(Silk.NET.BuildTools.Common.Functions.Function function, out Silk.NET.BuildTools.Common.ImplementedFunction overload, Silk.NET.BuildTools.Common.Project core) -> bool
~Silk.NET.BuildTools.Overloading.StringOverloader.TryGetParameterVariant(Silk.NET.BuildTools.Common.Functions.Parameter parameter, out Silk.NET.BuildTools.Common.Functions.Parameter variant, Silk.NET.BuildTools.Common.Project core) -> bool
~Silk.NET.BuildTools.Overloading.StringOverloader.TryGetReturnTypeVariant(Silk.NET.BuildTools.Common.Functions.Type returnType, out Silk.NET.BuildTools.Common.Functions.Type varied, System.Collections.Generic.List<Silk.NET.BuildTools.Common.Attribute> attrs, Silk.NET.BuildTools.Common.Project core) -> bool
~Silk.NET.Core.Attributes.InjectAttribute.InjectAttribute(Silk.NET.Core.Attributes.SilkTouchStage silkTouchStage, string code) -> void
~static readonly Silk.NET.BuildTools.Common.Naming.ExtensionAndAcronymOverrides -> System.Collections.Generic.IReadOnlyDictionary<string, string>
~static readonly Silk.NET.BuildTools.Common.Structs.Field.FixedCapableTypes -> System.Collections.Generic.HashSet<string>
~static readonly Silk.NET.BuildTools.Common.Trimmers.ExtensionNameTrimmer.Vendors -> string[]
~static readonly Silk.NET.BuildTools.Common.Utilities.CSharpKeywords -> System.Collections.Generic.HashSet<string>
~static Silk.NET.BuildTools.Baking.PreprocessorMixin.AddDirectives(Silk.NET.BuildTools.Common.Profile profile, System.Collections.Generic.Dictionary<string, string[]> directives) -> void
~static Silk.NET.BuildTools.Baking.ProfileBakery.Bake(string name, System.Collections.Generic.IReadOnlyList<Silk.NET.BuildTools.Common.Profile> impl, in Silk.NET.BuildTools.BindTask task) -> Silk.NET.BuildTools.Common.Profile
~static Silk.NET.BuildTools.Bind.ClassWriter.WriteMixedModeClasses(this Silk.NET.BuildTools.Common.Project project, Silk.NET.BuildTools.Common.Profile profile, string folder, Silk.NET.BuildTools.Bind.BindState task) -> void
~static Silk.NET.BuildTools.Bind.ClassWriter.WriteNameContainer(this Silk.NET.BuildTools.Common.Project project, Silk.NET.BuildTools.Common.Profile profile, string file, Silk.NET.BuildTools.Bind.BindState task) -> void
~static Silk.NET.BuildTools.Bind.EnumWriter.WriteEnum(this Silk.NET.BuildTools.Common.Enums.Enum enum, string file, Silk.NET.BuildTools.Common.Profile profile, Silk.NET.BuildTools.Common.Project project, Silk.NET.BuildTools.Bind.BindState task) -> void
~static Silk.NET.BuildTools.Bind.ProfileWriter.CachedLicenseTexts.get -> System.Collections.Generic.Dictionary<string, string>
~static Silk.NET.BuildTools.Bind.ProfileWriter.Flush(this Silk.NET.BuildTools.Common.Profile profile, Silk.NET.BuildTools.BindTask originalTask) -> void
~static Silk.NET.BuildTools.Bind.ProfileWriter.LicenseText(this Silk.NET.BuildTools.Bind.BindState task) -> string
~static Silk.NET.BuildTools.Bind.ProfileWriter.WriteCoreUsings(this System.IO.StreamWriter sw) -> void
~static Silk.NET.BuildTools.Bind.ProjectWriter.Write(this Silk.NET.BuildTools.Common.Project project, string folder, Silk.NET.BuildTools.Common.Profile profile, Silk.NET.BuildTools.Bind.BindState task) -> void
~static Silk.NET.BuildTools.Bind.StructWriter.WriteBitfield(Silk.NET.BuildTools.Common.Structs.Field fieldDecl, ref int index, ref long previousSize, ref long remainingBits, ref string currentBitfieldType, System.IO.StreamWriter sw, Silk.NET.BuildTools.Common.Profile profile) -> void
~static Silk.NET.BuildTools.Bind.StructWriter.WriteBuildToolsIntrinsic(Silk.NET.BuildTools.Common.Struct struct, string file, Silk.NET.BuildTools.Common.Profile profile, Silk.NET.BuildTools.Common.Project project, Silk.NET.BuildTools.Bind.BindState task, System.Collections.Generic.List<string> args) -> void
~static Silk.NET.BuildTools.Bind.StructWriter.WriteFunctionPointerWrapper(Silk.NET.BuildTools.Common.Struct struct, string file, Silk.NET.BuildTools.Common.Profile profile, Silk.NET.BuildTools.Common.Project project, Silk.NET.BuildTools.Bind.BindState state, string delegateName, string pfnName, System.Runtime.InteropServices.CallingConvention conv) -> void
~static Silk.NET.BuildTools.Bind.StructWriter.WriteFusedField(Silk.NET.BuildTools.Common.Struct struct, Silk.NET.BuildTools.Common.Project p, Silk.NET.BuildTools.Common.Structs.Field field, System.Collections.Generic.List<string> args, System.IO.StreamWriter sw) -> void
~static Silk.NET.BuildTools.Bind.StructWriter.WriteStruct(this Silk.NET.BuildTools.Common.Struct struct, string file, Silk.NET.BuildTools.Common.Profile profile, Silk.NET.BuildTools.Common.Project project, Silk.NET.BuildTools.Bind.BindState task) -> void
~static Silk.NET.BuildTools.Common.NameTrimmer.GetNameVariations(string functionEntrypoint, string prefix, bool trimExtensionName = true, bool trimDataType = true) -> System.Collections.Generic.IEnumerable<string>
~static Silk.NET.BuildTools.Common.NameTrimmer.Trim(string functionName, string prefix, bool trimExtensionName = true, bool trimDataType = true) -> string
~static Silk.NET.BuildTools.Common.Naming.GetAlphanumericOnly(this string name) -> string
~static Silk.NET.BuildTools.Common.Naming.Translate(string name, string prefix) -> string
~static Silk.NET.BuildTools.Common.Naming.TranslateLite(string name, string prefix) -> string
~static Silk.NET.BuildTools.Common.Naming.TranslateVariable(string name, string prefix) -> string
~static Silk.NET.BuildTools.Common.Naming.TrimName(string name, Silk.NET.BuildTools.BindTask task) -> string
~static Silk.NET.BuildTools.Common.TypeMapper.CreateVariedNameMap(Silk.NET.BuildTools.Common.Project project) -> System.Collections.Generic.Dictionary<string, string>
~static Silk.NET.BuildTools.Common.TypeMapper.Map(System.Collections.Generic.Dictionary<string, string> map, Silk.NET.BuildTools.Common.Functions.Function function) -> void
~static Silk.NET.BuildTools.Common.TypeMapper.Map(System.Collections.Generic.Dictionary<string, string> map, System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Constant> constants) -> void
~static Silk.NET.BuildTools.Common.TypeMapper.Map(System.Collections.Generic.Dictionary<string, string> map, System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Functions.Function> functions) -> void
~static Silk.NET.BuildTools.Common.TypeMapper.Map(System.Collections.Generic.Dictionary<string, string> map, System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Struct> structs) -> void
~static Silk.NET.BuildTools.Common.TypeMapper.MapEnums(Silk.NET.BuildTools.Common.Profile profile) -> void
~static Silk.NET.BuildTools.Common.TypeMapper.MapOne(System.Collections.Generic.Dictionary<string, string> map, Silk.NET.BuildTools.Common.Functions.Type og) -> Silk.NET.BuildTools.Common.Functions.Type
~static Silk.NET.BuildTools.Common.TypeMapper.MapOne(System.Collections.Generic.IEnumerable<System.Collections.Generic.Dictionary<string, string>> maps, Silk.NET.BuildTools.Common.Functions.Type og) -> Silk.NET.BuildTools.Common.Functions.Type
~static Silk.NET.BuildTools.Common.Utilities.CheckMemberName(this string name, string fPrefix) -> string
~static Silk.NET.BuildTools.Common.Utilities.Concat<T>(this System.Collections.Generic.IEnumerable<T> enumerable, T singleItem) -> System.Collections.Generic.IEnumerable<T>
~static Silk.NET.BuildTools.Common.Utilities.ConstitutesVulkanOutOverload(this string name) -> bool
~static Silk.NET.BuildTools.Common.Utilities.GetArrayDimensionString(int arrayDimensions) -> string
~static Silk.NET.BuildTools.Common.Utilities.IsBuildToolsIntrinsic(this System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Attribute> attributes, out System.Collections.Generic.List<string> args) -> bool
~static Silk.NET.BuildTools.Common.Utilities.MapAccessibility(this Silk.NET.BuildTools.Common.Functions.Accessibility access, bool s = false) -> string
~static Silk.NET.BuildTools.Common.Utilities.MapNativeString(this Silk.NET.BuildTools.Common.Functions.Type type) -> string
~static Silk.NET.BuildTools.Common.Utilities.MapUnmanagedType(this Silk.NET.BuildTools.Common.Functions.Type type) -> string
~static Silk.NET.BuildTools.Common.Utilities.RemoveDuplicates<T>(this System.Collections.Generic.IEnumerable<T> enumerable) -> System.Collections.Generic.IEnumerable<T>
~static Silk.NET.BuildTools.Common.Utilities.RemoveDuplicates<T>(this System.Collections.Generic.IEnumerable<T> enumerable, System.Func<T, T, bool> isDuplicate) -> System.Collections.Generic.IEnumerable<T>
~static Silk.NET.BuildTools.Common.Utilities.WithFixedFieldFixup09072020(this Silk.NET.BuildTools.Common.Structs.Field field) -> Silk.NET.BuildTools.Common.Structs.Field
~static Silk.NET.BuildTools.Converters.Khronos.CommandDefinition.CreateFromXml(System.Xml.Linq.XElement xe) -> Silk.NET.BuildTools.Converters.Khronos.CommandDefinition
~static Silk.NET.BuildTools.Converters.Khronos.ConstantDefinition.CreateFromXml(System.Xml.Linq.XElement xe) -> Silk.NET.BuildTools.Converters.Khronos.ConstantDefinition
~static Silk.NET.BuildTools.Converters.Khronos.EnumDefinition.CreateFromXml(System.Xml.Linq.XElement xe) -> Silk.NET.BuildTools.Converters.Khronos.EnumDefinition
~static Silk.NET.BuildTools.Converters.Khronos.EnumValue.CreateFromXml(System.Xml.Linq.XElement xe) -> Silk.NET.BuildTools.Converters.Khronos.EnumValue
~static Silk.NET.BuildTools.Converters.Khronos.ExtensionDefinition.CreateFromXml(System.Xml.Linq.XElement xe) -> Silk.NET.BuildTools.Converters.Khronos.ExtensionDefinition
~static Silk.NET.BuildTools.Converters.Khronos.FeatureDefinition.CreateFromXml(System.Xml.Linq.XElement xe) -> Silk.NET.BuildTools.Converters.Khronos.FeatureDefinition
~static Silk.NET.BuildTools.Converters.Khronos.HandleDefinition.CreateFromXml(System.Xml.Linq.XElement xe) -> Silk.NET.BuildTools.Converters.Khronos.HandleDefinition
~static Silk.NET.BuildTools.Converters.Khronos.MemberSpec.CreateFromXml(System.Xml.Linq.XElement xe) -> Silk.NET.BuildTools.Converters.Khronos.MemberSpec
~static Silk.NET.BuildTools.Converters.Khronos.ParameterDefinition.CreateFromXml(System.Xml.Linq.XElement xe) -> Silk.NET.BuildTools.Converters.Khronos.ParameterDefinition
~static Silk.NET.BuildTools.Converters.Khronos.Require.NotNull<T>(T obj) -> void
~static Silk.NET.BuildTools.Converters.Khronos.Require.NotNullOrEmpty(string name) -> void
~static Silk.NET.BuildTools.Converters.Khronos.StructureDefinition.CreateFromXml(System.Xml.Linq.XElement xe) -> Silk.NET.BuildTools.Converters.Khronos.StructureDefinition
~static Silk.NET.BuildTools.Converters.Khronos.TypedefDefinition.CreateFromXml(System.Xml.Linq.XElement xe) -> Silk.NET.BuildTools.Converters.Khronos.TypedefDefinition
~static Silk.NET.BuildTools.Converters.Khronos.VulkanSpecification.LoadFromXmlStream(System.IO.Stream specFileStream) -> Silk.NET.BuildTools.Converters.Khronos.VulkanSpecification
~static Silk.NET.BuildTools.Converters.Khronos.XElementExtensions.GetNameAttribute(this System.Xml.Linq.XElement xe) -> string
~static Silk.NET.BuildTools.Converters.Khronos.XElementExtensions.GetNameElement(this System.Xml.Linq.XElement xe) -> string
~static Silk.NET.BuildTools.Converters.Khronos.XElementExtensions.GetNameElementOrNull(this System.Xml.Linq.XElement xe) -> string
~static Silk.NET.BuildTools.Converters.Khronos.XElementExtensions.GetOptionalAttributeOrFalse(this System.Xml.Linq.XElement xe) -> bool
~static Silk.NET.BuildTools.Converters.Khronos.XElementExtensions.GetTypeAttributeOrNull(this System.Xml.Linq.XElement xe) -> string
~static Silk.NET.BuildTools.Converters.Khronos.XElementExtensions.GetTypeElement(this System.Xml.Linq.XElement xe) -> string
~static Silk.NET.BuildTools.Converters.Khronos.XElementExtensions.HasCategoryAttribute(this System.Xml.Linq.XElement xe, string value) -> bool
~static Silk.NET.BuildTools.Converters.ProfileConverter.ReadProfiles(Silk.NET.BuildTools.Converters.IReader reader, Silk.NET.BuildTools.Converters.IConstructor ctor, System.IO.Stream input, Silk.NET.BuildTools.BindTask task) -> System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Profile>
~static Silk.NET.BuildTools.Converters.Readers.OpenCLReader.ParseCountSignature(string? countData, out bool hasComputedCount, out System.Collections.Generic.IReadOnlyList<string>? computedCountParameterNames, out bool hasValueReference, out string? valueReferenceName, out string? valueReferenceExpression) -> Silk.NET.BuildTools.Common.Functions.Count?
~static Silk.NET.BuildTools.Converters.Readers.OpenCLReader.ParseTypeSignature(string type, string? original = null) -> Silk.NET.BuildTools.Common.Functions.Type
~static Silk.NET.BuildTools.Converters.Readers.OpenCLReader.ParseTypeSignature(System.Xml.Linq.XElement typeElement) -> Silk.NET.BuildTools.Common.Functions.Type
~static Silk.NET.BuildTools.Converters.Readers.OpenCLReader.TrimName(string name, Silk.NET.BuildTools.BindTask task) -> string
~static Silk.NET.BuildTools.Converters.Readers.OpenGLReader.ParseCountSignature(string? countData, out bool hasComputedCount, out System.Collections.Generic.IReadOnlyList<string>? computedCountParameterNames, out bool hasValueReference, out string? valueReferenceName, out string? valueReferenceExpression) -> Silk.NET.BuildTools.Common.Functions.Count?
~static Silk.NET.BuildTools.Converters.Readers.OpenGLReader.ParseTypeSignature(string type, string? original = null) -> Silk.NET.BuildTools.Common.Functions.Type
~static Silk.NET.BuildTools.Converters.Readers.OpenGLReader.ParseTypeSignature(System.Xml.Linq.XElement typeElement) -> Silk.NET.BuildTools.Common.Functions.Type
~static Silk.NET.BuildTools.Cpp.Clang.GenerateProfile(string fileName, System.IO.Stream input, Silk.NET.BuildTools.BindTask task) -> Silk.NET.BuildTools.Common.Profile
~static Silk.NET.BuildTools.Cpp.Clang.GetCallingConvention(ClangSharp.FunctionDecl functionDecl) -> ClangSharp.Interop.CXCallingConv
~static Silk.NET.BuildTools.Cpp.Clang.GetCallingConvention(ClangSharp.Type type) -> ClangSharp.Interop.CXCallingConv
~static Silk.NET.BuildTools.Cpp.Clang.IsProbablyABitmask(Silk.NET.BuildTools.Common.Enums.Enum enum) -> bool
~static Silk.NET.BuildTools.Cpp.Clang.ShouldVisit(ClangSharp.Cursor cursor, Silk.NET.BuildTools.BindTask task, bool nullTolerant = false) -> bool
~static Silk.NET.BuildTools.Cpp.ClangConfig.ForwardSlash(string x) -> string
~static Silk.NET.BuildTools.Cpp.ComVtblProcessor.GetHelperFunctions(Silk.NET.BuildTools.Common.Struct struct, Silk.NET.BuildTools.Common.Project core) -> System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.ImplementedFunction>
~static Silk.NET.BuildTools.Cpp.ComVtblProcessor.GetWithVariants(System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Functions.Function> functions, Silk.NET.BuildTools.Common.Project core) -> System.Collections.Generic.IEnumerable<(Silk.NET.BuildTools.Common.Functions.Function Original, Silk.NET.BuildTools.Common.Functions.Function New)>
~static Silk.NET.BuildTools.Cpp.ComVtblProcessor.Implement(System.Text.StringBuilder sb, Silk.NET.BuildTools.Common.Functions.Function function, Silk.NET.BuildTools.Common.Struct parent, int index, bool retDeref = false) -> void
~static Silk.NET.BuildTools.Cpp.FusionReactor.ReactStructs(System.Collections.Generic.IReadOnlyList<Silk.NET.BuildTools.Common.Struct> structs) -> void
~static Silk.NET.BuildTools.Overloading.ArrayParameterOverloader.IsApplicable(Silk.NET.BuildTools.Common.Functions.Function function) -> bool
~static Silk.NET.BuildTools.Overloading.ComplexFunctionOverloader.GetOverloads(Silk.NET.BuildTools.Common.Functions.Function original, Silk.NET.BuildTools.Common.Project core, System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Overloading.IComplexFunctionOverloader> overloaders) -> System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.ImplementedFunction>
~static Silk.NET.BuildTools.Overloading.Overloader.FunctionOverloaders.get -> Silk.NET.BuildTools.Overloading.IComplexFunctionOverloader[]
~static Silk.NET.BuildTools.Overloading.Overloader.GetOverloads(System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Functions.Function> allFunctions, Silk.NET.BuildTools.Common.Project core, System.Collections.Generic.Dictionary<string, string[]>? overloadExcludedFunctions) -> System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.ImplementedFunction>
~static Silk.NET.BuildTools.Overloading.Overloader.GetWithVariants(System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Functions.Function> functions, Silk.NET.BuildTools.Common.Project core, System.Collections.Generic.Dictionary<string, string[]>? overloadExcludedFunctions) -> System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Functions.Function>
~static Silk.NET.BuildTools.Overloading.Overloader.ParameterOverloaders.get -> Silk.NET.BuildTools.Overloading.ISimpleParameterOverloader[][]
~static Silk.NET.BuildTools.Overloading.Overloader.ReturnOverloaders.get -> Silk.NET.BuildTools.Overloading.ISimpleReturnOverloader[]
~static Silk.NET.BuildTools.Overloading.SimpleParameterOverloader.GetWithOverloads(Silk.NET.BuildTools.Common.Functions.Function original, Silk.NET.BuildTools.Common.Project core, System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Overloading.ISimpleParameterOverloader> overloaders) -> System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Functions.Function>
~static Silk.NET.BuildTools.Overloading.SimpleReturnOverloader.GetWithOverloads(Silk.NET.BuildTools.Common.Functions.Function original, Silk.NET.BuildTools.Common.Project core, System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Overloading.ISimpleReturnOverloader> overloaders) -> System.Collections.Generic.IEnumerable<Silk.NET.BuildTools.Common.Functions.Function>
