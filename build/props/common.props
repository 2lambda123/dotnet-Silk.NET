<!--suppress CheckTagEmptyBody -->
<Project InitialTargets="SilkAddIcon;SilkGenerateNuGetReadme;SilkAddDateTime;SilkCreatePublicApi">
    <!-- Presets for metapackages and native packages -->
    <PropertyGroup Condition="'$(SilkMetapackage)' == 'true' or '$(SilkNativePackage)' == 'true'">
        <IncludeBuildOutput>false</IncludeBuildOutput>
        <SilkSourceLinkExempt>true</SilkSourceLinkExempt>
        <SilkPublicApiExempt>true</SilkPublicApiExempt>
    </PropertyGroup>
    <!-- Core properties -->
    <PropertyGroup>
        <PackageLicenseExpression>MIT</PackageLicenseExpression>
        <LangVersion>10</LangVersion>
        <Authors>.NET Foundation and Contributors</Authors>
        <PackageReleaseNotes>
            Silk.NET October 2023 Update

            - Added SPIR-V Reflect bindings
            - Added SPIR-V Cross bindings
            - Added Shaderc bindings
            - Added WIC/WindowsCodecs bindings (thanks @hez2010)
            - Added multi-channel formats support for OpenAL (thanks @aleksrutins)
            - Added EffectTarget support for OpenAL Soft (thanks @okaniku, @doobah)
            - Added MoltenVK support for iOS (massive thank you to @zvasya for contributing and testing)
            - Added macOS support for the CreateWebGPUSurface helper function (thanks @AsgardXIV)
            - Added the ability to load MoltenVK directly as a fallback should the Vulkan Loader be unavailable on macOS
            - Added trimming support with an option to enable/disable static-linking support at link time
            - Added WinRT interoperability support for Direct3D 11.
            - Added the ability to query extensions from specific Vulkan layers using the Silk.NET helpers
            - Added extension methods on IGamepad to return Thumbstick state instead of requiring use of the indexers (thanks @jvyden)
            - Added ref properties for Vulkan chain constituents (thanks @khitiara)
            - Added Apple Silicon binaries for Assimp (thanks @jschieck)
            - Added compatibility with Linux distributions using as early as glibc 2.16
            - Added equality operators and IEquatable to Bool32 (thanks @Syncaidius)
            - Added ToSystem/ToGeneric as extension methods (rather than plain static functions) to convert to/from Silk.NET.Maths types (thanks @Wafer-EX)
            - Added discriminant values to PinObjectMarshaller to tie pinned handles to state to which the pin pertains
            - Updated to Vulkan 1.3.266
            - Updated to OpenXR 1.0.30
            - Updated to SDL 2.28.1
            - Updated to MoltenVK 1.2.5
            - Updated to latest WebGPU headers
            - Updated to latest OpenCL specifications
            - Updated to latest OpenGL specifications
            - Improved allocations in the Silk.NET Loader (thanks @Youssef1313)
            - Improved robustness of HLU on AOT compilations
            - Fixed WGPU not loading with the correct filename on Windows
            - Fixed COM V-Table indices not matching the Clang-reported V-Table index in some cases (DirectWrite/D2D1/DComp)
            - Fixed OpenAL throwing when loading an extension prefixed with ALC_ instead AL_
            - Fixed WGL.GetApi throwing a NotImplementedException
            - Fixed library loading failing on platforms that do not have a libdl.so symlink (we are now using libdl.so.2, thanks @CasualPokePlayer) 
            - Fixed a StackOverflowException when using SetWindowIcon in some cases with Silk.NET.Windowing 
            - Fixed GLFW crashing in some cases where multiple windows are used
            - Fixed WebGPU using the incorrect size for booleans
            - Fixed a memory leak with some string marshalling functions

            If you are using Silk.NET with an iOS or Android application, please enable trimming and set TrimMode to full.
        </PackageReleaseNotes>
        <PackageTags Condition="'$(PackageTags)' == ''">OpenCL;OpenGL;OpenAL;OpenGLES;GLES;Vulkan;Assimp;DirectX;GLFW;SDL;Windowing;Input;Gamepad;Joystick;Keyboard;Mouse;SilkTouch;Source;Generator;C#;F#;.NET;DotNet;Mono;Vector;Math;Maths;Numerics;Game;Graphics;Compute;Audio;Sound;Engine;Silk;Silk.NET;Slim.NET;ElgarTK;GPU;Sharp;Science;Scientific;Visualization;Visual;Audiovisual;Windows;macOS;Linux;Android;Bindings;OSX;Wrapper;Native</PackageTags>
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
        <PackageOutputPath>$(MSBuildThisFileDirectory)/../output_packages</PackageOutputPath>
        <RepositoryUrl>https://github.com/dotnet/Silk.NET</RepositoryUrl>
        <RepositoryType>Git</RepositoryType>
        <VersionPrefix>2.18.0</VersionPrefix>
        <VersionSuffix Condition="'$(VersionSuffix)' == ''"></VersionSuffix>
        <Description Condition="'$(Description)' == ''">
            Silk.NET is a high-speed, advanced library, providing bindings to popular low-level APIs such as OpenGL, OpenCL, OpenAL, OpenXR, GLFW, SDL, Vulkan, Assimp, and DirectX.
        </Description>
        <CheckEolWorkloads>false</CheckEolWorkloads>
    </PropertyGroup>
    <PropertyGroup Condition="$(TargetFramework.StartsWith('net6')) or $(TargetFramework.StartsWith('net7')) or $(TargetFramework.StartsWith('net8'))">
        <IsTrimmable>true</IsTrimmable>
        <EnableTrimAnalyzer>true</EnableTrimAnalyzer>
        <EnableAotAnalyzer>true</EnableAotAnalyzer>
        <EnableSingleFileAnalyzer>true</EnableSingleFileAnalyzer>
        <TrimMode>full</TrimMode>
    </PropertyGroup>
    <!-- Date/time based versioning (mainly used by natives) -->
    <Target Name="SilkAddDateTime" Condition="'$(SilkGitDirForVersion)' != '' and Exists('$(SilkGitDirForVersion)/.git')">
        <PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
            <SilkGitDateTimeFormat>%25%25cI</SilkGitDateTimeFormat>
        </PropertyGroup>
        <PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
            <SilkGitDateTimeFormat>%25cI</SilkGitDateTimeFormat>
        </PropertyGroup>
        <Exec ConsoleToMSBuild="True"
              Command="git show -s &quot;--format=$(SilkGitDateTimeFormat)&quot;"
              WorkingDirectory="$(SilkGitDirForVersion)">
            <Output TaskParameter="ConsoleOutput" PropertyName="_SilkGitIdt" />
        </Exec>
        <PropertyGroup>
            <PackageVersion>$([System.DateTime]::Parse($(_SilkGitIdt)).ToUniversalTime().ToString(yyyy.MM.dd))</PackageVersion>
        </PropertyGroup>
    </Target>
    <!-- SourceLink -->
    <PropertyGroup Condition="'$(SilkSourceLinkExempt)' == ''">
        <DebugType>portable</DebugType>
        <EmbedAllSources>true</EmbedAllSources>
        <IncludeSymbols>true</IncludeSymbols>
        <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    </PropertyGroup>
    <ItemGroup Condition="'$(SilkSourceLinkExempt)' == ''">
        <PackageReference Include="DotNet.ReproducibleBuilds" Version="1.1.1" PrivateAssets="All"/>
        <PackageReference Include="DotNet.ReproducibleBuilds.Isolated" Version="1.1.1" PrivateAssets="All"/>
    </ItemGroup>
    <!-- Nuget Icon - done as a target so it doesn't appear in the IDE -->
    <Target Name="SilkAddIcon" Condition="'$(SilkIconExempt)' == ''">
        <ItemGroup>
            <None Include="$(MSBuildThisFileDirectory)../../documentation/readme/silkdotnet_v3.png"
                  Pack="true"
                  PackagePath="\" />
        </ItemGroup>
        <PropertyGroup>
            <PackageIcon>silkdotnet_v3.png</PackageIcon>
        </PropertyGroup>
    </Target>
    <!-- NuGet README -->
    <Target Name="SilkGenerateNuGetReadme" Condition="'$(SilkReadmeExempt)' == ''">
        <PropertyGroup>
            <SilkReadme>$([System.IO.File]::ReadAllText("$(MSBuildThisFileDirectory)../../README.md"))</SilkReadme>
            <SilkReadme>$([System.String]::Copy($(SilkReadme))
                .Replace('&lt;!-- Begin exclude from NuGet readme. --&gt;','&lt;!--')
                .Replace('&lt;!-- End exclude from NuGet readme. --&gt;','--&gt;')
                .Replace('&lt;!-- Begin include in NuGet readme.','')
                .Replace('End include in NuGet readme. --&gt;','')
                .Replace('&lt;h1 align=&quot;center&quot;&gt;', '# ')
                .Replace('&lt;h2 align=&quot;center&quot;&gt;', '# ')
                .Replace('&lt;/h1&gt;', '').Replace('&lt;/h2&gt;', '')
                .Replace('&lt;br /&gt;', '%0a%0a').Replace('&lt;br/&gt;', '%0a%0a')
                .Replace('&lt;div&gt;', '').Replace('&lt;/div&gt;', '')
                .Replace('&lt;a&gt;', '').Replace('&lt;/a&gt;', ''))
            </SilkReadme>
            <SilkReadmePath>$(IntermediateOutputPath)$(TargetFramework)/README.md</SilkReadmePath>
        </PropertyGroup>
        <PropertyGroup Condition="'$(SilkDescription)' != ''">
            <Description>$(SilkDescription) $(Description)</Description>
            <SilkExtendedDescription>$(SilkDescription) $(SilkExtendedDescription)%0a%0a</SilkExtendedDescription>
            <SilkReadme>$([System.String]::Copy($(SilkReadme))
                .Replace('&lt;!-- Package description inserted here automatically. --&gt;',
                '# About This Package%0a%0a$(SilkExtendedDescription)'))
            </SilkReadme>
        </PropertyGroup>
        <ItemGroup>
            <SilkReadmeLines Include="$(SilkReadme)" />
            <SilkReadmeGenerated Include="$(SilkReadmePath)" />
        </ItemGroup>
        <WriteLinesToFile File="@(SilkReadmeGenerated)" 
                          Lines="@(SilkReadmeLines)" 
                          Overwrite="true" 
                          Encoding="UTF-8" />
        <PropertyGroup>
            <PackageReadmeFile>README.md</PackageReadmeFile>
        </PropertyGroup>
        <ItemGroup>
            <None Include="$(SilkReadmePath)" Pack="true" PackagePath="\" />
        </ItemGroup>
    </Target>
    <!-- Public API Analyzer -->
    <ItemGroup Condition="'$(SilkPublicApiExempt)' != 'true'">
        <PackageReference Include="Microsoft.CodeAnalysis.PublicApiAnalyzers" Version="3.3.4" PrivateAssets="All" />
    </ItemGroup>
    <ItemGroup Condition="'$(SilkPublicApiExempt)' != 'true' and '$(TargetFramework)' != ''">
        <AdditionalFiles Include="PublicAPI/$(TargetFramework)/PublicAPI.Shipped.txt" />
        <AdditionalFiles Include="PublicAPI/$(TargetFramework)/PublicAPI.Unshipped.txt" />
    </ItemGroup>
    <Target Name="SilkCreatePublicApi" Condition="'$(SilkPublicApiExempt)' != 'true' and '$(TargetFramework)' != ''">
        <ItemGroup>
            <SilkNewPublicAPILines Include="#nullable enable" />
        </ItemGroup>
        <MakeDir Directories="PublicAPI" Condition="!Exists('PublicAPI')" />
        <MakeDir Directories="PublicAPI/$(TargetFramework)" Condition="!Exists('PublicAPI/$(TargetFramework)')" />
        <WriteLinesToFile File="PublicAPI/$(TargetFramework)/PublicAPI.Shipped.txt"
                          Lines="@(SilkNewPublicAPILines)"
                          Condition="!Exists('PublicAPI/$(TargetFramework)/PublicAPI.Shipped.txt')" />
        <WriteLinesToFile File="PublicAPI/$(TargetFramework)/PublicAPI.Unshipped.txt"
                          Lines="@(SilkNewPublicAPILines)"
                          Condition="!Exists('PublicAPI/$(TargetFramework)/PublicAPI.Unshipped.txt')" />
    </Target>
</Project>
